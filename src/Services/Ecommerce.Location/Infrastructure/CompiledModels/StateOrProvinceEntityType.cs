// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Ecommerce.Location.Domain.CountryAggregate;
using Ecommerce.Location.Domain.StateOrProvinceAggregate;
using Ecommerce.SharedKernel.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;
using Type = Ecommerce.Location.Domain.StateOrProvinceAggregate.Type;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ecommerce.Location.Infrastructure.CompiledModels
{
    internal partial class StateOrProvinceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince",
                typeof(StateOrProvince),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(Entity<long>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entity<long>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            id.AddAnnotation("Relational:ColumnName", "id");

            var code = runtimeEntityType.AddProperty(
                "Code",
                typeof(string),
                propertyInfo: typeof(StateOrProvince).GetProperty("Code", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(StateOrProvince).GetField("<Code>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20);
            code.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(20)",
                    size: 20));
            code.TypeMapping = ((NpgsqlStringTypeMapping)code.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        code.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        code.AddAnnotation("Relational:ColumnName", "code");

        var countryId = runtimeEntityType.AddProperty(
            "CountryId",
            typeof(long),
            propertyInfo: typeof(StateOrProvince).GetProperty("CountryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(StateOrProvince).GetField("<CountryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: 0L);
        countryId.TypeMapping = LongTypeMapping.Default.Clone(
            comparer: new ValueComparer<long>(
                (long v1, long v2) => v1 == v2,
                (long v) => v.GetHashCode(),
                (long v) => v),
            keyComparer: new ValueComparer<long>(
                (long v1, long v2) => v1 == v2,
                (long v) => v.GetHashCode(),
                (long v) => v),
            providerValueComparer: new ValueComparer<long>(
                (long v1, long v2) => v1 == v2,
                (long v) => v.GetHashCode(),
                (long v) => v));
        countryId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        countryId.AddAnnotation("Relational:ColumnName", "country_id");

        var createdAt = runtimeEntityType.AddProperty(
            "CreatedAt",
            typeof(DateTime),
            propertyInfo: typeof(AuditableEntity<long>).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(AuditableEntity<long>).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            valueGenerated: ValueGenerated.OnAdd,
            sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
        createdAt.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
            comparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v),
            keyComparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v),
            providerValueComparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v));
        createdAt.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        createdAt.AddAnnotation("Relational:ColumnName", "created_at");
        createdAt.AddAnnotation("Relational:DefaultValue", new DateTime(2024, 10, 13, 14, 50, 22, 931, DateTimeKind.Utc).AddTicks(7268));

        var lastModifiedAt = runtimeEntityType.AddProperty(
            "LastModifiedAt",
            typeof(DateTime?),
            propertyInfo: typeof(AuditableEntity<long>).GetProperty("LastModifiedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(AuditableEntity<long>).GetField("<LastModifiedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true,
            valueGenerated: ValueGenerated.OnAdd);
        lastModifiedAt.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
            comparer: new ValueComparer<DateTime?>(
                (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
                (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
            keyComparer: new ValueComparer<DateTime?>(
                (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
                (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
            providerValueComparer: new ValueComparer<DateTime?>(
                (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
                (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)));
        lastModifiedAt.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        lastModifiedAt.AddAnnotation("Relational:ColumnName", "last_modified_at");
        lastModifiedAt.AddAnnotation("Relational:DefaultValue", new DateTime(2024, 10, 13, 14, 50, 22, 931, DateTimeKind.Utc).AddTicks(7501));

        var name = runtimeEntityType.AddProperty(
            "Name",
            typeof(string),
            propertyInfo: typeof(StateOrProvince).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(StateOrProvince).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            maxLength: 500);
        name.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(500)",
                size: 500));
        name.TypeMapping = ((NpgsqlStringTypeMapping)name.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    name.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    name.AddAnnotation("Relational:ColumnName", "name");

    var type = runtimeEntityType.AddProperty(
        "Type",
        typeof(Type),
        propertyInfo: typeof(StateOrProvince).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(StateOrProvince).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
    type.TypeMapping = ByteTypeMapping.Default.Clone(
        comparer: new ValueComparer<Type>(
            (Type v1, Type v2) => object.Equals((object)v1, (object)v2),
            (Type v) => v.GetHashCode(),
            (Type v) => v),
        keyComparer: new ValueComparer<Type>(
            (Type v1, Type v2) => object.Equals((object)v1, (object)v2),
            (Type v) => v.GetHashCode(),
            (Type v) => v),
        providerValueComparer: new ValueComparer<byte>(
            (byte v1, byte v2) => v1 == v2,
            (byte v) => (int)v,
            (byte v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "smallint"),
        converter: new ValueConverter<Type, byte>(
            (Type value) => (byte)value,
            (byte value) => (Type)value),
        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Type, byte>(
            JsonByteReaderWriter.Instance,
            new ValueConverter<Type, byte>(
                (Type value) => (byte)value,
                (byte value) => (Type)value)));
    type.SetSentinelFromProviderValue((byte)0);
    type.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    type.AddAnnotation("Relational:ColumnName", "type");

    var version = runtimeEntityType.AddProperty(
        "Version",
        typeof(Guid),
        propertyInfo: typeof(AuditableEntity<long>).GetProperty("Version", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(AuditableEntity<long>).GetField("<Version>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        concurrencyToken: true,
        sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
    version.TypeMapping = GuidTypeMapping.Default.Clone(
        comparer: new ValueComparer<Guid>(
            (Guid v1, Guid v2) => v1 == v2,
            (Guid v) => v.GetHashCode(),
            (Guid v) => v),
        keyComparer: new ValueComparer<Guid>(
            (Guid v1, Guid v2) => v1 == v2,
            (Guid v) => v.GetHashCode(),
            (Guid v) => v),
        providerValueComparer: new ValueComparer<Guid>(
            (Guid v1, Guid v2) => v1 == v2,
            (Guid v) => v.GetHashCode(),
            (Guid v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "uuid"));
    version.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    version.AddAnnotation("Relational:ColumnName", "version");

    var key = runtimeEntityType.AddKey(
        new[] { id });
    runtimeEntityType.SetPrimaryKey(key);
    key.AddAnnotation("Relational:Name", "pk_state_or_provinces");

    var index = runtimeEntityType.AddIndex(
        new[] { countryId });
    index.AddAnnotation("Relational:Name", "ix_state_or_provinces_country_id");

    return runtimeEntityType;
}

public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
{
    var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CountryId") },
        principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
        principalEntityType,
        deleteBehavior: DeleteBehavior.Cascade,
        required: true);

    var country = declaringEntityType.AddNavigation("Country",
        runtimeForeignKey,
        onDependent: true,
        typeof(Country),
        propertyInfo: typeof(StateOrProvince).GetProperty("Country", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(StateOrProvince).GetField("<Country>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    var stateOrProvinces = principalEntityType.AddNavigation("StateOrProvinces",
        runtimeForeignKey,
        onDependent: false,
        typeof(IReadOnlyCollection<StateOrProvince>),
        propertyInfo: typeof(Country).GetProperty("StateOrProvinces", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Country).GetField("_stateOrProvinces", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    runtimeForeignKey.AddAnnotation("Relational:Name", "fk_state_or_provinces_countries_country_id");
    return runtimeForeignKey;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "state_or_provinces");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
