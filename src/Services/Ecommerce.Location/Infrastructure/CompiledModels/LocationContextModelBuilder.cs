// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ecommerce.Location.Infrastructure.CompiledModels
{
    public partial class LocationContextModel
    {
        partial void Initialize()
        {
            var address = AddressEntityType.Create(this);
            var country = CountryEntityType.Create(this);
            var district = DistrictEntityType.Create(this);
            var stateOrProvince = StateOrProvinceEntityType.Create(this);
            var wardOrCommune = WardOrCommuneEntityType.Create(this);
            var inboxState = InboxStateEntityType.Create(this);
            var outboxMessage = OutboxMessageEntityType.Create(this);
            var outboxState = OutboxStateEntityType.Create(this);

            AddressEntityType.CreateForeignKey1(address, wardOrCommune);
            DistrictEntityType.CreateForeignKey1(district, stateOrProvince);
            StateOrProvinceEntityType.CreateForeignKey1(stateOrProvince, country);
            WardOrCommuneEntityType.CreateForeignKey1(wardOrCommune, district);

            AddressEntityType.CreateAnnotations(address);
            CountryEntityType.CreateAnnotations(country);
            DistrictEntityType.CreateAnnotations(district);
            StateOrProvinceEntityType.CreateAnnotations(stateOrProvince);
            WardOrCommuneEntityType.CreateAnnotations(wardOrCommune);
            InboxStateEntityType.CreateAnnotations(inboxState);
            OutboxMessageEntityType.CreateAnnotations(outboxMessage);
            OutboxStateEntityType.CreateAnnotations(outboxState);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var address = FindEntityType("Ecommerce.Location.Domain.AddressAggregate.Address")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            address.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var ecommerceLocationDomainAddressAggregateAddressTableBase = new TableBase("Ecommerce.Location.Domain.AddressAggregate.Address", null, relationalModel);
            var created_atColumnBase = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceLocationDomainAddressAggregateAddressTableBase);
            ecommerceLocationDomainAddressAggregateAddressTableBase.Columns.Add("created_at", created_atColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", ecommerceLocationDomainAddressAggregateAddressTableBase);
            ecommerceLocationDomainAddressAggregateAddressTableBase.Columns.Add("id", idColumnBase);
            var last_modified_atColumnBase = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceLocationDomainAddressAggregateAddressTableBase)
            {
                IsNullable = true
            };
            ecommerceLocationDomainAddressAggregateAddressTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase);
            var streetColumnBase = new ColumnBase<ColumnMappingBase>("street", "character varying(500)", ecommerceLocationDomainAddressAggregateAddressTableBase);
            ecommerceLocationDomainAddressAggregateAddressTableBase.Columns.Add("street", streetColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceLocationDomainAddressAggregateAddressTableBase);
            ecommerceLocationDomainAddressAggregateAddressTableBase.Columns.Add("version", versionColumnBase);
            var ward_or_commune_idColumnBase = new ColumnBase<ColumnMappingBase>("ward_or_commune_id", "bigint", ecommerceLocationDomainAddressAggregateAddressTableBase);
            ecommerceLocationDomainAddressAggregateAddressTableBase.Columns.Add("ward_or_commune_id", ward_or_commune_idColumnBase);
            var zip_codeColumnBase = new ColumnBase<ColumnMappingBase>("zip_code", "character varying(20)", ecommerceLocationDomainAddressAggregateAddressTableBase);
            ecommerceLocationDomainAddressAggregateAddressTableBase.Columns.Add("zip_code", zip_codeColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Location.Domain.AddressAggregate.Address", ecommerceLocationDomainAddressAggregateAddressTableBase);
            var ecommerceLocationDomainAddressAggregateAddressMappingBase = new TableMappingBase<ColumnMappingBase>(address, ecommerceLocationDomainAddressAggregateAddressTableBase, true);
            ecommerceLocationDomainAddressAggregateAddressTableBase.AddTypeMapping(ecommerceLocationDomainAddressAggregateAddressMappingBase, false);
            defaultTableMappings.Add(ecommerceLocationDomainAddressAggregateAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, address.FindProperty("Id")!, ecommerceLocationDomainAddressAggregateAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase, address.FindProperty("CreatedAt")!, ecommerceLocationDomainAddressAggregateAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase, address.FindProperty("LastModifiedAt")!, ecommerceLocationDomainAddressAggregateAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)streetColumnBase, address.FindProperty("Street")!, ecommerceLocationDomainAddressAggregateAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, address.FindProperty("Version")!, ecommerceLocationDomainAddressAggregateAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ward_or_commune_idColumnBase, address.FindProperty("WardOrCommuneId")!, ecommerceLocationDomainAddressAggregateAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)zip_codeColumnBase, address.FindProperty("ZipCode")!, ecommerceLocationDomainAddressAggregateAddressMappingBase);

            var tableMappings = new List<TableMapping>();
            address.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var addressesTable = new Table("addresses", null, relationalModel);
            var idColumn = new Column("id", "uuid", addressesTable);
            addressesTable.Columns.Add("id", idColumn);
            var created_atColumn = new Column("created_at", "timestamp with time zone", addressesTable);
            addressesTable.Columns.Add("created_at", created_atColumn);
            var last_modified_atColumn = new Column("last_modified_at", "timestamp with time zone", addressesTable)
            {
                IsNullable = true
            };
            addressesTable.Columns.Add("last_modified_at", last_modified_atColumn);
            var streetColumn = new Column("street", "character varying(500)", addressesTable);
            addressesTable.Columns.Add("street", streetColumn);
            var versionColumn = new Column("version", "uuid", addressesTable);
            addressesTable.Columns.Add("version", versionColumn);
            var ward_or_commune_idColumn = new Column("ward_or_commune_id", "bigint", addressesTable);
            addressesTable.Columns.Add("ward_or_commune_id", ward_or_commune_idColumn);
            var zip_codeColumn = new Column("zip_code", "character varying(20)", addressesTable);
            addressesTable.Columns.Add("zip_code", zip_codeColumn);
            var pk_addresses = new UniqueConstraint("pk_addresses", addressesTable, new[] { idColumn });
            addressesTable.PrimaryKey = pk_addresses;
            var pk_addressesUc = RelationalModel.GetKey(this,
                "Ecommerce.Location.Domain.AddressAggregate.Address",
                new[] { "Id" });
            pk_addresses.MappedKeys.Add(pk_addressesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_addressesUc).Add(pk_addresses);
            addressesTable.UniqueConstraints.Add("pk_addresses", pk_addresses);
            var ix_addresses_ward_or_commune_id = new TableIndex(
            "ix_addresses_ward_or_commune_id", addressesTable, new[] { ward_or_commune_idColumn }, false);
            var ix_addresses_ward_or_commune_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Location.Domain.AddressAggregate.Address",
                new[] { "WardOrCommuneId" });
            ix_addresses_ward_or_commune_id.MappedIndexes.Add(ix_addresses_ward_or_commune_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_addresses_ward_or_commune_idIx).Add(ix_addresses_ward_or_commune_id);
            addressesTable.Indexes.Add("ix_addresses_ward_or_commune_id", ix_addresses_ward_or_commune_id);
            relationalModel.Tables.Add(("addresses", null), addressesTable);
            var addressesTableMapping = new TableMapping(address, addressesTable, true);
            addressesTable.AddTypeMapping(addressesTableMapping, false);
            tableMappings.Add(addressesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, address.FindProperty("Id")!, addressesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn, address.FindProperty("CreatedAt")!, addressesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn, address.FindProperty("LastModifiedAt")!, addressesTableMapping);
            RelationalModel.CreateColumnMapping(streetColumn, address.FindProperty("Street")!, addressesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, address.FindProperty("Version")!, addressesTableMapping);
            RelationalModel.CreateColumnMapping(ward_or_commune_idColumn, address.FindProperty("WardOrCommuneId")!, addressesTableMapping);
            RelationalModel.CreateColumnMapping(zip_codeColumn, address.FindProperty("ZipCode")!, addressesTableMapping);

            var country = FindEntityType("Ecommerce.Location.Domain.CountryAggregate.Country")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            country.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var ecommerceLocationDomainCountryAggregateCountryTableBase = new TableBase("Ecommerce.Location.Domain.CountryAggregate.Country", null, relationalModel);
            var continentColumnBase = new ColumnBase<ColumnMappingBase>("continent", "smallint", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("continent", continentColumnBase);
            var created_atColumnBase0 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("created_at", created_atColumnBase0);
            var first_codeColumnBase = new ColumnBase<ColumnMappingBase>("first_code", "character varying(5)", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("first_code", first_codeColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("id", idColumnBase0);
            var is_activeColumnBase = new ColumnBase<ColumnMappingBase>("is_active", "boolean", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("is_active", is_activeColumnBase);
            var is_billing_availableColumnBase = new ColumnBase<ColumnMappingBase>("is_billing_available", "boolean", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("is_billing_available", is_billing_availableColumnBase);
            var is_shipping_availableColumnBase = new ColumnBase<ColumnMappingBase>("is_shipping_available", "boolean", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("is_shipping_available", is_shipping_availableColumnBase);
            var last_modified_atColumnBase0 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceLocationDomainCountryAggregateCountryTableBase)
            {
                IsNullable = true
            };
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(500)", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("name", nameColumnBase);
            var second_codeColumnBase = new ColumnBase<ColumnMappingBase>("second_code", "character varying(5)", ecommerceLocationDomainCountryAggregateCountryTableBase)
            {
                IsNullable = true
            };
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("second_code", second_codeColumnBase);
            var third_codeColumnBase = new ColumnBase<ColumnMappingBase>("third_code", "character varying(5)", ecommerceLocationDomainCountryAggregateCountryTableBase)
            {
                IsNullable = true
            };
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("third_code", third_codeColumnBase);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceLocationDomainCountryAggregateCountryTableBase);
            ecommerceLocationDomainCountryAggregateCountryTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("Ecommerce.Location.Domain.CountryAggregate.Country", ecommerceLocationDomainCountryAggregateCountryTableBase);
            var ecommerceLocationDomainCountryAggregateCountryMappingBase = new TableMappingBase<ColumnMappingBase>(country, ecommerceLocationDomainCountryAggregateCountryTableBase, true);
            ecommerceLocationDomainCountryAggregateCountryTableBase.AddTypeMapping(ecommerceLocationDomainCountryAggregateCountryMappingBase, false);
            defaultTableMappings0.Add(ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, country.FindProperty("Id")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)continentColumnBase, country.FindProperty("Continent")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase0, country.FindProperty("CreatedAt")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)first_codeColumnBase, country.FindProperty("FirstCode")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_activeColumnBase, country.FindProperty("IsActive")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_billing_availableColumnBase, country.FindProperty("IsBillingAvailable")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_shipping_availableColumnBase, country.FindProperty("IsShippingAvailable")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase0, country.FindProperty("LastModifiedAt")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, country.FindProperty("Name")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)second_codeColumnBase, country.FindProperty("SecondCode")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)third_codeColumnBase, country.FindProperty("ThirdCode")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, country.FindProperty("Version")!, ecommerceLocationDomainCountryAggregateCountryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            country.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var countriesTable = new Table("countries", null, relationalModel);
            var idColumn0 = new Column("id", "bigint", countriesTable);
            countriesTable.Columns.Add("id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var continentColumn = new Column("continent", "smallint", countriesTable);
            countriesTable.Columns.Add("continent", continentColumn);
            var created_atColumn0 = new Column("created_at", "timestamp with time zone", countriesTable);
            countriesTable.Columns.Add("created_at", created_atColumn0);
            var first_codeColumn = new Column("first_code", "character varying(5)", countriesTable);
            countriesTable.Columns.Add("first_code", first_codeColumn);
            var is_activeColumn = new Column("is_active", "boolean", countriesTable);
            countriesTable.Columns.Add("is_active", is_activeColumn);
            var is_billing_availableColumn = new Column("is_billing_available", "boolean", countriesTable);
            countriesTable.Columns.Add("is_billing_available", is_billing_availableColumn);
            var is_shipping_availableColumn = new Column("is_shipping_available", "boolean", countriesTable);
            countriesTable.Columns.Add("is_shipping_available", is_shipping_availableColumn);
            var last_modified_atColumn0 = new Column("last_modified_at", "timestamp with time zone", countriesTable)
            {
                IsNullable = true
            };
            countriesTable.Columns.Add("last_modified_at", last_modified_atColumn0);
            var nameColumn = new Column("name", "character varying(500)", countriesTable);
            countriesTable.Columns.Add("name", nameColumn);
            var second_codeColumn = new Column("second_code", "character varying(5)", countriesTable)
            {
                IsNullable = true
            };
            countriesTable.Columns.Add("second_code", second_codeColumn);
            var third_codeColumn = new Column("third_code", "character varying(5)", countriesTable)
            {
                IsNullable = true
            };
            countriesTable.Columns.Add("third_code", third_codeColumn);
            var versionColumn0 = new Column("version", "uuid", countriesTable);
            countriesTable.Columns.Add("version", versionColumn0);
            var pk_countries = new UniqueConstraint("pk_countries", countriesTable, new[] { idColumn0 });
            countriesTable.PrimaryKey = pk_countries;
            var pk_countriesUc = RelationalModel.GetKey(this,
                "Ecommerce.Location.Domain.CountryAggregate.Country",
                new[] { "Id" });
            pk_countries.MappedKeys.Add(pk_countriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_countriesUc).Add(pk_countries);
            countriesTable.UniqueConstraints.Add("pk_countries", pk_countries);
            relationalModel.Tables.Add(("countries", null), countriesTable);
            var countriesTableMapping = new TableMapping(country, countriesTable, true);
            countriesTable.AddTypeMapping(countriesTableMapping, false);
            tableMappings0.Add(countriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, country.FindProperty("Id")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(continentColumn, country.FindProperty("Continent")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn0, country.FindProperty("CreatedAt")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(first_codeColumn, country.FindProperty("FirstCode")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(is_activeColumn, country.FindProperty("IsActive")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(is_billing_availableColumn, country.FindProperty("IsBillingAvailable")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(is_shipping_availableColumn, country.FindProperty("IsShippingAvailable")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn0, country.FindProperty("LastModifiedAt")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, country.FindProperty("Name")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(second_codeColumn, country.FindProperty("SecondCode")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(third_codeColumn, country.FindProperty("ThirdCode")!, countriesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, country.FindProperty("Version")!, countriesTableMapping);

            var district = FindEntityType("Ecommerce.Location.Domain.DistrictAggregate.District")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            district.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var ecommerceLocationDomainDistrictAggregateDistrictTableBase = new TableBase("Ecommerce.Location.Domain.DistrictAggregate.District", null, relationalModel);
            var created_atColumnBase1 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceLocationDomainDistrictAggregateDistrictTableBase);
            ecommerceLocationDomainDistrictAggregateDistrictTableBase.Columns.Add("created_at", created_atColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceLocationDomainDistrictAggregateDistrictTableBase);
            ecommerceLocationDomainDistrictAggregateDistrictTableBase.Columns.Add("id", idColumnBase1);
            var last_modified_atColumnBase1 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceLocationDomainDistrictAggregateDistrictTableBase)
            {
                IsNullable = true
            };
            ecommerceLocationDomainDistrictAggregateDistrictTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase1);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "character varying(500)", ecommerceLocationDomainDistrictAggregateDistrictTableBase);
            ecommerceLocationDomainDistrictAggregateDistrictTableBase.Columns.Add("name", nameColumnBase0);
            var state_or_province_idColumnBase = new ColumnBase<ColumnMappingBase>("state_or_province_id", "bigint", ecommerceLocationDomainDistrictAggregateDistrictTableBase);
            ecommerceLocationDomainDistrictAggregateDistrictTableBase.Columns.Add("state_or_province_id", state_or_province_idColumnBase);
            var versionColumnBase1 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceLocationDomainDistrictAggregateDistrictTableBase);
            ecommerceLocationDomainDistrictAggregateDistrictTableBase.Columns.Add("version", versionColumnBase1);
            relationalModel.DefaultTables.Add("Ecommerce.Location.Domain.DistrictAggregate.District", ecommerceLocationDomainDistrictAggregateDistrictTableBase);
            var ecommerceLocationDomainDistrictAggregateDistrictMappingBase = new TableMappingBase<ColumnMappingBase>(district, ecommerceLocationDomainDistrictAggregateDistrictTableBase, true);
            ecommerceLocationDomainDistrictAggregateDistrictTableBase.AddTypeMapping(ecommerceLocationDomainDistrictAggregateDistrictMappingBase, false);
            defaultTableMappings1.Add(ecommerceLocationDomainDistrictAggregateDistrictMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, district.FindProperty("Id")!, ecommerceLocationDomainDistrictAggregateDistrictMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase1, district.FindProperty("CreatedAt")!, ecommerceLocationDomainDistrictAggregateDistrictMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase1, district.FindProperty("LastModifiedAt")!, ecommerceLocationDomainDistrictAggregateDistrictMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, district.FindProperty("Name")!, ecommerceLocationDomainDistrictAggregateDistrictMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)state_or_province_idColumnBase, district.FindProperty("StateOrProvinceId")!, ecommerceLocationDomainDistrictAggregateDistrictMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase1, district.FindProperty("Version")!, ecommerceLocationDomainDistrictAggregateDistrictMappingBase);

            var tableMappings1 = new List<TableMapping>();
            district.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var districtsTable = new Table("districts", null, relationalModel);
            var idColumn1 = new Column("id", "bigint", districtsTable);
            districtsTable.Columns.Add("id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var created_atColumn1 = new Column("created_at", "timestamp with time zone", districtsTable);
            districtsTable.Columns.Add("created_at", created_atColumn1);
            var last_modified_atColumn1 = new Column("last_modified_at", "timestamp with time zone", districtsTable)
            {
                IsNullable = true
            };
            districtsTable.Columns.Add("last_modified_at", last_modified_atColumn1);
            var nameColumn0 = new Column("name", "character varying(500)", districtsTable);
            districtsTable.Columns.Add("name", nameColumn0);
            var state_or_province_idColumn = new Column("state_or_province_id", "bigint", districtsTable);
            districtsTable.Columns.Add("state_or_province_id", state_or_province_idColumn);
            var versionColumn1 = new Column("version", "uuid", districtsTable);
            districtsTable.Columns.Add("version", versionColumn1);
            var pk_districts = new UniqueConstraint("pk_districts", districtsTable, new[] { idColumn1 });
            districtsTable.PrimaryKey = pk_districts;
            var pk_districtsUc = RelationalModel.GetKey(this,
                "Ecommerce.Location.Domain.DistrictAggregate.District",
                new[] { "Id" });
            pk_districts.MappedKeys.Add(pk_districtsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_districtsUc).Add(pk_districts);
            districtsTable.UniqueConstraints.Add("pk_districts", pk_districts);
            var ix_districts_state_or_province_id = new TableIndex(
            "ix_districts_state_or_province_id", districtsTable, new[] { state_or_province_idColumn }, false);
            var ix_districts_state_or_province_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Location.Domain.DistrictAggregate.District",
                new[] { "StateOrProvinceId" });
            ix_districts_state_or_province_id.MappedIndexes.Add(ix_districts_state_or_province_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_districts_state_or_province_idIx).Add(ix_districts_state_or_province_id);
            districtsTable.Indexes.Add("ix_districts_state_or_province_id", ix_districts_state_or_province_id);
            relationalModel.Tables.Add(("districts", null), districtsTable);
            var districtsTableMapping = new TableMapping(district, districtsTable, true);
            districtsTable.AddTypeMapping(districtsTableMapping, false);
            tableMappings1.Add(districtsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, district.FindProperty("Id")!, districtsTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn1, district.FindProperty("CreatedAt")!, districtsTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn1, district.FindProperty("LastModifiedAt")!, districtsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, district.FindProperty("Name")!, districtsTableMapping);
            RelationalModel.CreateColumnMapping(state_or_province_idColumn, district.FindProperty("StateOrProvinceId")!, districtsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn1, district.FindProperty("Version")!, districtsTableMapping);

            var stateOrProvince = FindEntityType("Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            stateOrProvince.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase = new TableBase("Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("code", "character varying(20)", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("code", codeColumnBase);
            var country_idColumnBase = new ColumnBase<ColumnMappingBase>("country_id", "bigint", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("country_id", country_idColumnBase);
            var created_atColumnBase2 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("created_at", created_atColumnBase2);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("id", idColumnBase2);
            var last_modified_atColumnBase2 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase)
            {
                IsNullable = true
            };
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase2);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "character varying(500)", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("name", nameColumnBase1);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "smallint", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("type", typeColumnBase);
            var versionColumnBase2 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.Columns.Add("version", versionColumnBase2);
            relationalModel.DefaultTables.Add("Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince", ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase);
            var ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase = new TableMappingBase<ColumnMappingBase>(stateOrProvince, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase, true);
            ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceTableBase.AddTypeMapping(ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase, false);
            defaultTableMappings2.Add(ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, stateOrProvince.FindProperty("Id")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, stateOrProvince.FindProperty("Code")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)country_idColumnBase, stateOrProvince.FindProperty("CountryId")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase2, stateOrProvince.FindProperty("CreatedAt")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase2, stateOrProvince.FindProperty("LastModifiedAt")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, stateOrProvince.FindProperty("Name")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, stateOrProvince.FindProperty("Type")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase2, stateOrProvince.FindProperty("Version")!, ecommerceLocationDomainStateOrProvinceAggregateStateOrProvinceMappingBase);

            var tableMappings2 = new List<TableMapping>();
            stateOrProvince.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var state_or_provincesTable = new Table("state_or_provinces", null, relationalModel);
            var idColumn2 = new Column("id", "bigint", state_or_provincesTable);
            state_or_provincesTable.Columns.Add("id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var codeColumn = new Column("code", "character varying(20)", state_or_provincesTable);
            state_or_provincesTable.Columns.Add("code", codeColumn);
            var country_idColumn = new Column("country_id", "bigint", state_or_provincesTable);
            state_or_provincesTable.Columns.Add("country_id", country_idColumn);
            var created_atColumn2 = new Column("created_at", "timestamp with time zone", state_or_provincesTable);
            state_or_provincesTable.Columns.Add("created_at", created_atColumn2);
            var last_modified_atColumn2 = new Column("last_modified_at", "timestamp with time zone", state_or_provincesTable)
            {
                IsNullable = true
            };
            state_or_provincesTable.Columns.Add("last_modified_at", last_modified_atColumn2);
            var nameColumn1 = new Column("name", "character varying(500)", state_or_provincesTable);
            state_or_provincesTable.Columns.Add("name", nameColumn1);
            var typeColumn = new Column("type", "smallint", state_or_provincesTable);
            state_or_provincesTable.Columns.Add("type", typeColumn);
            var versionColumn2 = new Column("version", "uuid", state_or_provincesTable);
            state_or_provincesTable.Columns.Add("version", versionColumn2);
            var pk_state_or_provinces = new UniqueConstraint("pk_state_or_provinces", state_or_provincesTable, new[] { idColumn2 });
            state_or_provincesTable.PrimaryKey = pk_state_or_provinces;
            var pk_state_or_provincesUc = RelationalModel.GetKey(this,
                "Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince",
                new[] { "Id" });
            pk_state_or_provinces.MappedKeys.Add(pk_state_or_provincesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_state_or_provincesUc).Add(pk_state_or_provinces);
            state_or_provincesTable.UniqueConstraints.Add("pk_state_or_provinces", pk_state_or_provinces);
            var ix_state_or_provinces_country_id = new TableIndex(
            "ix_state_or_provinces_country_id", state_or_provincesTable, new[] { country_idColumn }, false);
            var ix_state_or_provinces_country_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince",
                new[] { "CountryId" });
            ix_state_or_provinces_country_id.MappedIndexes.Add(ix_state_or_provinces_country_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_state_or_provinces_country_idIx).Add(ix_state_or_provinces_country_id);
            state_or_provincesTable.Indexes.Add("ix_state_or_provinces_country_id", ix_state_or_provinces_country_id);
            relationalModel.Tables.Add(("state_or_provinces", null), state_or_provincesTable);
            var state_or_provincesTableMapping = new TableMapping(stateOrProvince, state_or_provincesTable, true);
            state_or_provincesTable.AddTypeMapping(state_or_provincesTableMapping, false);
            tableMappings2.Add(state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, stateOrProvince.FindProperty("Id")!, state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, stateOrProvince.FindProperty("Code")!, state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(country_idColumn, stateOrProvince.FindProperty("CountryId")!, state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn2, stateOrProvince.FindProperty("CreatedAt")!, state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn2, stateOrProvince.FindProperty("LastModifiedAt")!, state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, stateOrProvince.FindProperty("Name")!, state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, stateOrProvince.FindProperty("Type")!, state_or_provincesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn2, stateOrProvince.FindProperty("Version")!, state_or_provincesTableMapping);

            var wardOrCommune = FindEntityType("Ecommerce.Location.Domain.WardOrCommuneAggregate.WardOrCommune")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            wardOrCommune.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase = new TableBase("Ecommerce.Location.Domain.WardOrCommuneAggregate.WardOrCommune", null, relationalModel);
            var created_atColumnBase3 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase);
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.Columns.Add("created_at", created_atColumnBase3);
            var district_idColumnBase = new ColumnBase<ColumnMappingBase>("district_id", "bigint", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase);
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.Columns.Add("district_id", district_idColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase);
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.Columns.Add("id", idColumnBase3);
            var last_modified_atColumnBase3 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase)
            {
                IsNullable = true
            };
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase3);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("name", "character varying(500)", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase);
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.Columns.Add("name", nameColumnBase2);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("type", "smallint", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase);
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.Columns.Add("type", typeColumnBase0);
            var versionColumnBase3 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase);
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.Columns.Add("version", versionColumnBase3);
            relationalModel.DefaultTables.Add("Ecommerce.Location.Domain.WardOrCommuneAggregate.WardOrCommune", ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase);
            var ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase = new TableMappingBase<ColumnMappingBase>(wardOrCommune, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase, true);
            ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneTableBase.AddTypeMapping(ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase, false);
            defaultTableMappings3.Add(ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, wardOrCommune.FindProperty("Id")!, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase3, wardOrCommune.FindProperty("CreatedAt")!, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)district_idColumnBase, wardOrCommune.FindProperty("DistrictId")!, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase3, wardOrCommune.FindProperty("LastModifiedAt")!, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, wardOrCommune.FindProperty("Name")!, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, wardOrCommune.FindProperty("Type")!, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase3, wardOrCommune.FindProperty("Version")!, ecommerceLocationDomainWardOrCommuneAggregateWardOrCommuneMappingBase);

            var tableMappings3 = new List<TableMapping>();
            wardOrCommune.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var ward_or_communesTable = new Table("ward_or_communes", null, relationalModel);
            var idColumn3 = new Column("id", "bigint", ward_or_communesTable);
            ward_or_communesTable.Columns.Add("id", idColumn3);
            idColumn3.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var created_atColumn3 = new Column("created_at", "timestamp with time zone", ward_or_communesTable);
            ward_or_communesTable.Columns.Add("created_at", created_atColumn3);
            var district_idColumn = new Column("district_id", "bigint", ward_or_communesTable);
            ward_or_communesTable.Columns.Add("district_id", district_idColumn);
            var last_modified_atColumn3 = new Column("last_modified_at", "timestamp with time zone", ward_or_communesTable)
            {
                IsNullable = true
            };
            ward_or_communesTable.Columns.Add("last_modified_at", last_modified_atColumn3);
            var nameColumn2 = new Column("name", "character varying(500)", ward_or_communesTable);
            ward_or_communesTable.Columns.Add("name", nameColumn2);
            var typeColumn0 = new Column("type", "smallint", ward_or_communesTable);
            ward_or_communesTable.Columns.Add("type", typeColumn0);
            var versionColumn3 = new Column("version", "uuid", ward_or_communesTable);
            ward_or_communesTable.Columns.Add("version", versionColumn3);
            var pk_ward_or_communes = new UniqueConstraint("pk_ward_or_communes", ward_or_communesTable, new[] { idColumn3 });
            ward_or_communesTable.PrimaryKey = pk_ward_or_communes;
            var pk_ward_or_communesUc = RelationalModel.GetKey(this,
                "Ecommerce.Location.Domain.WardOrCommuneAggregate.WardOrCommune",
                new[] { "Id" });
            pk_ward_or_communes.MappedKeys.Add(pk_ward_or_communesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_ward_or_communesUc).Add(pk_ward_or_communes);
            ward_or_communesTable.UniqueConstraints.Add("pk_ward_or_communes", pk_ward_or_communes);
            var ix_ward_or_communes_district_id = new TableIndex(
            "ix_ward_or_communes_district_id", ward_or_communesTable, new[] { district_idColumn }, false);
            var ix_ward_or_communes_district_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Location.Domain.WardOrCommuneAggregate.WardOrCommune",
                new[] { "DistrictId" });
            ix_ward_or_communes_district_id.MappedIndexes.Add(ix_ward_or_communes_district_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_ward_or_communes_district_idIx).Add(ix_ward_or_communes_district_id);
            ward_or_communesTable.Indexes.Add("ix_ward_or_communes_district_id", ix_ward_or_communes_district_id);
            relationalModel.Tables.Add(("ward_or_communes", null), ward_or_communesTable);
            var ward_or_communesTableMapping = new TableMapping(wardOrCommune, ward_or_communesTable, true);
            ward_or_communesTable.AddTypeMapping(ward_or_communesTableMapping, false);
            tableMappings3.Add(ward_or_communesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, wardOrCommune.FindProperty("Id")!, ward_or_communesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn3, wardOrCommune.FindProperty("CreatedAt")!, ward_or_communesTableMapping);
            RelationalModel.CreateColumnMapping(district_idColumn, wardOrCommune.FindProperty("DistrictId")!, ward_or_communesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn3, wardOrCommune.FindProperty("LastModifiedAt")!, ward_or_communesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, wardOrCommune.FindProperty("Name")!, ward_or_communesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, wardOrCommune.FindProperty("Type")!, ward_or_communesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn3, wardOrCommune.FindProperty("Version")!, ward_or_communesTableMapping);

            var inboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.InboxState")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            inboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var massTransitEntityFrameworkCoreIntegrationInboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.InboxState", null, relationalModel);
            var consumedColumnBase = new ColumnBase<ColumnMappingBase>("consumed", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumed", consumedColumnBase);
            var consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumer_id", consumer_idColumnBase);
            var deliveredColumnBase = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("delivered", deliveredColumnBase);
            var expiration_timeColumnBase = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("expiration_time", expiration_timeColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("id", idColumnBase4);
            var last_sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase);
            var lock_idColumnBase = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase);
            var message_idColumnBase = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("message_id", message_idColumnBase);
            var receive_countColumnBase = new ColumnBase<ColumnMappingBase>("receive_count", "integer", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("receive_count", receive_countColumnBase);
            var receivedColumnBase = new ColumnBase<ColumnMappingBase>("received", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("received", receivedColumnBase);
            var row_versionColumnBase = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("row_version", row_versionColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.InboxState", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(inboxState, massTransitEntityFrameworkCoreIntegrationInboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase, false);
            defaultTableMappings4.Add(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, inboxState.FindProperty("Id")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumedColumnBase, inboxState.FindProperty("Consumed")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumer_idColumnBase, inboxState.FindProperty("ConsumerId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase, inboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase, inboxState.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase, inboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase, inboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase, inboxState.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receive_countColumnBase, inboxState.FindProperty("ReceiveCount")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receivedColumnBase, inboxState.FindProperty("Received")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase, inboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);

            var tableMappings4 = new List<TableMapping>();
            inboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var inbox_stateTable = new Table("inbox_state", null, relationalModel);
            var idColumn4 = new Column("id", "bigint", inbox_stateTable);
            inbox_stateTable.Columns.Add("id", idColumn4);
            idColumn4.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var consumedColumn = new Column("consumed", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("consumed", consumedColumn);
            var consumer_idColumn = new Column("consumer_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("consumer_id", consumer_idColumn);
            var deliveredColumn = new Column("delivered", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("delivered", deliveredColumn);
            var expiration_timeColumn = new Column("expiration_time", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("expiration_time", expiration_timeColumn);
            var last_sequence_numberColumn = new Column("last_sequence_number", "bigint", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn);
            var lock_idColumn = new Column("lock_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("lock_id", lock_idColumn);
            var message_idColumn = new Column("message_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("message_id", message_idColumn);
            var receive_countColumn = new Column("receive_count", "integer", inbox_stateTable);
            inbox_stateTable.Columns.Add("receive_count", receive_countColumn);
            var receivedColumn = new Column("received", "timestamp with time zone", inbox_stateTable);
            inbox_stateTable.Columns.Add("received", receivedColumn);
            var row_versionColumn = new Column("row_version", "bytea", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("row_version", row_versionColumn);
            var ak_inbox_state_message_id_consumer_id = new UniqueConstraint("ak_inbox_state_message_id_consumer_id", inbox_stateTable, new[] { message_idColumn, consumer_idColumn });
            var ak_inbox_state_message_id_consumer_idUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "MessageId", "ConsumerId" });
            ak_inbox_state_message_id_consumer_id.MappedKeys.Add(ak_inbox_state_message_id_consumer_idUc);
            RelationalModel.GetOrCreateUniqueConstraints(ak_inbox_state_message_id_consumer_idUc).Add(ak_inbox_state_message_id_consumer_id);
            inbox_stateTable.UniqueConstraints.Add("ak_inbox_state_message_id_consumer_id", ak_inbox_state_message_id_consumer_id);
            var pk_inbox_state = new UniqueConstraint("pk_inbox_state", inbox_stateTable, new[] { idColumn4 });
            inbox_stateTable.PrimaryKey = pk_inbox_state;
            var pk_inbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Id" });
            pk_inbox_state.MappedKeys.Add(pk_inbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_inbox_stateUc).Add(pk_inbox_state);
            inbox_stateTable.UniqueConstraints.Add("pk_inbox_state", pk_inbox_state);
            var ix_inbox_state_delivered = new TableIndex(
            "ix_inbox_state_delivered", inbox_stateTable, new[] { deliveredColumn }, false);
            var ix_inbox_state_deliveredIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Delivered" });
            ix_inbox_state_delivered.MappedIndexes.Add(ix_inbox_state_deliveredIx);
            RelationalModel.GetOrCreateTableIndexes(ix_inbox_state_deliveredIx).Add(ix_inbox_state_delivered);
            inbox_stateTable.Indexes.Add("ix_inbox_state_delivered", ix_inbox_state_delivered);
            relationalModel.Tables.Add(("inbox_state", null), inbox_stateTable);
            var inbox_stateTableMapping = new TableMapping(inboxState, inbox_stateTable, true);
            inbox_stateTable.AddTypeMapping(inbox_stateTableMapping, false);
            tableMappings4.Add(inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, inboxState.FindProperty("Id")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumedColumn, inboxState.FindProperty("Consumed")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumer_idColumn, inboxState.FindProperty("ConsumerId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn, inboxState.FindProperty("Delivered")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn, inboxState.FindProperty("ExpirationTime")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn, inboxState.FindProperty("LastSequenceNumber")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn, inboxState.FindProperty("LockId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn, inboxState.FindProperty("MessageId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receive_countColumn, inboxState.FindProperty("ReceiveCount")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receivedColumn, inboxState.FindProperty("Received")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn, inboxState.FindProperty("RowVersion")!, inbox_stateTableMapping);

            var outboxMessage = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxMessage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", null, relationalModel);
            var bodyColumnBase = new ColumnBase<ColumnMappingBase>("body", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("body", bodyColumnBase);
            var content_typeColumnBase = new ColumnBase<ColumnMappingBase>("content_type", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("content_type", content_typeColumnBase);
            var conversation_idColumnBase = new ColumnBase<ColumnMappingBase>("conversation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("conversation_id", conversation_idColumnBase);
            var correlation_idColumnBase = new ColumnBase<ColumnMappingBase>("correlation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("correlation_id", correlation_idColumnBase);
            var destination_addressColumnBase = new ColumnBase<ColumnMappingBase>("destination_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("destination_address", destination_addressColumnBase);
            var enqueue_timeColumnBase = new ColumnBase<ColumnMappingBase>("enqueue_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("enqueue_time", enqueue_timeColumnBase);
            var expiration_timeColumnBase0 = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("expiration_time", expiration_timeColumnBase0);
            var fault_addressColumnBase = new ColumnBase<ColumnMappingBase>("fault_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("fault_address", fault_addressColumnBase);
            var headersColumnBase = new ColumnBase<ColumnMappingBase>("headers", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("headers", headersColumnBase);
            var inbox_consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_consumer_id", inbox_consumer_idColumnBase);
            var inbox_message_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_message_id", inbox_message_idColumnBase);
            var initiator_idColumnBase = new ColumnBase<ColumnMappingBase>("initiator_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("initiator_id", initiator_idColumnBase);
            var message_idColumnBase0 = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_id", message_idColumnBase0);
            var message_typeColumnBase = new ColumnBase<ColumnMappingBase>("message_type", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_type", message_typeColumnBase);
            var outbox_idColumnBase = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("outbox_id", outbox_idColumnBase);
            var propertiesColumnBase = new ColumnBase<ColumnMappingBase>("properties", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("properties", propertiesColumnBase);
            var request_idColumnBase = new ColumnBase<ColumnMappingBase>("request_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("request_id", request_idColumnBase);
            var response_addressColumnBase = new ColumnBase<ColumnMappingBase>("response_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("response_address", response_addressColumnBase);
            var sent_timeColumnBase = new ColumnBase<ColumnMappingBase>("sent_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sent_time", sent_timeColumnBase);
            var sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sequence_number", sequence_numberColumnBase);
            var source_addressColumnBase = new ColumnBase<ColumnMappingBase>("source_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("source_address", source_addressColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase = new TableMappingBase<ColumnMappingBase>(outboxMessage, massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase, false);
            defaultTableMappings5.Add(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sequence_numberColumnBase, outboxMessage.FindProperty("SequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase, outboxMessage.FindProperty("Body")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)content_typeColumnBase, outboxMessage.FindProperty("ContentType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)conversation_idColumnBase, outboxMessage.FindProperty("ConversationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)correlation_idColumnBase, outboxMessage.FindProperty("CorrelationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_addressColumnBase, outboxMessage.FindProperty("DestinationAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enqueue_timeColumnBase, outboxMessage.FindProperty("EnqueueTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase0, outboxMessage.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fault_addressColumnBase, outboxMessage.FindProperty("FaultAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)headersColumnBase, outboxMessage.FindProperty("Headers")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_consumer_idColumnBase, outboxMessage.FindProperty("InboxConsumerId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_message_idColumnBase, outboxMessage.FindProperty("InboxMessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)initiator_idColumnBase, outboxMessage.FindProperty("InitiatorId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase0, outboxMessage.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_typeColumnBase, outboxMessage.FindProperty("MessageType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase, outboxMessage.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase, outboxMessage.FindProperty("Properties")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)request_idColumnBase, outboxMessage.FindProperty("RequestId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)response_addressColumnBase, outboxMessage.FindProperty("ResponseAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sent_timeColumnBase, outboxMessage.FindProperty("SentTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)source_addressColumnBase, outboxMessage.FindProperty("SourceAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);

            var tableMappings5 = new List<TableMapping>();
            outboxMessage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var outbox_messageTable = new Table("outbox_message", null, relationalModel);
            var sequence_numberColumn = new Column("sequence_number", "bigint", outbox_messageTable);
            outbox_messageTable.Columns.Add("sequence_number", sequence_numberColumn);
            sequence_numberColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn = new Column("body", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("body", bodyColumn);
            var content_typeColumn = new Column("content_type", "character varying(256)", outbox_messageTable);
            outbox_messageTable.Columns.Add("content_type", content_typeColumn);
            var conversation_idColumn = new Column("conversation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("conversation_id", conversation_idColumn);
            var correlation_idColumn = new Column("correlation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("correlation_id", correlation_idColumn);
            var destination_addressColumn = new Column("destination_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("destination_address", destination_addressColumn);
            var enqueue_timeColumn = new Column("enqueue_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("enqueue_time", enqueue_timeColumn);
            var expiration_timeColumn0 = new Column("expiration_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("expiration_time", expiration_timeColumn0);
            var fault_addressColumn = new Column("fault_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("fault_address", fault_addressColumn);
            var headersColumn = new Column("headers", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("headers", headersColumn);
            var inbox_consumer_idColumn = new Column("inbox_consumer_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_consumer_id", inbox_consumer_idColumn);
            var inbox_message_idColumn = new Column("inbox_message_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_message_id", inbox_message_idColumn);
            var initiator_idColumn = new Column("initiator_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("initiator_id", initiator_idColumn);
            var message_idColumn0 = new Column("message_id", "uuid", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_id", message_idColumn0);
            var message_typeColumn = new Column("message_type", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_type", message_typeColumn);
            var outbox_idColumn = new Column("outbox_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("outbox_id", outbox_idColumn);
            var propertiesColumn = new Column("properties", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("properties", propertiesColumn);
            var request_idColumn = new Column("request_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("request_id", request_idColumn);
            var response_addressColumn = new Column("response_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("response_address", response_addressColumn);
            var sent_timeColumn = new Column("sent_time", "timestamp with time zone", outbox_messageTable);
            outbox_messageTable.Columns.Add("sent_time", sent_timeColumn);
            var source_addressColumn = new Column("source_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("source_address", source_addressColumn);
            var pk_outbox_message = new UniqueConstraint("pk_outbox_message", outbox_messageTable, new[] { sequence_numberColumn });
            outbox_messageTable.PrimaryKey = pk_outbox_message;
            var pk_outbox_messageUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "SequenceNumber" });
            pk_outbox_message.MappedKeys.Add(pk_outbox_messageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_messageUc).Add(pk_outbox_message);
            outbox_messageTable.UniqueConstraints.Add("pk_outbox_message", pk_outbox_message);
            var ix_outbox_message_enqueue_time = new TableIndex(
            "ix_outbox_message_enqueue_time", outbox_messageTable, new[] { enqueue_timeColumn }, false);
            var ix_outbox_message_enqueue_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "EnqueueTime" });
            ix_outbox_message_enqueue_time.MappedIndexes.Add(ix_outbox_message_enqueue_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_enqueue_timeIx).Add(ix_outbox_message_enqueue_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_enqueue_time", ix_outbox_message_enqueue_time);
            var ix_outbox_message_expiration_time = new TableIndex(
            "ix_outbox_message_expiration_time", outbox_messageTable, new[] { expiration_timeColumn0 }, false);
            var ix_outbox_message_expiration_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "ExpirationTime" });
            ix_outbox_message_expiration_time.MappedIndexes.Add(ix_outbox_message_expiration_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_expiration_timeIx).Add(ix_outbox_message_expiration_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_expiration_time", ix_outbox_message_expiration_time);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_ = new TableIndex(
            "ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", outbox_messageTable, new[] { inbox_message_idColumn, inbox_consumer_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "InboxMessageId", "InboxConsumerId", "SequenceNumber" });
            ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_.MappedIndexes.Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix).Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            outbox_messageTable.Indexes.Add("ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            var ix_outbox_message_outbox_id_sequence_number = new TableIndex(
            "ix_outbox_message_outbox_id_sequence_number", outbox_messageTable, new[] { outbox_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_outbox_id_sequence_numberIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "OutboxId", "SequenceNumber" });
            ix_outbox_message_outbox_id_sequence_number.MappedIndexes.Add(ix_outbox_message_outbox_id_sequence_numberIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_outbox_id_sequence_numberIx).Add(ix_outbox_message_outbox_id_sequence_number);
            outbox_messageTable.Indexes.Add("ix_outbox_message_outbox_id_sequence_number", ix_outbox_message_outbox_id_sequence_number);
            relationalModel.Tables.Add(("outbox_message", null), outbox_messageTable);
            var outbox_messageTableMapping = new TableMapping(outboxMessage, outbox_messageTable, true);
            outbox_messageTable.AddTypeMapping(outbox_messageTableMapping, false);
            tableMappings5.Add(outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sequence_numberColumn, outboxMessage.FindProperty("SequenceNumber")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn, outboxMessage.FindProperty("Body")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(content_typeColumn, outboxMessage.FindProperty("ContentType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(conversation_idColumn, outboxMessage.FindProperty("ConversationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(correlation_idColumn, outboxMessage.FindProperty("CorrelationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(destination_addressColumn, outboxMessage.FindProperty("DestinationAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(enqueue_timeColumn, outboxMessage.FindProperty("EnqueueTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn0, outboxMessage.FindProperty("ExpirationTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(fault_addressColumn, outboxMessage.FindProperty("FaultAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(headersColumn, outboxMessage.FindProperty("Headers")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_consumer_idColumn, outboxMessage.FindProperty("InboxConsumerId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_message_idColumn, outboxMessage.FindProperty("InboxMessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(initiator_idColumn, outboxMessage.FindProperty("InitiatorId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn0, outboxMessage.FindProperty("MessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_typeColumn, outboxMessage.FindProperty("MessageType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn, outboxMessage.FindProperty("OutboxId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn, outboxMessage.FindProperty("Properties")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(request_idColumn, outboxMessage.FindProperty("RequestId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(response_addressColumn, outboxMessage.FindProperty("ResponseAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sent_timeColumn, outboxMessage.FindProperty("SentTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(source_addressColumn, outboxMessage.FindProperty("SourceAddress")!, outbox_messageTableMapping);

            var outboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxState")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null, relationalModel);
            var createdColumnBase = new ColumnBase<ColumnMappingBase>("created", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("created", createdColumnBase);
            var deliveredColumnBase0 = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("delivered", deliveredColumnBase0);
            var last_sequence_numberColumnBase0 = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase0);
            var lock_idColumnBase0 = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase0);
            var outbox_idColumnBase0 = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("outbox_id", outbox_idColumnBase0);
            var row_versionColumnBase0 = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("row_version", row_versionColumnBase0);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxState", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(outboxState, massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase, false);
            defaultTableMappings6.Add(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase0, outboxState.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdColumnBase, outboxState.FindProperty("Created")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase0, outboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase0, outboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase0, outboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase0, outboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);

            var tableMappings6 = new List<TableMapping>();
            outboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var outbox_stateTable = new Table("outbox_state", null, relationalModel);
            var outbox_idColumn0 = new Column("outbox_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("outbox_id", outbox_idColumn0);
            var createdColumn = new Column("created", "timestamp with time zone", outbox_stateTable);
            outbox_stateTable.Columns.Add("created", createdColumn);
            var deliveredColumn0 = new Column("delivered", "timestamp with time zone", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("delivered", deliveredColumn0);
            var last_sequence_numberColumn0 = new Column("last_sequence_number", "bigint", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn0);
            var lock_idColumn0 = new Column("lock_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("lock_id", lock_idColumn0);
            var row_versionColumn0 = new Column("row_version", "bytea", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("row_version", row_versionColumn0);
            var pk_outbox_state = new UniqueConstraint("pk_outbox_state", outbox_stateTable, new[] { outbox_idColumn0 });
            outbox_stateTable.PrimaryKey = pk_outbox_state;
            var pk_outbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "OutboxId" });
            pk_outbox_state.MappedKeys.Add(pk_outbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_stateUc).Add(pk_outbox_state);
            outbox_stateTable.UniqueConstraints.Add("pk_outbox_state", pk_outbox_state);
            var ix_outbox_state_created = new TableIndex(
            "ix_outbox_state_created", outbox_stateTable, new[] { createdColumn }, false);
            var ix_outbox_state_createdIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "Created" });
            ix_outbox_state_created.MappedIndexes.Add(ix_outbox_state_createdIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_state_createdIx).Add(ix_outbox_state_created);
            outbox_stateTable.Indexes.Add("ix_outbox_state_created", ix_outbox_state_created);
            relationalModel.Tables.Add(("outbox_state", null), outbox_stateTable);
            var outbox_stateTableMapping = new TableMapping(outboxState, outbox_stateTable, true);
            outbox_stateTable.AddTypeMapping(outbox_stateTableMapping, false);
            tableMappings6.Add(outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn0, outboxState.FindProperty("OutboxId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(createdColumn, outboxState.FindProperty("Created")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn0, outboxState.FindProperty("Delivered")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn0, outboxState.FindProperty("LastSequenceNumber")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn0, outboxState.FindProperty("LockId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn0, outboxState.FindProperty("RowVersion")!, outbox_stateTableMapping);
            var fk_addresses_ward_or_communes_ward_or_commune_id = new ForeignKeyConstraint(
                "fk_addresses_ward_or_communes_ward_or_commune_id", addressesTable, ward_or_communesTable,
                new[] { ward_or_commune_idColumn },
                ward_or_communesTable.FindUniqueConstraint("pk_ward_or_communes")!, ReferentialAction.Cascade);
            var fk_addresses_ward_or_communes_ward_or_commune_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Location.Domain.AddressAggregate.Address",
                new[] { "WardOrCommuneId" },
                "Ecommerce.Location.Domain.WardOrCommuneAggregate.WardOrCommune",
                new[] { "Id" });
            fk_addresses_ward_or_communes_ward_or_commune_id.MappedForeignKeys.Add(fk_addresses_ward_or_communes_ward_or_commune_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_addresses_ward_or_communes_ward_or_commune_idFk).Add(fk_addresses_ward_or_communes_ward_or_commune_id);
            addressesTable.ForeignKeyConstraints.Add(fk_addresses_ward_or_communes_ward_or_commune_id);
            ward_or_communesTable.ReferencingForeignKeyConstraints.Add(fk_addresses_ward_or_communes_ward_or_commune_id);
            var fk_districts_state_or_provinces_state_or_province_id = new ForeignKeyConstraint(
                "fk_districts_state_or_provinces_state_or_province_id", districtsTable, state_or_provincesTable,
                new[] { state_or_province_idColumn },
                state_or_provincesTable.FindUniqueConstraint("pk_state_or_provinces")!, ReferentialAction.Cascade);
            var fk_districts_state_or_provinces_state_or_province_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Location.Domain.DistrictAggregate.District",
                new[] { "StateOrProvinceId" },
                "Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince",
                new[] { "Id" });
            fk_districts_state_or_provinces_state_or_province_id.MappedForeignKeys.Add(fk_districts_state_or_provinces_state_or_province_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_districts_state_or_provinces_state_or_province_idFk).Add(fk_districts_state_or_provinces_state_or_province_id);
            districtsTable.ForeignKeyConstraints.Add(fk_districts_state_or_provinces_state_or_province_id);
            state_or_provincesTable.ReferencingForeignKeyConstraints.Add(fk_districts_state_or_provinces_state_or_province_id);
            var fk_state_or_provinces_countries_country_id = new ForeignKeyConstraint(
                "fk_state_or_provinces_countries_country_id", state_or_provincesTable, countriesTable,
                new[] { country_idColumn },
                countriesTable.FindUniqueConstraint("pk_countries")!, ReferentialAction.Cascade);
            var fk_state_or_provinces_countries_country_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Location.Domain.StateOrProvinceAggregate.StateOrProvince",
                new[] { "CountryId" },
                "Ecommerce.Location.Domain.CountryAggregate.Country",
                new[] { "Id" });
            fk_state_or_provinces_countries_country_id.MappedForeignKeys.Add(fk_state_or_provinces_countries_country_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_state_or_provinces_countries_country_idFk).Add(fk_state_or_provinces_countries_country_id);
            state_or_provincesTable.ForeignKeyConstraints.Add(fk_state_or_provinces_countries_country_id);
            countriesTable.ReferencingForeignKeyConstraints.Add(fk_state_or_provinces_countries_country_id);
            var fk_ward_or_communes_districts_district_id = new ForeignKeyConstraint(
                "fk_ward_or_communes_districts_district_id", ward_or_communesTable, districtsTable,
                new[] { district_idColumn },
                districtsTable.FindUniqueConstraint("pk_districts")!, ReferentialAction.Cascade);
            var fk_ward_or_communes_districts_district_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Location.Domain.WardOrCommuneAggregate.WardOrCommune",
                new[] { "DistrictId" },
                "Ecommerce.Location.Domain.DistrictAggregate.District",
                new[] { "Id" });
            fk_ward_or_communes_districts_district_id.MappedForeignKeys.Add(fk_ward_or_communes_districts_district_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_ward_or_communes_districts_district_idFk).Add(fk_ward_or_communes_districts_district_id);
            ward_or_communesTable.ForeignKeyConstraints.Add(fk_ward_or_communes_districts_district_id);
            districtsTable.ReferencingForeignKeyConstraints.Add(fk_ward_or_communes_districts_district_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
