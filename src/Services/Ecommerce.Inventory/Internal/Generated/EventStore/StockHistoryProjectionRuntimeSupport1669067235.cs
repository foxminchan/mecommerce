// <auto-generated/>
#pragma warning disable
using Ecommerce.Inventory.Projections;
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: StockHistoryProjectionLiveAggregation1669067235
    public class StockHistoryProjectionLiveAggregation1669067235 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Ecommerce.Inventory.Projections.StockHistoryDocument>
    {
        private readonly Ecommerce.Inventory.Projections.StockHistoryProjection _stockHistoryProjection;

        public StockHistoryProjectionLiveAggregation1669067235(Ecommerce.Inventory.Projections.StockHistoryProjection stockHistoryProjection)
        {
            _stockHistoryProjection = stockHistoryProjection;
        }



        public override Ecommerce.Inventory.Projections.StockHistoryDocument Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Ecommerce.Inventory.Projections.StockHistoryDocument snapshot)
        {
            if (!events.Any()) return snapshot;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Ecommerce.Inventory.Projections.StockHistoryDocument Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public Ecommerce.Inventory.Projections.StockHistoryDocument Apply(Marten.Events.IEvent @event, Ecommerce.Inventory.Projections.StockHistoryDocument aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Ecommerce.Inventory.Domain.StockAggregate.DomainEvents.Events.StockCreatedEvent> event_StockCreatedEvent1:
                    aggregate = _stockHistoryProjection.Apply(aggregate, event_StockCreatedEvent1.Data);
                    break;
                case Marten.Events.IEvent<Ecommerce.Inventory.Domain.StockAggregate.DomainEvents.Events.StockUpdatedEvent> event_StockUpdatedEvent2:
                    aggregate = _stockHistoryProjection.Apply(aggregate, event_StockUpdatedEvent2.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: StockHistoryProjectionLiveAggregation1669067235
    
    
    // START: StockHistoryProjectionInlineHandler1669067235
    public class StockHistoryProjectionInlineHandler1669067235 : Marten.Events.Aggregation.CrossStreamAggregationRuntime<Ecommerce.Inventory.Projections.StockHistoryDocument, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Ecommerce.Inventory.Projections.StockHistoryDocument, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Ecommerce.Inventory.Projections.StockHistoryDocument, System.Guid> _storage;
        private readonly Ecommerce.Inventory.Projections.StockHistoryProjection _stockHistoryProjection;

        public StockHistoryProjectionInlineHandler1669067235(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Ecommerce.Inventory.Projections.StockHistoryDocument, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Ecommerce.Inventory.Projections.StockHistoryDocument, System.Guid> storage, Ecommerce.Inventory.Projections.StockHistoryProjection stockHistoryProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _stockHistoryProjection = stockHistoryProjection;
        }



        public override async System.Threading.Tasks.ValueTask<Ecommerce.Inventory.Projections.StockHistoryDocument> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Ecommerce.Inventory.Projections.StockHistoryDocument, System.Guid> slice, Marten.Events.IEvent evt, Ecommerce.Inventory.Projections.StockHistoryDocument aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Ecommerce.Inventory.Domain.StockAggregate.DomainEvents.Events.StockCreatedEvent> event_StockCreatedEvent3:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _stockHistoryProjection.Apply(aggregate, event_StockCreatedEvent3.Data);
                    return aggregate;
                case Marten.Events.IEvent<Ecommerce.Inventory.Domain.StockAggregate.DomainEvents.Events.StockUpdatedEvent> event_StockUpdatedEvent4:
                    aggregate ??= CreateDefault(evt);
                    aggregate = _stockHistoryProjection.Apply(aggregate, event_StockUpdatedEvent4.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public Ecommerce.Inventory.Projections.StockHistoryDocument Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }

    }

    // END: StockHistoryProjectionInlineHandler1669067235
    
    
}

