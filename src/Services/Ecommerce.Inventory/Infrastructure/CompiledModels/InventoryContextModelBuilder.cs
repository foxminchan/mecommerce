// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ecommerce.Inventory.Infrastructure.CompiledModels
{
    public partial class InventoryContextModel
    {
        partial void Initialize()
        {
            var stock = StockEntityType.Create(this);
            var contactPerson = ContactPersonEntityType.Create(this);
            var supplier = SupplierEntityType.Create(this);
            var warehouse = WarehouseEntityType.Create(this);
            var inboxState = InboxStateEntityType.Create(this);
            var outboxMessage = OutboxMessageEntityType.Create(this);
            var outboxState = OutboxStateEntityType.Create(this);

            StockEntityType.CreateForeignKey1(stock, supplier);
            StockEntityType.CreateForeignKey2(stock, warehouse);
            ContactPersonEntityType.CreateForeignKey1(contactPerson, supplier);

            StockEntityType.CreateAnnotations(stock);
            ContactPersonEntityType.CreateAnnotations(contactPerson);
            SupplierEntityType.CreateAnnotations(supplier);
            WarehouseEntityType.CreateAnnotations(warehouse);
            InboxStateEntityType.CreateAnnotations(inboxState);
            OutboxMessageEntityType.CreateAnnotations(outboxMessage);
            OutboxStateEntityType.CreateAnnotations(outboxState);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var stock = FindEntityType("Ecommerce.Inventory.Domain.StockAggregate.Stock")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            stock.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var ecommerceInventoryDomainStockAggregateStockTableBase = new TableBase("Ecommerce.Inventory.Domain.StockAggregate.Stock", null, relationalModel);
            var created_atColumnBase = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("created_at", created_atColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("id", idColumnBase);
            var is_deletedColumnBase = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("is_deleted", is_deletedColumnBase);
            var last_modified_atColumnBase = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceInventoryDomainStockAggregateStockTableBase)
            {
                IsNullable = true
            };
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase);
            var on_hand_qtyColumnBase = new ColumnBase<ColumnMappingBase>("on_hand_qty", "bigint", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("on_hand_qty", on_hand_qtyColumnBase);
            var product_idColumnBase = new ColumnBase<ColumnMappingBase>("product_id", "uuid", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("product_id", product_idColumnBase);
            var reserved_qtyColumnBase = new ColumnBase<ColumnMappingBase>("reserved_qty", "bigint", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("reserved_qty", reserved_qtyColumnBase);
            var supplier_idColumnBase = new ColumnBase<ColumnMappingBase>("supplier_id", "bigint", ecommerceInventoryDomainStockAggregateStockTableBase)
            {
                IsNullable = true
            };
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("supplier_id", supplier_idColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("version", versionColumnBase);
            var warehouse_idColumnBase = new ColumnBase<ColumnMappingBase>("warehouse_id", "bigint", ecommerceInventoryDomainStockAggregateStockTableBase);
            ecommerceInventoryDomainStockAggregateStockTableBase.Columns.Add("warehouse_id", warehouse_idColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Inventory.Domain.StockAggregate.Stock", ecommerceInventoryDomainStockAggregateStockTableBase);
            var ecommerceInventoryDomainStockAggregateStockMappingBase = new TableMappingBase<ColumnMappingBase>(stock, ecommerceInventoryDomainStockAggregateStockTableBase, true);
            ecommerceInventoryDomainStockAggregateStockTableBase.AddTypeMapping(ecommerceInventoryDomainStockAggregateStockMappingBase, false);
            defaultTableMappings.Add(ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, stock.FindProperty("Id")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase, stock.FindProperty("CreatedAt")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase, stock.FindProperty("IsDeleted")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase, stock.FindProperty("LastModifiedAt")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)on_hand_qtyColumnBase, stock.FindProperty("OnHandQty")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase, stock.FindProperty("ProductId")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reserved_qtyColumnBase, stock.FindProperty("ReservedQty")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)supplier_idColumnBase, stock.FindProperty("SupplierId")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, stock.FindProperty("Version")!, ecommerceInventoryDomainStockAggregateStockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)warehouse_idColumnBase, stock.FindProperty("WarehouseId")!, ecommerceInventoryDomainStockAggregateStockMappingBase);

            var tableMappings = new List<TableMapping>();
            stock.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var stocksTable = new Table("stocks", null, relationalModel);
            var idColumn = new Column("id", "uuid", stocksTable);
            stocksTable.Columns.Add("id", idColumn);
            var created_atColumn = new Column("created_at", "timestamp with time zone", stocksTable);
            stocksTable.Columns.Add("created_at", created_atColumn);
            var is_deletedColumn = new Column("is_deleted", "boolean", stocksTable);
            stocksTable.Columns.Add("is_deleted", is_deletedColumn);
            var last_modified_atColumn = new Column("last_modified_at", "timestamp with time zone", stocksTable)
            {
                IsNullable = true
            };
            stocksTable.Columns.Add("last_modified_at", last_modified_atColumn);
            var on_hand_qtyColumn = new Column("on_hand_qty", "bigint", stocksTable);
            stocksTable.Columns.Add("on_hand_qty", on_hand_qtyColumn);
            var product_idColumn = new Column("product_id", "uuid", stocksTable);
            stocksTable.Columns.Add("product_id", product_idColumn);
            var reserved_qtyColumn = new Column("reserved_qty", "bigint", stocksTable);
            stocksTable.Columns.Add("reserved_qty", reserved_qtyColumn);
            var supplier_idColumn = new Column("supplier_id", "bigint", stocksTable)
            {
                IsNullable = true
            };
            stocksTable.Columns.Add("supplier_id", supplier_idColumn);
            var versionColumn = new Column("version", "uuid", stocksTable);
            stocksTable.Columns.Add("version", versionColumn);
            var warehouse_idColumn = new Column("warehouse_id", "bigint", stocksTable);
            stocksTable.Columns.Add("warehouse_id", warehouse_idColumn);
            var pk_stocks = new UniqueConstraint("pk_stocks", stocksTable, new[] { idColumn });
            stocksTable.PrimaryKey = pk_stocks;
            var pk_stocksUc = RelationalModel.GetKey(this,
                "Ecommerce.Inventory.Domain.StockAggregate.Stock",
                new[] { "Id" });
            pk_stocks.MappedKeys.Add(pk_stocksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_stocksUc).Add(pk_stocks);
            stocksTable.UniqueConstraints.Add("pk_stocks", pk_stocks);
            var ix_stocks_supplier_id = new TableIndex(
            "ix_stocks_supplier_id", stocksTable, new[] { supplier_idColumn }, false);
            var ix_stocks_supplier_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Inventory.Domain.StockAggregate.Stock",
                new[] { "SupplierId" });
            ix_stocks_supplier_id.MappedIndexes.Add(ix_stocks_supplier_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_stocks_supplier_idIx).Add(ix_stocks_supplier_id);
            stocksTable.Indexes.Add("ix_stocks_supplier_id", ix_stocks_supplier_id);
            var ix_stocks_warehouse_id = new TableIndex(
            "ix_stocks_warehouse_id", stocksTable, new[] { warehouse_idColumn }, false);
            var ix_stocks_warehouse_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Inventory.Domain.StockAggregate.Stock",
                new[] { "WarehouseId" });
            ix_stocks_warehouse_id.MappedIndexes.Add(ix_stocks_warehouse_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_stocks_warehouse_idIx).Add(ix_stocks_warehouse_id);
            stocksTable.Indexes.Add("ix_stocks_warehouse_id", ix_stocks_warehouse_id);
            relationalModel.Tables.Add(("stocks", null), stocksTable);
            var stocksTableMapping = new TableMapping(stock, stocksTable, true);
            stocksTable.AddTypeMapping(stocksTableMapping, false);
            tableMappings.Add(stocksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, stock.FindProperty("Id")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn, stock.FindProperty("CreatedAt")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn, stock.FindProperty("IsDeleted")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn, stock.FindProperty("LastModifiedAt")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(on_hand_qtyColumn, stock.FindProperty("OnHandQty")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn, stock.FindProperty("ProductId")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(reserved_qtyColumn, stock.FindProperty("ReservedQty")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(supplier_idColumn, stock.FindProperty("SupplierId")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, stock.FindProperty("Version")!, stocksTableMapping);
            RelationalModel.CreateColumnMapping(warehouse_idColumn, stock.FindProperty("WarehouseId")!, stocksTableMapping);

            var contactPerson = FindEntityType("Ecommerce.Inventory.Domain.SupplierAggregate.ContactPerson")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            contactPerson.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var ecommerceInventoryDomainSupplierAggregateContactPersonTableBase = new TableBase("Ecommerce.Inventory.Domain.SupplierAggregate.ContactPerson", null, relationalModel);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("email", "character varying(255)", ecommerceInventoryDomainSupplierAggregateContactPersonTableBase)
            {
                IsNullable = true
            };
            ecommerceInventoryDomainSupplierAggregateContactPersonTableBase.Columns.Add("email", emailColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "integer", ecommerceInventoryDomainSupplierAggregateContactPersonTableBase);
            ecommerceInventoryDomainSupplierAggregateContactPersonTableBase.Columns.Add("id", idColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceInventoryDomainSupplierAggregateContactPersonTableBase);
            ecommerceInventoryDomainSupplierAggregateContactPersonTableBase.Columns.Add("name", nameColumnBase);
            var phoneColumnBase = new ColumnBase<ColumnMappingBase>("phone", "character varying(20)", ecommerceInventoryDomainSupplierAggregateContactPersonTableBase);
            ecommerceInventoryDomainSupplierAggregateContactPersonTableBase.Columns.Add("phone", phoneColumnBase);
            var supplier_idColumnBase0 = new ColumnBase<ColumnMappingBase>("supplier_id", "bigint", ecommerceInventoryDomainSupplierAggregateContactPersonTableBase);
            ecommerceInventoryDomainSupplierAggregateContactPersonTableBase.Columns.Add("supplier_id", supplier_idColumnBase0);
            relationalModel.DefaultTables.Add("Ecommerce.Inventory.Domain.SupplierAggregate.ContactPerson", ecommerceInventoryDomainSupplierAggregateContactPersonTableBase);
            var ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase = new TableMappingBase<ColumnMappingBase>(contactPerson, ecommerceInventoryDomainSupplierAggregateContactPersonTableBase, true);
            ecommerceInventoryDomainSupplierAggregateContactPersonTableBase.AddTypeMapping(ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase, false);
            defaultTableMappings0.Add(ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, contactPerson.FindProperty("Id")!, ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, contactPerson.FindProperty("Email")!, ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, contactPerson.FindProperty("Name")!, ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneColumnBase, contactPerson.FindProperty("Phone")!, ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)supplier_idColumnBase0, contactPerson.FindProperty("SupplierId")!, ecommerceInventoryDomainSupplierAggregateContactPersonMappingBase);

            var tableMappings0 = new List<TableMapping>();
            contactPerson.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var contact_personTable = new Table("contact_person", null, relationalModel);
            var idColumn0 = new Column("id", "integer", contact_personTable);
            contact_personTable.Columns.Add("id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var emailColumn = new Column("email", "character varying(255)", contact_personTable)
            {
                IsNullable = true
            };
            contact_personTable.Columns.Add("email", emailColumn);
            var nameColumn = new Column("name", "character varying(255)", contact_personTable);
            contact_personTable.Columns.Add("name", nameColumn);
            var phoneColumn = new Column("phone", "character varying(20)", contact_personTable);
            contact_personTable.Columns.Add("phone", phoneColumn);
            var supplier_idColumn0 = new Column("supplier_id", "bigint", contact_personTable);
            contact_personTable.Columns.Add("supplier_id", supplier_idColumn0);
            var pk_contact_person = new UniqueConstraint("pk_contact_person", contact_personTable, new[] { idColumn0 });
            contact_personTable.PrimaryKey = pk_contact_person;
            var pk_contact_personUc = RelationalModel.GetKey(this,
                "Ecommerce.Inventory.Domain.SupplierAggregate.ContactPerson",
                new[] { "Id" });
            pk_contact_person.MappedKeys.Add(pk_contact_personUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_contact_personUc).Add(pk_contact_person);
            contact_personTable.UniqueConstraints.Add("pk_contact_person", pk_contact_person);
            var ix_contact_person_supplier_id = new TableIndex(
            "ix_contact_person_supplier_id", contact_personTable, new[] { supplier_idColumn0 }, false);
            var ix_contact_person_supplier_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Inventory.Domain.SupplierAggregate.ContactPerson",
                new[] { "SupplierId" });
            ix_contact_person_supplier_id.MappedIndexes.Add(ix_contact_person_supplier_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_contact_person_supplier_idIx).Add(ix_contact_person_supplier_id);
            contact_personTable.Indexes.Add("ix_contact_person_supplier_id", ix_contact_person_supplier_id);
            relationalModel.Tables.Add(("contact_person", null), contact_personTable);
            var contact_personTableMapping = new TableMapping(contactPerson, contact_personTable, true);
            contact_personTable.AddTypeMapping(contact_personTableMapping, false);
            tableMappings0.Add(contact_personTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, contactPerson.FindProperty("Id")!, contact_personTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, contactPerson.FindProperty("Email")!, contact_personTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, contactPerson.FindProperty("Name")!, contact_personTableMapping);
            RelationalModel.CreateColumnMapping(phoneColumn, contactPerson.FindProperty("Phone")!, contact_personTableMapping);
            RelationalModel.CreateColumnMapping(supplier_idColumn0, contactPerson.FindProperty("SupplierId")!, contact_personTableMapping);

            var supplier = FindEntityType("Ecommerce.Inventory.Domain.SupplierAggregate.Supplier")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            supplier.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var ecommerceInventoryDomainSupplierAggregateSupplierTableBase = new TableBase("Ecommerce.Inventory.Domain.SupplierAggregate.Supplier", null, relationalModel);
            var address_idColumnBase = new ColumnBase<ColumnMappingBase>("address_id", "uuid", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("address_id", address_idColumnBase);
            var created_atColumnBase0 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("created_at", created_atColumnBase0);
            var emailColumnBase0 = new ColumnBase<ColumnMappingBase>("email", "character varying(255)", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("email", emailColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("id", idColumnBase1);
            var is_deletedColumnBase0 = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("is_deleted", is_deletedColumnBase0);
            var last_modified_atColumnBase0 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceInventoryDomainSupplierAggregateSupplierTableBase)
            {
                IsNullable = true
            };
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("name", nameColumnBase0);
            var phoneColumnBase0 = new ColumnBase<ColumnMappingBase>("phone", "character varying(20)", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("phone", phoneColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("Ecommerce.Inventory.Domain.SupplierAggregate.Supplier", ecommerceInventoryDomainSupplierAggregateSupplierTableBase);
            var ecommerceInventoryDomainSupplierAggregateSupplierMappingBase = new TableMappingBase<ColumnMappingBase>(supplier, ecommerceInventoryDomainSupplierAggregateSupplierTableBase, true);
            ecommerceInventoryDomainSupplierAggregateSupplierTableBase.AddTypeMapping(ecommerceInventoryDomainSupplierAggregateSupplierMappingBase, false);
            defaultTableMappings1.Add(ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, supplier.FindProperty("Id")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address_idColumnBase, supplier.FindProperty("AddressId")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase0, supplier.FindProperty("CreatedAt")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase0, supplier.FindProperty("Email")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase0, supplier.FindProperty("IsDeleted")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase0, supplier.FindProperty("LastModifiedAt")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, supplier.FindProperty("Name")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneColumnBase0, supplier.FindProperty("Phone")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, supplier.FindProperty("Version")!, ecommerceInventoryDomainSupplierAggregateSupplierMappingBase);

            var tableMappings1 = new List<TableMapping>();
            supplier.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var suppliersTable = new Table("suppliers", null, relationalModel);
            var idColumn1 = new Column("id", "bigint", suppliersTable);
            suppliersTable.Columns.Add("id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var address_idColumn = new Column("address_id", "uuid", suppliersTable);
            suppliersTable.Columns.Add("address_id", address_idColumn);
            var created_atColumn0 = new Column("created_at", "timestamp with time zone", suppliersTable);
            suppliersTable.Columns.Add("created_at", created_atColumn0);
            var emailColumn0 = new Column("email", "character varying(255)", suppliersTable);
            suppliersTable.Columns.Add("email", emailColumn0);
            var is_deletedColumn0 = new Column("is_deleted", "boolean", suppliersTable);
            suppliersTable.Columns.Add("is_deleted", is_deletedColumn0);
            var last_modified_atColumn0 = new Column("last_modified_at", "timestamp with time zone", suppliersTable)
            {
                IsNullable = true
            };
            suppliersTable.Columns.Add("last_modified_at", last_modified_atColumn0);
            var nameColumn0 = new Column("name", "character varying(255)", suppliersTable);
            suppliersTable.Columns.Add("name", nameColumn0);
            var phoneColumn0 = new Column("phone", "character varying(20)", suppliersTable);
            suppliersTable.Columns.Add("phone", phoneColumn0);
            var versionColumn0 = new Column("version", "uuid", suppliersTable);
            suppliersTable.Columns.Add("version", versionColumn0);
            var pk_suppliers = new UniqueConstraint("pk_suppliers", suppliersTable, new[] { idColumn1 });
            suppliersTable.PrimaryKey = pk_suppliers;
            var pk_suppliersUc = RelationalModel.GetKey(this,
                "Ecommerce.Inventory.Domain.SupplierAggregate.Supplier",
                new[] { "Id" });
            pk_suppliers.MappedKeys.Add(pk_suppliersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_suppliersUc).Add(pk_suppliers);
            suppliersTable.UniqueConstraints.Add("pk_suppliers", pk_suppliers);
            relationalModel.Tables.Add(("suppliers", null), suppliersTable);
            var suppliersTableMapping = new TableMapping(supplier, suppliersTable, true);
            suppliersTable.AddTypeMapping(suppliersTableMapping, false);
            tableMappings1.Add(suppliersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, supplier.FindProperty("Id")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(address_idColumn, supplier.FindProperty("AddressId")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn0, supplier.FindProperty("CreatedAt")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn0, supplier.FindProperty("Email")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn0, supplier.FindProperty("IsDeleted")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn0, supplier.FindProperty("LastModifiedAt")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, supplier.FindProperty("Name")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(phoneColumn0, supplier.FindProperty("Phone")!, suppliersTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, supplier.FindProperty("Version")!, suppliersTableMapping);

            var warehouse = FindEntityType("Ecommerce.Inventory.Domain.WarehouseAggregate.Warehouse")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            warehouse.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase = new TableBase("Ecommerce.Inventory.Domain.WarehouseAggregate.Warehouse", null, relationalModel);
            var address_idColumnBase0 = new ColumnBase<ColumnMappingBase>("address_id", "uuid", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("address_id", address_idColumnBase0);
            var capacityColumnBase = new ColumnBase<ColumnMappingBase>("capacity", "bigint", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("capacity", capacityColumnBase);
            var created_atColumnBase1 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("created_at", created_atColumnBase1);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("id", idColumnBase2);
            var last_modified_atColumnBase1 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase)
            {
                IsNullable = true
            };
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase1);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("name", nameColumnBase1);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("status", "integer", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("status", statusColumnBase);
            var versionColumnBase1 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.Columns.Add("version", versionColumnBase1);
            relationalModel.DefaultTables.Add("Ecommerce.Inventory.Domain.WarehouseAggregate.Warehouse", ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase);
            var ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase = new TableMappingBase<ColumnMappingBase>(warehouse, ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase, true);
            ecommerceInventoryDomainWarehouseAggregateWarehouseTableBase.AddTypeMapping(ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase, false);
            defaultTableMappings2.Add(ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, warehouse.FindProperty("Id")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)address_idColumnBase0, warehouse.FindProperty("AddressId")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)capacityColumnBase, warehouse.FindProperty("Capacity")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase1, warehouse.FindProperty("CreatedAt")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase1, warehouse.FindProperty("LastModifiedAt")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, warehouse.FindProperty("Name")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, warehouse.FindProperty("Status")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase1, warehouse.FindProperty("Version")!, ecommerceInventoryDomainWarehouseAggregateWarehouseMappingBase);

            var tableMappings2 = new List<TableMapping>();
            warehouse.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var warehousesTable = new Table("warehouses", null, relationalModel);
            var idColumn2 = new Column("id", "bigint", warehousesTable);
            warehousesTable.Columns.Add("id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var address_idColumn0 = new Column("address_id", "uuid", warehousesTable);
            warehousesTable.Columns.Add("address_id", address_idColumn0);
            var capacityColumn = new Column("capacity", "bigint", warehousesTable);
            warehousesTable.Columns.Add("capacity", capacityColumn);
            var created_atColumn1 = new Column("created_at", "timestamp with time zone", warehousesTable);
            warehousesTable.Columns.Add("created_at", created_atColumn1);
            var last_modified_atColumn1 = new Column("last_modified_at", "timestamp with time zone", warehousesTable)
            {
                IsNullable = true
            };
            warehousesTable.Columns.Add("last_modified_at", last_modified_atColumn1);
            var nameColumn1 = new Column("name", "character varying(255)", warehousesTable);
            warehousesTable.Columns.Add("name", nameColumn1);
            var statusColumn = new Column("status", "integer", warehousesTable);
            warehousesTable.Columns.Add("status", statusColumn);
            var versionColumn1 = new Column("version", "uuid", warehousesTable);
            warehousesTable.Columns.Add("version", versionColumn1);
            var pk_warehouses = new UniqueConstraint("pk_warehouses", warehousesTable, new[] { idColumn2 });
            warehousesTable.PrimaryKey = pk_warehouses;
            var pk_warehousesUc = RelationalModel.GetKey(this,
                "Ecommerce.Inventory.Domain.WarehouseAggregate.Warehouse",
                new[] { "Id" });
            pk_warehouses.MappedKeys.Add(pk_warehousesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_warehousesUc).Add(pk_warehouses);
            warehousesTable.UniqueConstraints.Add("pk_warehouses", pk_warehouses);
            relationalModel.Tables.Add(("warehouses", null), warehousesTable);
            var warehousesTableMapping = new TableMapping(warehouse, warehousesTable, true);
            warehousesTable.AddTypeMapping(warehousesTableMapping, false);
            tableMappings2.Add(warehousesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, warehouse.FindProperty("Id")!, warehousesTableMapping);
            RelationalModel.CreateColumnMapping(address_idColumn0, warehouse.FindProperty("AddressId")!, warehousesTableMapping);
            RelationalModel.CreateColumnMapping(capacityColumn, warehouse.FindProperty("Capacity")!, warehousesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn1, warehouse.FindProperty("CreatedAt")!, warehousesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn1, warehouse.FindProperty("LastModifiedAt")!, warehousesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, warehouse.FindProperty("Name")!, warehousesTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, warehouse.FindProperty("Status")!, warehousesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn1, warehouse.FindProperty("Version")!, warehousesTableMapping);

            var inboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.InboxState")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            inboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var massTransitEntityFrameworkCoreIntegrationInboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.InboxState", null, relationalModel);
            var consumedColumnBase = new ColumnBase<ColumnMappingBase>("consumed", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumed", consumedColumnBase);
            var consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumer_id", consumer_idColumnBase);
            var deliveredColumnBase = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("delivered", deliveredColumnBase);
            var expiration_timeColumnBase = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("expiration_time", expiration_timeColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("id", idColumnBase3);
            var last_sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase);
            var lock_idColumnBase = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase);
            var message_idColumnBase = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("message_id", message_idColumnBase);
            var receive_countColumnBase = new ColumnBase<ColumnMappingBase>("receive_count", "integer", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("receive_count", receive_countColumnBase);
            var receivedColumnBase = new ColumnBase<ColumnMappingBase>("received", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("received", receivedColumnBase);
            var row_versionColumnBase = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("row_version", row_versionColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.InboxState", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(inboxState, massTransitEntityFrameworkCoreIntegrationInboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase, false);
            defaultTableMappings3.Add(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, inboxState.FindProperty("Id")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumedColumnBase, inboxState.FindProperty("Consumed")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumer_idColumnBase, inboxState.FindProperty("ConsumerId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase, inboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase, inboxState.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase, inboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase, inboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase, inboxState.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receive_countColumnBase, inboxState.FindProperty("ReceiveCount")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receivedColumnBase, inboxState.FindProperty("Received")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase, inboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);

            var tableMappings3 = new List<TableMapping>();
            inboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var inbox_stateTable = new Table("inbox_state", null, relationalModel);
            var idColumn3 = new Column("id", "bigint", inbox_stateTable);
            inbox_stateTable.Columns.Add("id", idColumn3);
            idColumn3.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var consumedColumn = new Column("consumed", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("consumed", consumedColumn);
            var consumer_idColumn = new Column("consumer_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("consumer_id", consumer_idColumn);
            var deliveredColumn = new Column("delivered", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("delivered", deliveredColumn);
            var expiration_timeColumn = new Column("expiration_time", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("expiration_time", expiration_timeColumn);
            var last_sequence_numberColumn = new Column("last_sequence_number", "bigint", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn);
            var lock_idColumn = new Column("lock_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("lock_id", lock_idColumn);
            var message_idColumn = new Column("message_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("message_id", message_idColumn);
            var receive_countColumn = new Column("receive_count", "integer", inbox_stateTable);
            inbox_stateTable.Columns.Add("receive_count", receive_countColumn);
            var receivedColumn = new Column("received", "timestamp with time zone", inbox_stateTable);
            inbox_stateTable.Columns.Add("received", receivedColumn);
            var row_versionColumn = new Column("row_version", "bytea", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("row_version", row_versionColumn);
            var ak_inbox_state_message_id_consumer_id = new UniqueConstraint("ak_inbox_state_message_id_consumer_id", inbox_stateTable, new[] { message_idColumn, consumer_idColumn });
            var ak_inbox_state_message_id_consumer_idUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "MessageId", "ConsumerId" });
            ak_inbox_state_message_id_consumer_id.MappedKeys.Add(ak_inbox_state_message_id_consumer_idUc);
            RelationalModel.GetOrCreateUniqueConstraints(ak_inbox_state_message_id_consumer_idUc).Add(ak_inbox_state_message_id_consumer_id);
            inbox_stateTable.UniqueConstraints.Add("ak_inbox_state_message_id_consumer_id", ak_inbox_state_message_id_consumer_id);
            var pk_inbox_state = new UniqueConstraint("pk_inbox_state", inbox_stateTable, new[] { idColumn3 });
            inbox_stateTable.PrimaryKey = pk_inbox_state;
            var pk_inbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Id" });
            pk_inbox_state.MappedKeys.Add(pk_inbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_inbox_stateUc).Add(pk_inbox_state);
            inbox_stateTable.UniqueConstraints.Add("pk_inbox_state", pk_inbox_state);
            var ix_inbox_state_delivered = new TableIndex(
            "ix_inbox_state_delivered", inbox_stateTable, new[] { deliveredColumn }, false);
            var ix_inbox_state_deliveredIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Delivered" });
            ix_inbox_state_delivered.MappedIndexes.Add(ix_inbox_state_deliveredIx);
            RelationalModel.GetOrCreateTableIndexes(ix_inbox_state_deliveredIx).Add(ix_inbox_state_delivered);
            inbox_stateTable.Indexes.Add("ix_inbox_state_delivered", ix_inbox_state_delivered);
            relationalModel.Tables.Add(("inbox_state", null), inbox_stateTable);
            var inbox_stateTableMapping = new TableMapping(inboxState, inbox_stateTable, true);
            inbox_stateTable.AddTypeMapping(inbox_stateTableMapping, false);
            tableMappings3.Add(inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, inboxState.FindProperty("Id")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumedColumn, inboxState.FindProperty("Consumed")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumer_idColumn, inboxState.FindProperty("ConsumerId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn, inboxState.FindProperty("Delivered")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn, inboxState.FindProperty("ExpirationTime")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn, inboxState.FindProperty("LastSequenceNumber")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn, inboxState.FindProperty("LockId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn, inboxState.FindProperty("MessageId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receive_countColumn, inboxState.FindProperty("ReceiveCount")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receivedColumn, inboxState.FindProperty("Received")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn, inboxState.FindProperty("RowVersion")!, inbox_stateTableMapping);

            var outboxMessage = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxMessage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", null, relationalModel);
            var bodyColumnBase = new ColumnBase<ColumnMappingBase>("body", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("body", bodyColumnBase);
            var content_typeColumnBase = new ColumnBase<ColumnMappingBase>("content_type", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("content_type", content_typeColumnBase);
            var conversation_idColumnBase = new ColumnBase<ColumnMappingBase>("conversation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("conversation_id", conversation_idColumnBase);
            var correlation_idColumnBase = new ColumnBase<ColumnMappingBase>("correlation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("correlation_id", correlation_idColumnBase);
            var destination_addressColumnBase = new ColumnBase<ColumnMappingBase>("destination_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("destination_address", destination_addressColumnBase);
            var enqueue_timeColumnBase = new ColumnBase<ColumnMappingBase>("enqueue_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("enqueue_time", enqueue_timeColumnBase);
            var expiration_timeColumnBase0 = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("expiration_time", expiration_timeColumnBase0);
            var fault_addressColumnBase = new ColumnBase<ColumnMappingBase>("fault_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("fault_address", fault_addressColumnBase);
            var headersColumnBase = new ColumnBase<ColumnMappingBase>("headers", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("headers", headersColumnBase);
            var inbox_consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_consumer_id", inbox_consumer_idColumnBase);
            var inbox_message_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_message_id", inbox_message_idColumnBase);
            var initiator_idColumnBase = new ColumnBase<ColumnMappingBase>("initiator_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("initiator_id", initiator_idColumnBase);
            var message_idColumnBase0 = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_id", message_idColumnBase0);
            var message_typeColumnBase = new ColumnBase<ColumnMappingBase>("message_type", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_type", message_typeColumnBase);
            var outbox_idColumnBase = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("outbox_id", outbox_idColumnBase);
            var propertiesColumnBase = new ColumnBase<ColumnMappingBase>("properties", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("properties", propertiesColumnBase);
            var request_idColumnBase = new ColumnBase<ColumnMappingBase>("request_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("request_id", request_idColumnBase);
            var response_addressColumnBase = new ColumnBase<ColumnMappingBase>("response_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("response_address", response_addressColumnBase);
            var sent_timeColumnBase = new ColumnBase<ColumnMappingBase>("sent_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sent_time", sent_timeColumnBase);
            var sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sequence_number", sequence_numberColumnBase);
            var source_addressColumnBase = new ColumnBase<ColumnMappingBase>("source_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("source_address", source_addressColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase = new TableMappingBase<ColumnMappingBase>(outboxMessage, massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase, false);
            defaultTableMappings4.Add(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sequence_numberColumnBase, outboxMessage.FindProperty("SequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase, outboxMessage.FindProperty("Body")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)content_typeColumnBase, outboxMessage.FindProperty("ContentType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)conversation_idColumnBase, outboxMessage.FindProperty("ConversationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)correlation_idColumnBase, outboxMessage.FindProperty("CorrelationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_addressColumnBase, outboxMessage.FindProperty("DestinationAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enqueue_timeColumnBase, outboxMessage.FindProperty("EnqueueTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase0, outboxMessage.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fault_addressColumnBase, outboxMessage.FindProperty("FaultAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)headersColumnBase, outboxMessage.FindProperty("Headers")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_consumer_idColumnBase, outboxMessage.FindProperty("InboxConsumerId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_message_idColumnBase, outboxMessage.FindProperty("InboxMessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)initiator_idColumnBase, outboxMessage.FindProperty("InitiatorId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase0, outboxMessage.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_typeColumnBase, outboxMessage.FindProperty("MessageType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase, outboxMessage.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase, outboxMessage.FindProperty("Properties")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)request_idColumnBase, outboxMessage.FindProperty("RequestId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)response_addressColumnBase, outboxMessage.FindProperty("ResponseAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sent_timeColumnBase, outboxMessage.FindProperty("SentTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)source_addressColumnBase, outboxMessage.FindProperty("SourceAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);

            var tableMappings4 = new List<TableMapping>();
            outboxMessage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var outbox_messageTable = new Table("outbox_message", null, relationalModel);
            var sequence_numberColumn = new Column("sequence_number", "bigint", outbox_messageTable);
            outbox_messageTable.Columns.Add("sequence_number", sequence_numberColumn);
            sequence_numberColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn = new Column("body", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("body", bodyColumn);
            var content_typeColumn = new Column("content_type", "character varying(256)", outbox_messageTable);
            outbox_messageTable.Columns.Add("content_type", content_typeColumn);
            var conversation_idColumn = new Column("conversation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("conversation_id", conversation_idColumn);
            var correlation_idColumn = new Column("correlation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("correlation_id", correlation_idColumn);
            var destination_addressColumn = new Column("destination_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("destination_address", destination_addressColumn);
            var enqueue_timeColumn = new Column("enqueue_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("enqueue_time", enqueue_timeColumn);
            var expiration_timeColumn0 = new Column("expiration_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("expiration_time", expiration_timeColumn0);
            var fault_addressColumn = new Column("fault_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("fault_address", fault_addressColumn);
            var headersColumn = new Column("headers", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("headers", headersColumn);
            var inbox_consumer_idColumn = new Column("inbox_consumer_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_consumer_id", inbox_consumer_idColumn);
            var inbox_message_idColumn = new Column("inbox_message_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_message_id", inbox_message_idColumn);
            var initiator_idColumn = new Column("initiator_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("initiator_id", initiator_idColumn);
            var message_idColumn0 = new Column("message_id", "uuid", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_id", message_idColumn0);
            var message_typeColumn = new Column("message_type", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_type", message_typeColumn);
            var outbox_idColumn = new Column("outbox_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("outbox_id", outbox_idColumn);
            var propertiesColumn = new Column("properties", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("properties", propertiesColumn);
            var request_idColumn = new Column("request_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("request_id", request_idColumn);
            var response_addressColumn = new Column("response_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("response_address", response_addressColumn);
            var sent_timeColumn = new Column("sent_time", "timestamp with time zone", outbox_messageTable);
            outbox_messageTable.Columns.Add("sent_time", sent_timeColumn);
            var source_addressColumn = new Column("source_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("source_address", source_addressColumn);
            var pk_outbox_message = new UniqueConstraint("pk_outbox_message", outbox_messageTable, new[] { sequence_numberColumn });
            outbox_messageTable.PrimaryKey = pk_outbox_message;
            var pk_outbox_messageUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "SequenceNumber" });
            pk_outbox_message.MappedKeys.Add(pk_outbox_messageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_messageUc).Add(pk_outbox_message);
            outbox_messageTable.UniqueConstraints.Add("pk_outbox_message", pk_outbox_message);
            var ix_outbox_message_enqueue_time = new TableIndex(
            "ix_outbox_message_enqueue_time", outbox_messageTable, new[] { enqueue_timeColumn }, false);
            var ix_outbox_message_enqueue_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "EnqueueTime" });
            ix_outbox_message_enqueue_time.MappedIndexes.Add(ix_outbox_message_enqueue_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_enqueue_timeIx).Add(ix_outbox_message_enqueue_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_enqueue_time", ix_outbox_message_enqueue_time);
            var ix_outbox_message_expiration_time = new TableIndex(
            "ix_outbox_message_expiration_time", outbox_messageTable, new[] { expiration_timeColumn0 }, false);
            var ix_outbox_message_expiration_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "ExpirationTime" });
            ix_outbox_message_expiration_time.MappedIndexes.Add(ix_outbox_message_expiration_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_expiration_timeIx).Add(ix_outbox_message_expiration_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_expiration_time", ix_outbox_message_expiration_time);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_ = new TableIndex(
            "ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", outbox_messageTable, new[] { inbox_message_idColumn, inbox_consumer_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "InboxMessageId", "InboxConsumerId", "SequenceNumber" });
            ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_.MappedIndexes.Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix).Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            outbox_messageTable.Indexes.Add("ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            var ix_outbox_message_outbox_id_sequence_number = new TableIndex(
            "ix_outbox_message_outbox_id_sequence_number", outbox_messageTable, new[] { outbox_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_outbox_id_sequence_numberIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "OutboxId", "SequenceNumber" });
            ix_outbox_message_outbox_id_sequence_number.MappedIndexes.Add(ix_outbox_message_outbox_id_sequence_numberIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_outbox_id_sequence_numberIx).Add(ix_outbox_message_outbox_id_sequence_number);
            outbox_messageTable.Indexes.Add("ix_outbox_message_outbox_id_sequence_number", ix_outbox_message_outbox_id_sequence_number);
            relationalModel.Tables.Add(("outbox_message", null), outbox_messageTable);
            var outbox_messageTableMapping = new TableMapping(outboxMessage, outbox_messageTable, true);
            outbox_messageTable.AddTypeMapping(outbox_messageTableMapping, false);
            tableMappings4.Add(outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sequence_numberColumn, outboxMessage.FindProperty("SequenceNumber")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn, outboxMessage.FindProperty("Body")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(content_typeColumn, outboxMessage.FindProperty("ContentType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(conversation_idColumn, outboxMessage.FindProperty("ConversationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(correlation_idColumn, outboxMessage.FindProperty("CorrelationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(destination_addressColumn, outboxMessage.FindProperty("DestinationAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(enqueue_timeColumn, outboxMessage.FindProperty("EnqueueTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn0, outboxMessage.FindProperty("ExpirationTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(fault_addressColumn, outboxMessage.FindProperty("FaultAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(headersColumn, outboxMessage.FindProperty("Headers")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_consumer_idColumn, outboxMessage.FindProperty("InboxConsumerId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_message_idColumn, outboxMessage.FindProperty("InboxMessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(initiator_idColumn, outboxMessage.FindProperty("InitiatorId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn0, outboxMessage.FindProperty("MessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_typeColumn, outboxMessage.FindProperty("MessageType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn, outboxMessage.FindProperty("OutboxId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn, outboxMessage.FindProperty("Properties")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(request_idColumn, outboxMessage.FindProperty("RequestId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(response_addressColumn, outboxMessage.FindProperty("ResponseAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sent_timeColumn, outboxMessage.FindProperty("SentTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(source_addressColumn, outboxMessage.FindProperty("SourceAddress")!, outbox_messageTableMapping);

            var outboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxState")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null, relationalModel);
            var createdColumnBase = new ColumnBase<ColumnMappingBase>("created", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("created", createdColumnBase);
            var deliveredColumnBase0 = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("delivered", deliveredColumnBase0);
            var last_sequence_numberColumnBase0 = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase0);
            var lock_idColumnBase0 = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase0);
            var outbox_idColumnBase0 = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("outbox_id", outbox_idColumnBase0);
            var row_versionColumnBase0 = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("row_version", row_versionColumnBase0);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxState", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(outboxState, massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase, false);
            defaultTableMappings5.Add(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase0, outboxState.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdColumnBase, outboxState.FindProperty("Created")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase0, outboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase0, outboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase0, outboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase0, outboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);

            var tableMappings5 = new List<TableMapping>();
            outboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var outbox_stateTable = new Table("outbox_state", null, relationalModel);
            var outbox_idColumn0 = new Column("outbox_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("outbox_id", outbox_idColumn0);
            var createdColumn = new Column("created", "timestamp with time zone", outbox_stateTable);
            outbox_stateTable.Columns.Add("created", createdColumn);
            var deliveredColumn0 = new Column("delivered", "timestamp with time zone", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("delivered", deliveredColumn0);
            var last_sequence_numberColumn0 = new Column("last_sequence_number", "bigint", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn0);
            var lock_idColumn0 = new Column("lock_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("lock_id", lock_idColumn0);
            var row_versionColumn0 = new Column("row_version", "bytea", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("row_version", row_versionColumn0);
            var pk_outbox_state = new UniqueConstraint("pk_outbox_state", outbox_stateTable, new[] { outbox_idColumn0 });
            outbox_stateTable.PrimaryKey = pk_outbox_state;
            var pk_outbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "OutboxId" });
            pk_outbox_state.MappedKeys.Add(pk_outbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_stateUc).Add(pk_outbox_state);
            outbox_stateTable.UniqueConstraints.Add("pk_outbox_state", pk_outbox_state);
            var ix_outbox_state_created = new TableIndex(
            "ix_outbox_state_created", outbox_stateTable, new[] { createdColumn }, false);
            var ix_outbox_state_createdIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "Created" });
            ix_outbox_state_created.MappedIndexes.Add(ix_outbox_state_createdIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_state_createdIx).Add(ix_outbox_state_created);
            outbox_stateTable.Indexes.Add("ix_outbox_state_created", ix_outbox_state_created);
            relationalModel.Tables.Add(("outbox_state", null), outbox_stateTable);
            var outbox_stateTableMapping = new TableMapping(outboxState, outbox_stateTable, true);
            outbox_stateTable.AddTypeMapping(outbox_stateTableMapping, false);
            tableMappings5.Add(outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn0, outboxState.FindProperty("OutboxId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(createdColumn, outboxState.FindProperty("Created")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn0, outboxState.FindProperty("Delivered")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn0, outboxState.FindProperty("LastSequenceNumber")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn0, outboxState.FindProperty("LockId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn0, outboxState.FindProperty("RowVersion")!, outbox_stateTableMapping);
            var fk_contact_person_suppliers_supplier_id = new ForeignKeyConstraint(
                "fk_contact_person_suppliers_supplier_id", contact_personTable, suppliersTable,
                new[] { supplier_idColumn0 },
                suppliersTable.FindUniqueConstraint("pk_suppliers")!, ReferentialAction.Cascade);
            var fk_contact_person_suppliers_supplier_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Inventory.Domain.SupplierAggregate.ContactPerson",
                new[] { "SupplierId" },
                "Ecommerce.Inventory.Domain.SupplierAggregate.Supplier",
                new[] { "Id" });
            fk_contact_person_suppliers_supplier_id.MappedForeignKeys.Add(fk_contact_person_suppliers_supplier_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_contact_person_suppliers_supplier_idFk).Add(fk_contact_person_suppliers_supplier_id);
            contact_personTable.ForeignKeyConstraints.Add(fk_contact_person_suppliers_supplier_id);
            suppliersTable.ReferencingForeignKeyConstraints.Add(fk_contact_person_suppliers_supplier_id);
            var fk_stocks_suppliers_supplier_id = new ForeignKeyConstraint(
                "fk_stocks_suppliers_supplier_id", stocksTable, suppliersTable,
                new[] { supplier_idColumn },
                suppliersTable.FindUniqueConstraint("pk_suppliers")!, ReferentialAction.SetNull);
            var fk_stocks_suppliers_supplier_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Inventory.Domain.StockAggregate.Stock",
                new[] { "SupplierId" },
                "Ecommerce.Inventory.Domain.SupplierAggregate.Supplier",
                new[] { "Id" });
            fk_stocks_suppliers_supplier_id.MappedForeignKeys.Add(fk_stocks_suppliers_supplier_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_stocks_suppliers_supplier_idFk).Add(fk_stocks_suppliers_supplier_id);
            stocksTable.ForeignKeyConstraints.Add(fk_stocks_suppliers_supplier_id);
            suppliersTable.ReferencingForeignKeyConstraints.Add(fk_stocks_suppliers_supplier_id);
            var fk_stocks_warehouses_warehouse_id = new ForeignKeyConstraint(
                "fk_stocks_warehouses_warehouse_id", stocksTable, warehousesTable,
                new[] { warehouse_idColumn },
                warehousesTable.FindUniqueConstraint("pk_warehouses")!, ReferentialAction.Cascade);
            var fk_stocks_warehouses_warehouse_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Inventory.Domain.StockAggregate.Stock",
                new[] { "WarehouseId" },
                "Ecommerce.Inventory.Domain.WarehouseAggregate.Warehouse",
                new[] { "Id" });
            fk_stocks_warehouses_warehouse_id.MappedForeignKeys.Add(fk_stocks_warehouses_warehouse_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_stocks_warehouses_warehouse_idFk).Add(fk_stocks_warehouses_warehouse_id);
            stocksTable.ForeignKeyConstraints.Add(fk_stocks_warehouses_warehouse_id);
            warehousesTable.ReferencingForeignKeyConstraints.Add(fk_stocks_warehouses_warehouse_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
