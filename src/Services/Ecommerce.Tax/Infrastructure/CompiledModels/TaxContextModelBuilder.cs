// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ecommerce.Tax.Infrastructure.CompiledModels
{
    public partial class TaxContextModel
    {
        partial void Initialize()
        {
            var calculation = CalculationEntityType.Create(this);
            var category = CategoryEntityType.Create(this);

            CalculationEntityType.CreateForeignKey1(calculation, category);

            CalculationEntityType.CreateAnnotations(calculation);
            CategoryEntityType.CreateAnnotations(category);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var calculation = FindEntityType("Ecommerce.Tax.Domain.CalculationAggregate.Calculation")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            calculation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var ecommerceTaxDomainCalculationAggregateCalculationTableBase = new TableBase("Ecommerce.Tax.Domain.CalculationAggregate.Calculation", null, relationalModel);
            var category_idColumnBase = new ColumnBase<ColumnMappingBase>("category_id", "bigint", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("category_id", category_idColumnBase);
            var created_atColumnBase = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("created_at", created_atColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("id", idColumnBase);
            var is_deletedColumnBase = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("is_deleted", is_deletedColumnBase);
            var last_modified_atColumnBase = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceTaxDomainCalculationAggregateCalculationTableBase)
            {
                IsNullable = true
            };
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase);
            var rateColumnBase = new ColumnBase<ColumnMappingBase>("rate", "double precision", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("rate", rateColumnBase);
            var state_or_province_idColumnBase = new ColumnBase<ColumnMappingBase>("state_or_province_id", "bigint", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("state_or_province_id", state_or_province_idColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Tax.Domain.CalculationAggregate.Calculation", ecommerceTaxDomainCalculationAggregateCalculationTableBase);
            var ecommerceTaxDomainCalculationAggregateCalculationMappingBase = new TableMappingBase<ColumnMappingBase>(calculation, ecommerceTaxDomainCalculationAggregateCalculationTableBase, true);
            ecommerceTaxDomainCalculationAggregateCalculationTableBase.AddTypeMapping(ecommerceTaxDomainCalculationAggregateCalculationMappingBase, false);
            defaultTableMappings.Add(ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, calculation.FindProperty("Id")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase, calculation.FindProperty("CategoryId")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase, calculation.FindProperty("CreatedAt")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase, calculation.FindProperty("IsDeleted")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase, calculation.FindProperty("LastModifiedAt")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rateColumnBase, calculation.FindProperty("Rate")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)state_or_province_idColumnBase, calculation.FindProperty("StateOrProvinceId")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, calculation.FindProperty("Version")!, ecommerceTaxDomainCalculationAggregateCalculationMappingBase);

            var tableMappings = new List<TableMapping>();
            calculation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var calculationsTable = new Table("calculations", null, relationalModel);
            var idColumn = new Column("id", "bigint", calculationsTable);
            calculationsTable.Columns.Add("id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var category_idColumn = new Column("category_id", "bigint", calculationsTable);
            calculationsTable.Columns.Add("category_id", category_idColumn);
            var created_atColumn = new Column("created_at", "timestamp with time zone", calculationsTable);
            calculationsTable.Columns.Add("created_at", created_atColumn);
            var is_deletedColumn = new Column("is_deleted", "boolean", calculationsTable);
            calculationsTable.Columns.Add("is_deleted", is_deletedColumn);
            var last_modified_atColumn = new Column("last_modified_at", "timestamp with time zone", calculationsTable)
            {
                IsNullable = true
            };
            calculationsTable.Columns.Add("last_modified_at", last_modified_atColumn);
            var rateColumn = new Column("rate", "double precision", calculationsTable);
            calculationsTable.Columns.Add("rate", rateColumn);
            var state_or_province_idColumn = new Column("state_or_province_id", "bigint", calculationsTable);
            calculationsTable.Columns.Add("state_or_province_id", state_or_province_idColumn);
            var versionColumn = new Column("version", "uuid", calculationsTable);
            calculationsTable.Columns.Add("version", versionColumn);
            var pk_calculations = new UniqueConstraint("pk_calculations", calculationsTable, new[] { idColumn });
            calculationsTable.PrimaryKey = pk_calculations;
            var pk_calculationsUc = RelationalModel.GetKey(this,
                "Ecommerce.Tax.Domain.CalculationAggregate.Calculation",
                new[] { "Id" });
            pk_calculations.MappedKeys.Add(pk_calculationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_calculationsUc).Add(pk_calculations);
            calculationsTable.UniqueConstraints.Add("pk_calculations", pk_calculations);
            var ix_calculations_category_id = new TableIndex(
            "ix_calculations_category_id", calculationsTable, new[] { category_idColumn }, false);
            var ix_calculations_category_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Tax.Domain.CalculationAggregate.Calculation",
                new[] { "CategoryId" });
            ix_calculations_category_id.MappedIndexes.Add(ix_calculations_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_calculations_category_idIx).Add(ix_calculations_category_id);
            calculationsTable.Indexes.Add("ix_calculations_category_id", ix_calculations_category_id);
            relationalModel.Tables.Add(("calculations", null), calculationsTable);
            var calculationsTableMapping = new TableMapping(calculation, calculationsTable, true);
            calculationsTable.AddTypeMapping(calculationsTableMapping, false);
            tableMappings.Add(calculationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, calculation.FindProperty("Id")!, calculationsTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn, calculation.FindProperty("CategoryId")!, calculationsTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn, calculation.FindProperty("CreatedAt")!, calculationsTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn, calculation.FindProperty("IsDeleted")!, calculationsTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn, calculation.FindProperty("LastModifiedAt")!, calculationsTableMapping);
            RelationalModel.CreateColumnMapping(rateColumn, calculation.FindProperty("Rate")!, calculationsTableMapping);
            RelationalModel.CreateColumnMapping(state_or_province_idColumn, calculation.FindProperty("StateOrProvinceId")!, calculationsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, calculation.FindProperty("Version")!, calculationsTableMapping);

            var category = FindEntityType("Ecommerce.Tax.Domain.CategoryAggregate.Category")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var ecommerceTaxDomainCategoryAggregateCategoryTableBase = new TableBase("Ecommerce.Tax.Domain.CategoryAggregate.Category", null, relationalModel);
            var created_atColumnBase0 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceTaxDomainCategoryAggregateCategoryTableBase);
            ecommerceTaxDomainCategoryAggregateCategoryTableBase.Columns.Add("created_at", created_atColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceTaxDomainCategoryAggregateCategoryTableBase);
            ecommerceTaxDomainCategoryAggregateCategoryTableBase.Columns.Add("id", idColumnBase0);
            var is_deletedColumnBase0 = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceTaxDomainCategoryAggregateCategoryTableBase);
            ecommerceTaxDomainCategoryAggregateCategoryTableBase.Columns.Add("is_deleted", is_deletedColumnBase0);
            var last_modified_atColumnBase0 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceTaxDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceTaxDomainCategoryAggregateCategoryTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceTaxDomainCategoryAggregateCategoryTableBase);
            ecommerceTaxDomainCategoryAggregateCategoryTableBase.Columns.Add("name", nameColumnBase);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceTaxDomainCategoryAggregateCategoryTableBase);
            ecommerceTaxDomainCategoryAggregateCategoryTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("Ecommerce.Tax.Domain.CategoryAggregate.Category", ecommerceTaxDomainCategoryAggregateCategoryTableBase);
            var ecommerceTaxDomainCategoryAggregateCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, ecommerceTaxDomainCategoryAggregateCategoryTableBase, true);
            ecommerceTaxDomainCategoryAggregateCategoryTableBase.AddTypeMapping(ecommerceTaxDomainCategoryAggregateCategoryMappingBase, false);
            defaultTableMappings0.Add(ecommerceTaxDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, category.FindProperty("Id")!, ecommerceTaxDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase0, category.FindProperty("CreatedAt")!, ecommerceTaxDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase0, category.FindProperty("IsDeleted")!, ecommerceTaxDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase0, category.FindProperty("LastModifiedAt")!, ecommerceTaxDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, category.FindProperty("Name")!, ecommerceTaxDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, category.FindProperty("Version")!, ecommerceTaxDomainCategoryAggregateCategoryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var categoriesTable = new Table("categories", null, relationalModel);
            var idColumn0 = new Column("id", "bigint", categoriesTable);
            categoriesTable.Columns.Add("id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var created_atColumn0 = new Column("created_at", "timestamp with time zone", categoriesTable);
            categoriesTable.Columns.Add("created_at", created_atColumn0);
            var is_deletedColumn0 = new Column("is_deleted", "boolean", categoriesTable);
            categoriesTable.Columns.Add("is_deleted", is_deletedColumn0);
            var last_modified_atColumn0 = new Column("last_modified_at", "timestamp with time zone", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("last_modified_at", last_modified_atColumn0);
            var nameColumn = new Column("name", "character varying(255)", categoriesTable);
            categoriesTable.Columns.Add("name", nameColumn);
            var versionColumn0 = new Column("version", "uuid", categoriesTable);
            categoriesTable.Columns.Add("version", versionColumn0);
            var pk_categories = new UniqueConstraint("pk_categories", categoriesTable, new[] { idColumn0 });
            categoriesTable.PrimaryKey = pk_categories;
            var pk_categoriesUc = RelationalModel.GetKey(this,
                "Ecommerce.Tax.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            pk_categories.MappedKeys.Add(pk_categoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_categoriesUc).Add(pk_categories);
            categoriesTable.UniqueConstraints.Add("pk_categories", pk_categories);
            var ix_categories_name = new TableIndex(
            "ix_categories_name", categoriesTable, new[] { nameColumn }, true);
            var ix_categories_nameIx = RelationalModel.GetIndex(this,
                "Ecommerce.Tax.Domain.CategoryAggregate.Category",
                new[] { "Name" });
            ix_categories_name.MappedIndexes.Add(ix_categories_nameIx);
            RelationalModel.GetOrCreateTableIndexes(ix_categories_nameIx).Add(ix_categories_name);
            categoriesTable.Indexes.Add("ix_categories_name", ix_categories_name);
            relationalModel.Tables.Add(("categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings0.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn0, category.FindProperty("CreatedAt")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn0, category.FindProperty("IsDeleted")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn0, category.FindProperty("LastModifiedAt")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, category.FindProperty("Name")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, category.FindProperty("Version")!, categoriesTableMapping);
            var fk_calculations_categories_category_id = new ForeignKeyConstraint(
                "fk_calculations_categories_category_id", calculationsTable, categoriesTable,
                new[] { category_idColumn },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.Restrict);
            var fk_calculations_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Tax.Domain.CalculationAggregate.Calculation",
                new[] { "CategoryId" },
                "Ecommerce.Tax.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            fk_calculations_categories_category_id.MappedForeignKeys.Add(fk_calculations_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_calculations_categories_category_idFk).Add(fk_calculations_categories_category_id);
            calculationsTable.ForeignKeyConstraints.Add(fk_calculations_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_calculations_categories_category_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
