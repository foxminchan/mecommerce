// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ecommerce.Catalog.Infrastructure.CompliedModels
{
    public partial class CatalogContextModel
    {
        partial void Initialize()
        {
            var brand = BrandEntityType.Create(this);
            var category = CategoryEntityType.Create(this);
            var productCategory = ProductCategoryEntityType.Create(this);
            var price = PriceEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var productImage = ProductImageEntityType.Create(this);
            var productRelated = ProductRelatedEntityType.Create(this);
            var productAttribute = ProductAttributeEntityType.Create(this);
            var productAttributeCombination = ProductAttributeCombinationEntityType.Create(this);
            var productAttributeGroup = ProductAttributeGroupEntityType.Create(this);
            var productVariant = ProductVariantEntityType.Create(this);
            var productVariantCombination = ProductVariantCombinationEntityType.Create(this);
            var variant = VariantEntityType.Create(this);
            var inboxState = InboxStateEntityType.Create(this);
            var outboxMessage = OutboxMessageEntityType.Create(this);
            var outboxState = OutboxStateEntityType.Create(this);

            CategoryEntityType.CreateForeignKey1(category, category);
            ProductCategoryEntityType.CreateForeignKey1(productCategory, category);
            ProductCategoryEntityType.CreateForeignKey2(productCategory, product);
            PriceEntityType.CreateForeignKey1(price, productVariant);
            ProductEntityType.CreateForeignKey1(product, brand);
            ProductImageEntityType.CreateForeignKey1(productImage, product);
            ProductRelatedEntityType.CreateForeignKey1(productRelated, product);
            ProductRelatedEntityType.CreateForeignKey2(productRelated, product);
            ProductAttributeEntityType.CreateForeignKey1(productAttribute, productAttributeGroup);
            ProductAttributeCombinationEntityType.CreateForeignKey1(productAttributeCombination, productAttribute);
            ProductAttributeCombinationEntityType.CreateForeignKey2(productAttributeCombination, product);
            ProductVariantEntityType.CreateForeignKey1(productVariant, product);
            ProductVariantCombinationEntityType.CreateForeignKey1(productVariantCombination, productVariant);
            ProductVariantCombinationEntityType.CreateForeignKey2(productVariantCombination, variant);

            BrandEntityType.CreateAnnotations(brand);
            CategoryEntityType.CreateAnnotations(category);
            ProductCategoryEntityType.CreateAnnotations(productCategory);
            PriceEntityType.CreateAnnotations(price);
            ProductEntityType.CreateAnnotations(product);
            ProductImageEntityType.CreateAnnotations(productImage);
            ProductRelatedEntityType.CreateAnnotations(productRelated);
            ProductAttributeEntityType.CreateAnnotations(productAttribute);
            ProductAttributeCombinationEntityType.CreateAnnotations(productAttributeCombination);
            ProductAttributeGroupEntityType.CreateAnnotations(productAttributeGroup);
            ProductVariantEntityType.CreateAnnotations(productVariant);
            ProductVariantCombinationEntityType.CreateAnnotations(productVariantCombination);
            VariantEntityType.CreateAnnotations(variant);
            InboxStateEntityType.CreateAnnotations(inboxState);
            OutboxMessageEntityType.CreateAnnotations(outboxMessage);
            OutboxStateEntityType.CreateAnnotations(outboxState);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var brand = FindEntityType("Ecommerce.Catalog.Domain.BrandAggregate.Brand")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            brand.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var ecommerceCatalogDomainBrandAggregateBrandTableBase = new TableBase("Ecommerce.Catalog.Domain.BrandAggregate.Brand", null, relationalModel);
            var created_atColumnBase = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("created_at", created_atColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("description", "character varying(1000)", ecommerceCatalogDomainBrandAggregateBrandTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("description", descriptionColumnBase);
            var display_orderColumnBase = new ColumnBase<ColumnMappingBase>("display_order", "integer", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("display_order", display_orderColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("id", idColumnBase);
            var is_deletedColumnBase = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("is_deleted", is_deletedColumnBase);
            var last_modified_atColumnBase = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceCatalogDomainBrandAggregateBrandTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase);
            var meta_descriptionColumnBase = new ColumnBase<ColumnMappingBase>("meta_description", "character varying(255)", ecommerceCatalogDomainBrandAggregateBrandTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("meta_description", meta_descriptionColumnBase);
            var meta_keywordsColumnBase = new ColumnBase<ColumnMappingBase>("meta_keywords", "character varying(255)", ecommerceCatalogDomainBrandAggregateBrandTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("meta_keywords", meta_keywordsColumnBase);
            var meta_titleColumnBase = new ColumnBase<ColumnMappingBase>("meta_title", "character varying(255)", ecommerceCatalogDomainBrandAggregateBrandTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("meta_title", meta_titleColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("name", nameColumnBase);
            var slugColumnBase = new ColumnBase<ColumnMappingBase>("slug", "character varying(50)", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("slug", slugColumnBase);
            var thumbnail_idColumnBase = new ColumnBase<ColumnMappingBase>("thumbnail_id", "uuid", ecommerceCatalogDomainBrandAggregateBrandTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("thumbnail_id", thumbnail_idColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.BrandAggregate.Brand", ecommerceCatalogDomainBrandAggregateBrandTableBase);
            var ecommerceCatalogDomainBrandAggregateBrandMappingBase = new TableMappingBase<ColumnMappingBase>(brand, ecommerceCatalogDomainBrandAggregateBrandTableBase, true);
            ecommerceCatalogDomainBrandAggregateBrandTableBase.AddTypeMapping(ecommerceCatalogDomainBrandAggregateBrandMappingBase, false);
            defaultTableMappings.Add(ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, brand.FindProperty("Id")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase, brand.FindProperty("CreatedAt")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, brand.FindProperty("Description")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)display_orderColumnBase, brand.FindProperty("DisplayOrder")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase, brand.FindProperty("IsDeleted")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase, brand.FindProperty("LastModifiedAt")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_descriptionColumnBase, brand.FindProperty("MetaDescription")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_keywordsColumnBase, brand.FindProperty("MetaKeywords")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_titleColumnBase, brand.FindProperty("MetaTitle")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, brand.FindProperty("Name")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase, brand.FindProperty("Slug")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)thumbnail_idColumnBase, brand.FindProperty("ThumbnailId")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, brand.FindProperty("Version")!, ecommerceCatalogDomainBrandAggregateBrandMappingBase);

            var tableMappings = new List<TableMapping>();
            brand.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var brandsTable = new Table("brands", null, relationalModel);
            var idColumn = new Column("id", "bigint", brandsTable);
            brandsTable.Columns.Add("id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var created_atColumn = new Column("created_at", "timestamp with time zone", brandsTable);
            brandsTable.Columns.Add("created_at", created_atColumn);
            var descriptionColumn = new Column("description", "character varying(1000)", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("description", descriptionColumn);
            var display_orderColumn = new Column("display_order", "integer", brandsTable);
            brandsTable.Columns.Add("display_order", display_orderColumn);
            var is_deletedColumn = new Column("is_deleted", "boolean", brandsTable);
            brandsTable.Columns.Add("is_deleted", is_deletedColumn);
            var last_modified_atColumn = new Column("last_modified_at", "timestamp with time zone", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("last_modified_at", last_modified_atColumn);
            var meta_descriptionColumn = new Column("meta_description", "character varying(255)", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("meta_description", meta_descriptionColumn);
            var meta_keywordsColumn = new Column("meta_keywords", "character varying(255)", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("meta_keywords", meta_keywordsColumn);
            var meta_titleColumn = new Column("meta_title", "character varying(255)", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("meta_title", meta_titleColumn);
            var nameColumn = new Column("name", "character varying(255)", brandsTable);
            brandsTable.Columns.Add("name", nameColumn);
            var slugColumn = new Column("slug", "character varying(50)", brandsTable);
            brandsTable.Columns.Add("slug", slugColumn);
            var thumbnail_idColumn = new Column("thumbnail_id", "uuid", brandsTable)
            {
                IsNullable = true
            };
            brandsTable.Columns.Add("thumbnail_id", thumbnail_idColumn);
            var versionColumn = new Column("version", "uuid", brandsTable);
            brandsTable.Columns.Add("version", versionColumn);
            var pk_brands = new UniqueConstraint("pk_brands", brandsTable, new[] { idColumn });
            brandsTable.PrimaryKey = pk_brands;
            var pk_brandsUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.BrandAggregate.Brand",
                new[] { "Id" });
            pk_brands.MappedKeys.Add(pk_brandsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_brandsUc).Add(pk_brands);
            brandsTable.UniqueConstraints.Add("pk_brands", pk_brands);
            var ix_brands_display_order = new TableIndex(
            "ix_brands_display_order", brandsTable, new[] { display_orderColumn }, true);
            var ix_brands_display_orderIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.BrandAggregate.Brand",
                new[] { "DisplayOrder" });
            ix_brands_display_order.MappedIndexes.Add(ix_brands_display_orderIx);
            RelationalModel.GetOrCreateTableIndexes(ix_brands_display_orderIx).Add(ix_brands_display_order);
            brandsTable.Indexes.Add("ix_brands_display_order", ix_brands_display_order);
            var ix_brands_slug = new TableIndex(
            "ix_brands_slug", brandsTable, new[] { slugColumn }, true);
            var ix_brands_slugIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.BrandAggregate.Brand",
                new[] { "Slug" });
            ix_brands_slug.MappedIndexes.Add(ix_brands_slugIx);
            RelationalModel.GetOrCreateTableIndexes(ix_brands_slugIx).Add(ix_brands_slug);
            brandsTable.Indexes.Add("ix_brands_slug", ix_brands_slug);
            relationalModel.Tables.Add(("brands", null), brandsTable);
            var brandsTableMapping = new TableMapping(brand, brandsTable, true);
            brandsTable.AddTypeMapping(brandsTableMapping, false);
            tableMappings.Add(brandsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, brand.FindProperty("Id")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn, brand.FindProperty("CreatedAt")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, brand.FindProperty("Description")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(display_orderColumn, brand.FindProperty("DisplayOrder")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn, brand.FindProperty("IsDeleted")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn, brand.FindProperty("LastModifiedAt")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(meta_descriptionColumn, brand.FindProperty("MetaDescription")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(meta_keywordsColumn, brand.FindProperty("MetaKeywords")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(meta_titleColumn, brand.FindProperty("MetaTitle")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, brand.FindProperty("Name")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn, brand.FindProperty("Slug")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(thumbnail_idColumn, brand.FindProperty("ThumbnailId")!, brandsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, brand.FindProperty("Version")!, brandsTableMapping);

            var category = FindEntityType("Ecommerce.Catalog.Domain.CategoryAggregate.Category")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var ecommerceCatalogDomainCategoryAggregateCategoryTableBase = new TableBase("Ecommerce.Catalog.Domain.CategoryAggregate.Category", null, relationalModel);
            var created_atColumnBase0 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("created_at", created_atColumnBase0);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("description", "character varying(1000)", ecommerceCatalogDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("description", descriptionColumnBase0);
            var display_orderColumnBase0 = new ColumnBase<ColumnMappingBase>("display_order", "integer", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("display_order", display_orderColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("id", idColumnBase0);
            var is_deletedColumnBase0 = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("is_deleted", is_deletedColumnBase0);
            var is_publishedColumnBase = new ColumnBase<ColumnMappingBase>("is_published", "boolean", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("is_published", is_publishedColumnBase);
            var last_modified_atColumnBase0 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceCatalogDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase0);
            var meta_descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("meta_description", "character varying(255)", ecommerceCatalogDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("meta_description", meta_descriptionColumnBase0);
            var meta_keywordsColumnBase0 = new ColumnBase<ColumnMappingBase>("meta_keywords", "character varying(255)", ecommerceCatalogDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("meta_keywords", meta_keywordsColumnBase0);
            var meta_titleColumnBase0 = new ColumnBase<ColumnMappingBase>("meta_title", "character varying(255)", ecommerceCatalogDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("meta_title", meta_titleColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("name", nameColumnBase0);
            var parent_idColumnBase = new ColumnBase<ColumnMappingBase>("parent_id", "bigint", ecommerceCatalogDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("parent_id", parent_idColumnBase);
            var slugColumnBase0 = new ColumnBase<ColumnMappingBase>("slug", "character varying(50)", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("slug", slugColumnBase0);
            var thumbnail_idColumnBase0 = new ColumnBase<ColumnMappingBase>("thumbnail_id", "uuid", ecommerceCatalogDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("thumbnail_id", thumbnail_idColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.CategoryAggregate.Category", ecommerceCatalogDomainCategoryAggregateCategoryTableBase);
            var ecommerceCatalogDomainCategoryAggregateCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, ecommerceCatalogDomainCategoryAggregateCategoryTableBase, true);
            ecommerceCatalogDomainCategoryAggregateCategoryTableBase.AddTypeMapping(ecommerceCatalogDomainCategoryAggregateCategoryMappingBase, false);
            defaultTableMappings0.Add(ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, category.FindProperty("Id")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase0, category.FindProperty("CreatedAt")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, category.FindProperty("Description")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)display_orderColumnBase0, category.FindProperty("DisplayOrder")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase0, category.FindProperty("IsDeleted")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_publishedColumnBase, category.FindProperty("IsPublished")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase0, category.FindProperty("LastModifiedAt")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_descriptionColumnBase0, category.FindProperty("MetaDescription")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_keywordsColumnBase0, category.FindProperty("MetaKeywords")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_titleColumnBase0, category.FindProperty("MetaTitle")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, category.FindProperty("Name")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parent_idColumnBase, category.FindProperty("ParentId")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase0, category.FindProperty("Slug")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)thumbnail_idColumnBase0, category.FindProperty("ThumbnailId")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, category.FindProperty("Version")!, ecommerceCatalogDomainCategoryAggregateCategoryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var categoriesTable = new Table("categories", null, relationalModel);
            var idColumn0 = new Column("id", "bigint", categoriesTable);
            categoriesTable.Columns.Add("id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var created_atColumn0 = new Column("created_at", "timestamp with time zone", categoriesTable);
            categoriesTable.Columns.Add("created_at", created_atColumn0);
            var descriptionColumn0 = new Column("description", "character varying(1000)", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("description", descriptionColumn0);
            var display_orderColumn0 = new Column("display_order", "integer", categoriesTable);
            categoriesTable.Columns.Add("display_order", display_orderColumn0);
            var is_deletedColumn0 = new Column("is_deleted", "boolean", categoriesTable);
            categoriesTable.Columns.Add("is_deleted", is_deletedColumn0);
            var is_publishedColumn = new Column("is_published", "boolean", categoriesTable);
            categoriesTable.Columns.Add("is_published", is_publishedColumn);
            var last_modified_atColumn0 = new Column("last_modified_at", "timestamp with time zone", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("last_modified_at", last_modified_atColumn0);
            var meta_descriptionColumn0 = new Column("meta_description", "character varying(255)", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("meta_description", meta_descriptionColumn0);
            var meta_keywordsColumn0 = new Column("meta_keywords", "character varying(255)", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("meta_keywords", meta_keywordsColumn0);
            var meta_titleColumn0 = new Column("meta_title", "character varying(255)", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("meta_title", meta_titleColumn0);
            var nameColumn0 = new Column("name", "character varying(255)", categoriesTable);
            categoriesTable.Columns.Add("name", nameColumn0);
            var parent_idColumn = new Column("parent_id", "bigint", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("parent_id", parent_idColumn);
            var slugColumn0 = new Column("slug", "character varying(50)", categoriesTable);
            categoriesTable.Columns.Add("slug", slugColumn0);
            var thumbnail_idColumn0 = new Column("thumbnail_id", "uuid", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("thumbnail_id", thumbnail_idColumn0);
            var versionColumn0 = new Column("version", "uuid", categoriesTable);
            categoriesTable.Columns.Add("version", versionColumn0);
            var pk_categories = new UniqueConstraint("pk_categories", categoriesTable, new[] { idColumn0 });
            categoriesTable.PrimaryKey = pk_categories;
            var pk_categoriesUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            pk_categories.MappedKeys.Add(pk_categoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_categoriesUc).Add(pk_categories);
            categoriesTable.UniqueConstraints.Add("pk_categories", pk_categories);
            var ix_categories_display_order = new TableIndex(
            "ix_categories_display_order", categoriesTable, new[] { display_orderColumn0 }, true);
            var ix_categories_display_orderIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.Category",
                new[] { "DisplayOrder" });
            ix_categories_display_order.MappedIndexes.Add(ix_categories_display_orderIx);
            RelationalModel.GetOrCreateTableIndexes(ix_categories_display_orderIx).Add(ix_categories_display_order);
            categoriesTable.Indexes.Add("ix_categories_display_order", ix_categories_display_order);
            var ix_categories_parent_id = new TableIndex(
            "ix_categories_parent_id", categoriesTable, new[] { parent_idColumn }, false);
            var ix_categories_parent_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.Category",
                new[] { "ParentId" });
            ix_categories_parent_id.MappedIndexes.Add(ix_categories_parent_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_categories_parent_idIx).Add(ix_categories_parent_id);
            categoriesTable.Indexes.Add("ix_categories_parent_id", ix_categories_parent_id);
            var ix_categories_slug = new TableIndex(
            "ix_categories_slug", categoriesTable, new[] { slugColumn0 }, true);
            var ix_categories_slugIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.Category",
                new[] { "Slug" });
            ix_categories_slug.MappedIndexes.Add(ix_categories_slugIx);
            RelationalModel.GetOrCreateTableIndexes(ix_categories_slugIx).Add(ix_categories_slug);
            categoriesTable.Indexes.Add("ix_categories_slug", ix_categories_slug);
            relationalModel.Tables.Add(("categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings0.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn0, category.FindProperty("CreatedAt")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, category.FindProperty("Description")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(display_orderColumn0, category.FindProperty("DisplayOrder")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn0, category.FindProperty("IsDeleted")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(is_publishedColumn, category.FindProperty("IsPublished")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn0, category.FindProperty("LastModifiedAt")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(meta_descriptionColumn0, category.FindProperty("MetaDescription")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(meta_keywordsColumn0, category.FindProperty("MetaKeywords")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(meta_titleColumn0, category.FindProperty("MetaTitle")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, category.FindProperty("Name")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(parent_idColumn, category.FindProperty("ParentId")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn0, category.FindProperty("Slug")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(thumbnail_idColumn0, category.FindProperty("ThumbnailId")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, category.FindProperty("Version")!, categoriesTableMapping);

            var productCategory = FindEntityType("Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            productCategory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase = new TableBase("Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory", null, relationalModel);
            var category_idColumnBase = new ColumnBase<ColumnMappingBase>("category_id", "bigint", ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase.Columns.Add("category_id", category_idColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase.Columns.Add("id", idColumnBase1);
            var product_idColumnBase = new ColumnBase<ColumnMappingBase>("product_id", "uuid", ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase);
            ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase.Columns.Add("product_id", product_idColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory", ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase);
            var ecommerceCatalogDomainCategoryAggregateProductCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(productCategory, ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase, true);
            ecommerceCatalogDomainCategoryAggregateProductCategoryTableBase.AddTypeMapping(ecommerceCatalogDomainCategoryAggregateProductCategoryMappingBase, false);
            defaultTableMappings1.Add(ecommerceCatalogDomainCategoryAggregateProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, productCategory.FindProperty("Id")!, ecommerceCatalogDomainCategoryAggregateProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase, productCategory.FindProperty("CategoryId")!, ecommerceCatalogDomainCategoryAggregateProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase, productCategory.FindProperty("ProductId")!, ecommerceCatalogDomainCategoryAggregateProductCategoryMappingBase);

            var tableMappings1 = new List<TableMapping>();
            productCategory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var product_categoriesTable = new Table("product_categories", null, relationalModel);
            var idColumn1 = new Column("id", "bigint", product_categoriesTable);
            product_categoriesTable.Columns.Add("id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var category_idColumn = new Column("category_id", "bigint", product_categoriesTable);
            product_categoriesTable.Columns.Add("category_id", category_idColumn);
            var product_idColumn = new Column("product_id", "uuid", product_categoriesTable);
            product_categoriesTable.Columns.Add("product_id", product_idColumn);
            var pk_product_categories = new UniqueConstraint("pk_product_categories", product_categoriesTable, new[] { idColumn1 });
            product_categoriesTable.PrimaryKey = pk_product_categories;
            var pk_product_categoriesUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory",
                new[] { "Id" });
            pk_product_categories.MappedKeys.Add(pk_product_categoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_categoriesUc).Add(pk_product_categories);
            product_categoriesTable.UniqueConstraints.Add("pk_product_categories", pk_product_categories);
            var ix_product_categories_category_id = new TableIndex(
            "ix_product_categories_category_id", product_categoriesTable, new[] { category_idColumn }, false);
            var ix_product_categories_category_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory",
                new[] { "CategoryId" });
            ix_product_categories_category_id.MappedIndexes.Add(ix_product_categories_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_categories_category_idIx).Add(ix_product_categories_category_id);
            product_categoriesTable.Indexes.Add("ix_product_categories_category_id", ix_product_categories_category_id);
            var ix_product_categories_product_id = new TableIndex(
            "ix_product_categories_product_id", product_categoriesTable, new[] { product_idColumn }, false);
            var ix_product_categories_product_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory",
                new[] { "ProductId" });
            ix_product_categories_product_id.MappedIndexes.Add(ix_product_categories_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_categories_product_idIx).Add(ix_product_categories_product_id);
            product_categoriesTable.Indexes.Add("ix_product_categories_product_id", ix_product_categories_product_id);
            relationalModel.Tables.Add(("product_categories", null), product_categoriesTable);
            var product_categoriesTableMapping = new TableMapping(productCategory, product_categoriesTable, true);
            product_categoriesTable.AddTypeMapping(product_categoriesTableMapping, false);
            tableMappings1.Add(product_categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, productCategory.FindProperty("Id")!, product_categoriesTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn, productCategory.FindProperty("CategoryId")!, product_categoriesTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn, productCategory.FindProperty("ProductId")!, product_categoriesTableMapping);

            var price = FindEntityType("Ecommerce.Catalog.Domain.ProductAggregate.Price")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            price.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var ecommerceCatalogDomainProductAggregatePriceTableBase = new TableBase("Ecommerce.Catalog.Domain.ProductAggregate.Price", null, relationalModel);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainProductAggregatePriceTableBase);
            ecommerceCatalogDomainProductAggregatePriceTableBase.Columns.Add("id", idColumnBase2);
            var price_discount_priceColumnBase = new ColumnBase<ColumnMappingBase>("price_discount_price", "numeric(18,2)", ecommerceCatalogDomainProductAggregatePriceTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregatePriceTableBase.Columns.Add("price_discount_price", price_discount_priceColumnBase);
            var price_original_priceColumnBase = new ColumnBase<ColumnMappingBase>("price_original_price", "numeric(18,2)", ecommerceCatalogDomainProductAggregatePriceTableBase);
            ecommerceCatalogDomainProductAggregatePriceTableBase.Columns.Add("price_original_price", price_original_priceColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.ProductAggregate.Price", ecommerceCatalogDomainProductAggregatePriceTableBase);
            var ecommerceCatalogDomainProductAggregatePriceMappingBase = new TableMappingBase<ColumnMappingBase>(price, ecommerceCatalogDomainProductAggregatePriceTableBase, true);
            ecommerceCatalogDomainProductAggregatePriceTableBase.AddTypeMapping(ecommerceCatalogDomainProductAggregatePriceMappingBase, false);
            defaultTableMappings2.Add(ecommerceCatalogDomainProductAggregatePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, price.FindProperty("ProductVariantId")!, ecommerceCatalogDomainProductAggregatePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)price_discount_priceColumnBase, price.FindProperty("DiscountPrice")!, ecommerceCatalogDomainProductAggregatePriceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)price_original_priceColumnBase, price.FindProperty("OriginalPrice")!, ecommerceCatalogDomainProductAggregatePriceMappingBase);

            var tableMappings2 = new List<TableMapping>();
            price.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var product_variantsTable = new Table("product_variants", null, relationalModel);
            var idColumn2 = new Column("id", "bigint", product_variantsTable);
            product_variantsTable.Columns.Add("id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var display_orderColumn1 = new Column("display_order", "integer", product_variantsTable);
            product_variantsTable.Columns.Add("display_order", display_orderColumn1);
            var price_discount_priceColumn = new Column("price_discount_price", "numeric(18,2)", product_variantsTable)
            {
                IsNullable = true
            };
            product_variantsTable.Columns.Add("price_discount_price", price_discount_priceColumn);
            var price_original_priceColumn = new Column("price_original_price", "numeric(18,2)", product_variantsTable)
            {
                IsNullable = true
            };
            product_variantsTable.Columns.Add("price_original_price", price_original_priceColumn);
            var product_idColumn0 = new Column("product_id", "uuid", product_variantsTable);
            product_variantsTable.Columns.Add("product_id", product_idColumn0);
            var skuColumn = new Column("sku", "character varying(50)", product_variantsTable);
            product_variantsTable.Columns.Add("sku", skuColumn);
            var pk_product_variants = new UniqueConstraint("pk_product_variants", product_variantsTable, new[] { idColumn2 });
            product_variantsTable.PrimaryKey = pk_product_variants;
            var pk_product_variantsUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant",
                new[] { "Id" });
            pk_product_variants.MappedKeys.Add(pk_product_variantsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_variantsUc).Add(pk_product_variants);
            var pk_product_variantsUc0 = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.Price",
                new[] { "ProductVariantId" });
            pk_product_variants.MappedKeys.Add(pk_product_variantsUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_variantsUc0).Add(pk_product_variants);
            product_variantsTable.UniqueConstraints.Add("pk_product_variants", pk_product_variants);
            var ix_product_variants_display_order = new TableIndex(
            "ix_product_variants_display_order", product_variantsTable, new[] { display_orderColumn1 }, true);
            var ix_product_variants_display_orderIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant",
                new[] { "DisplayOrder" });
            ix_product_variants_display_order.MappedIndexes.Add(ix_product_variants_display_orderIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_variants_display_orderIx).Add(ix_product_variants_display_order);
            product_variantsTable.Indexes.Add("ix_product_variants_display_order", ix_product_variants_display_order);
            var ix_product_variants_product_id = new TableIndex(
            "ix_product_variants_product_id", product_variantsTable, new[] { product_idColumn0 }, false);
            var ix_product_variants_product_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant",
                new[] { "ProductId" });
            ix_product_variants_product_id.MappedIndexes.Add(ix_product_variants_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_variants_product_idIx).Add(ix_product_variants_product_id);
            product_variantsTable.Indexes.Add("ix_product_variants_product_id", ix_product_variants_product_id);
            var ix_product_variants_sku = new TableIndex(
            "ix_product_variants_sku", product_variantsTable, new[] { skuColumn }, true);
            var ix_product_variants_skuIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant",
                new[] { "Sku" });
            ix_product_variants_sku.MappedIndexes.Add(ix_product_variants_skuIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_variants_skuIx).Add(ix_product_variants_sku);
            product_variantsTable.Indexes.Add("ix_product_variants_sku", ix_product_variants_sku);
            relationalModel.Tables.Add(("product_variants", null), product_variantsTable);
            var product_variantsTableMapping = new TableMapping(price, product_variantsTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            product_variantsTable.AddTypeMapping(product_variantsTableMapping, true);
            tableMappings2.Add(product_variantsTableMapping);
            product_variantsTable.AddRowInternalForeignKey(price, RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.Price",
                new[] { "ProductVariantId" },
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn2, price.FindProperty("ProductVariantId")!, product_variantsTableMapping);
            RelationalModel.CreateColumnMapping(price_discount_priceColumn, price.FindProperty("DiscountPrice")!, product_variantsTableMapping);
            RelationalModel.CreateColumnMapping(price_original_priceColumn, price.FindProperty("OriginalPrice")!, product_variantsTableMapping);

            var product = FindEntityType("Ecommerce.Catalog.Domain.ProductAggregate.Product")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var ecommerceCatalogDomainProductAggregateProductTableBase = new TableBase("Ecommerce.Catalog.Domain.ProductAggregate.Product", null, relationalModel);
            var average_ratingColumnBase = new ColumnBase<ColumnMappingBase>("average_rating", "double precision", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("average_rating", average_ratingColumnBase);
            var brand_idColumnBase = new ColumnBase<ColumnMappingBase>("brand_id", "bigint", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("brand_id", brand_idColumnBase);
            var created_atColumnBase1 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("created_at", created_atColumnBase1);
            var descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("description", "character varying(1000)", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("description", descriptionColumnBase1);
            var gtinColumnBase = new ColumnBase<ColumnMappingBase>("gtin", "character varying(50)", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("gtin", gtinColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "uuid", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("id", idColumnBase3);
            var is_deletedColumnBase1 = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("is_deleted", is_deletedColumnBase1);
            var is_discontinuedColumnBase = new ColumnBase<ColumnMappingBase>("is_discontinued", "boolean", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("is_discontinued", is_discontinuedColumnBase);
            var is_featuredColumnBase = new ColumnBase<ColumnMappingBase>("is_featured", "boolean", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("is_featured", is_featuredColumnBase);
            var is_publishedColumnBase0 = new ColumnBase<ColumnMappingBase>("is_published", "boolean", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("is_published", is_publishedColumnBase0);
            var last_modified_atColumnBase1 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase1);
            var meta_descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("meta_description", "character varying(255)", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("meta_description", meta_descriptionColumnBase1);
            var meta_keywordsColumnBase1 = new ColumnBase<ColumnMappingBase>("meta_keywords", "character varying(255)", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("meta_keywords", meta_keywordsColumnBase1);
            var meta_titleColumnBase1 = new ColumnBase<ColumnMappingBase>("meta_title", "character varying(255)", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("meta_title", meta_titleColumnBase1);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("name", nameColumnBase1);
            var search_vectorColumnBase = new ColumnBase<ColumnMappingBase>("search_vector", "tsvector", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("search_vector", search_vectorColumnBase);
            var short_descriptionColumnBase = new ColumnBase<ColumnMappingBase>("short_description", "character varying(500)", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("short_description", short_descriptionColumnBase);
            var slugColumnBase1 = new ColumnBase<ColumnMappingBase>("slug", "character varying(255)", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("slug", slugColumnBase1);
            var specificationColumnBase = new ColumnBase<ColumnMappingBase>("specification", "character varying(5000)", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("specification", specificationColumnBase);
            var tax_idColumnBase = new ColumnBase<ColumnMappingBase>("tax_id", "uuid", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("tax_id", tax_idColumnBase);
            var thumbnail_idColumnBase1 = new ColumnBase<ColumnMappingBase>("thumbnail_id", "uuid", ecommerceCatalogDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("thumbnail_id", thumbnail_idColumnBase1);
            var total_reviewsColumnBase = new ColumnBase<ColumnMappingBase>("total_reviews", "integer", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("total_reviews", total_reviewsColumnBase);
            var versionColumnBase1 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceCatalogDomainProductAggregateProductTableBase);
            ecommerceCatalogDomainProductAggregateProductTableBase.Columns.Add("version", versionColumnBase1);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.ProductAggregate.Product", ecommerceCatalogDomainProductAggregateProductTableBase);
            var ecommerceCatalogDomainProductAggregateProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, ecommerceCatalogDomainProductAggregateProductTableBase, true);
            ecommerceCatalogDomainProductAggregateProductTableBase.AddTypeMapping(ecommerceCatalogDomainProductAggregateProductMappingBase, false);
            defaultTableMappings3.Add(ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, product.FindProperty("Id")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)average_ratingColumnBase, product.FindProperty("AverageRating")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)brand_idColumnBase, product.FindProperty("BrandId")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase1, product.FindProperty("CreatedAt")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase1, product.FindProperty("Description")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gtinColumnBase, product.FindProperty("Gtin")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase1, product.FindProperty("IsDeleted")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_discontinuedColumnBase, product.FindProperty("IsDiscontinued")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_featuredColumnBase, product.FindProperty("IsFeatured")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_publishedColumnBase0, product.FindProperty("IsPublished")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase1, product.FindProperty("LastModifiedAt")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_descriptionColumnBase1, product.FindProperty("MetaDescription")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_keywordsColumnBase1, product.FindProperty("MetaKeywords")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)meta_titleColumnBase1, product.FindProperty("MetaTitle")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, product.FindProperty("Name")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)search_vectorColumnBase, product.FindProperty("SearchVector")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)short_descriptionColumnBase, product.FindProperty("ShortDescription")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase1, product.FindProperty("Slug")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)specificationColumnBase, product.FindProperty("Specification")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tax_idColumnBase, product.FindProperty("TaxId")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)thumbnail_idColumnBase1, product.FindProperty("ThumbnailId")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)total_reviewsColumnBase, product.FindProperty("TotalReviews")!, ecommerceCatalogDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase1, product.FindProperty("Version")!, ecommerceCatalogDomainProductAggregateProductMappingBase);

            var tableMappings3 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var productsTable = new Table("products", null, relationalModel);
            var idColumn3 = new Column("id", "uuid", productsTable);
            productsTable.Columns.Add("id", idColumn3);
            var average_ratingColumn = new Column("average_rating", "double precision", productsTable);
            productsTable.Columns.Add("average_rating", average_ratingColumn);
            var brand_idColumn = new Column("brand_id", "bigint", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("brand_id", brand_idColumn);
            var created_atColumn1 = new Column("created_at", "timestamp with time zone", productsTable);
            productsTable.Columns.Add("created_at", created_atColumn1);
            var descriptionColumn1 = new Column("description", "character varying(1000)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("description", descriptionColumn1);
            var gtinColumn = new Column("gtin", "character varying(50)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("gtin", gtinColumn);
            var is_deletedColumn1 = new Column("is_deleted", "boolean", productsTable);
            productsTable.Columns.Add("is_deleted", is_deletedColumn1);
            var is_discontinuedColumn = new Column("is_discontinued", "boolean", productsTable);
            productsTable.Columns.Add("is_discontinued", is_discontinuedColumn);
            var is_featuredColumn = new Column("is_featured", "boolean", productsTable);
            productsTable.Columns.Add("is_featured", is_featuredColumn);
            var is_publishedColumn0 = new Column("is_published", "boolean", productsTable);
            productsTable.Columns.Add("is_published", is_publishedColumn0);
            var last_modified_atColumn1 = new Column("last_modified_at", "timestamp with time zone", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("last_modified_at", last_modified_atColumn1);
            var meta_descriptionColumn1 = new Column("meta_description", "character varying(255)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("meta_description", meta_descriptionColumn1);
            var meta_keywordsColumn1 = new Column("meta_keywords", "character varying(255)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("meta_keywords", meta_keywordsColumn1);
            var meta_titleColumn1 = new Column("meta_title", "character varying(255)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("meta_title", meta_titleColumn1);
            var nameColumn1 = new Column("name", "character varying(255)", productsTable);
            productsTable.Columns.Add("name", nameColumn1);
            var search_vectorColumn = new Column("search_vector", "tsvector", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("search_vector", search_vectorColumn);
            var short_descriptionColumn = new Column("short_description", "character varying(500)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("short_description", short_descriptionColumn);
            var slugColumn1 = new Column("slug", "character varying(255)", productsTable);
            productsTable.Columns.Add("slug", slugColumn1);
            var specificationColumn = new Column("specification", "character varying(5000)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("specification", specificationColumn);
            var tax_idColumn = new Column("tax_id", "uuid", productsTable);
            productsTable.Columns.Add("tax_id", tax_idColumn);
            var thumbnail_idColumn1 = new Column("thumbnail_id", "uuid", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("thumbnail_id", thumbnail_idColumn1);
            var total_reviewsColumn = new Column("total_reviews", "integer", productsTable);
            productsTable.Columns.Add("total_reviews", total_reviewsColumn);
            var versionColumn1 = new Column("version", "uuid", productsTable);
            productsTable.Columns.Add("version", versionColumn1);
            var pk_products = new UniqueConstraint("pk_products", productsTable, new[] { idColumn3 });
            productsTable.PrimaryKey = pk_products;
            var pk_productsUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Id" });
            pk_products.MappedKeys.Add(pk_productsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_productsUc).Add(pk_products);
            productsTable.UniqueConstraints.Add("pk_products", pk_products);
            var ix_products_brand_id = new TableIndex(
            "ix_products_brand_id", productsTable, new[] { brand_idColumn }, false);
            var ix_products_brand_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "BrandId" });
            ix_products_brand_id.MappedIndexes.Add(ix_products_brand_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_products_brand_idIx).Add(ix_products_brand_id);
            productsTable.Indexes.Add("ix_products_brand_id", ix_products_brand_id);
            var ix_products_search_vector = new TableIndex(
            "ix_products_search_vector", productsTable, new[] { search_vectorColumn }, false);
            var ix_products_search_vectorIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "SearchVector" });
            ix_products_search_vector.MappedIndexes.Add(ix_products_search_vectorIx);
            RelationalModel.GetOrCreateTableIndexes(ix_products_search_vectorIx).Add(ix_products_search_vector);
            productsTable.Indexes.Add("ix_products_search_vector", ix_products_search_vector);
            var ix_products_slug = new TableIndex(
            "ix_products_slug", productsTable, new[] { slugColumn1 }, true);
            var ix_products_slugIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Slug" });
            ix_products_slug.MappedIndexes.Add(ix_products_slugIx);
            RelationalModel.GetOrCreateTableIndexes(ix_products_slugIx).Add(ix_products_slug);
            productsTable.Indexes.Add("ix_products_slug", ix_products_slug);
            relationalModel.Tables.Add(("products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings3.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(average_ratingColumn, product.FindProperty("AverageRating")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(brand_idColumn, product.FindProperty("BrandId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn1, product.FindProperty("CreatedAt")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn1, product.FindProperty("Description")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(gtinColumn, product.FindProperty("Gtin")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn1, product.FindProperty("IsDeleted")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(is_discontinuedColumn, product.FindProperty("IsDiscontinued")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(is_featuredColumn, product.FindProperty("IsFeatured")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(is_publishedColumn0, product.FindProperty("IsPublished")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn1, product.FindProperty("LastModifiedAt")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(meta_descriptionColumn1, product.FindProperty("MetaDescription")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(meta_keywordsColumn1, product.FindProperty("MetaKeywords")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(meta_titleColumn1, product.FindProperty("MetaTitle")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, product.FindProperty("Name")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(search_vectorColumn, product.FindProperty("SearchVector")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(short_descriptionColumn, product.FindProperty("ShortDescription")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn1, product.FindProperty("Slug")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(specificationColumn, product.FindProperty("Specification")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(tax_idColumn, product.FindProperty("TaxId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(thumbnail_idColumn1, product.FindProperty("ThumbnailId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(total_reviewsColumn, product.FindProperty("TotalReviews")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn1, product.FindProperty("Version")!, productsTableMapping);

            var productImage = FindEntityType("Ecommerce.Catalog.Domain.ProductAggregate.ProductImage")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            productImage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var ecommerceCatalogDomainProductAggregateProductImageTableBase = new TableBase("Ecommerce.Catalog.Domain.ProductAggregate.ProductImage", null, relationalModel);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainProductAggregateProductImageTableBase);
            ecommerceCatalogDomainProductAggregateProductImageTableBase.Columns.Add("id", idColumnBase4);
            var image_idColumnBase = new ColumnBase<ColumnMappingBase>("image_id", "uuid", ecommerceCatalogDomainProductAggregateProductImageTableBase);
            ecommerceCatalogDomainProductAggregateProductImageTableBase.Columns.Add("image_id", image_idColumnBase);
            var product_idColumnBase0 = new ColumnBase<ColumnMappingBase>("product_id", "uuid", ecommerceCatalogDomainProductAggregateProductImageTableBase);
            ecommerceCatalogDomainProductAggregateProductImageTableBase.Columns.Add("product_id", product_idColumnBase0);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.ProductAggregate.ProductImage", ecommerceCatalogDomainProductAggregateProductImageTableBase);
            var ecommerceCatalogDomainProductAggregateProductImageMappingBase = new TableMappingBase<ColumnMappingBase>(productImage, ecommerceCatalogDomainProductAggregateProductImageTableBase, true);
            ecommerceCatalogDomainProductAggregateProductImageTableBase.AddTypeMapping(ecommerceCatalogDomainProductAggregateProductImageMappingBase, false);
            defaultTableMappings4.Add(ecommerceCatalogDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, productImage.FindProperty("Id")!, ecommerceCatalogDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase0, productImage.FindProperty("ProductId")!, ecommerceCatalogDomainProductAggregateProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)image_idColumnBase, productImage.FindProperty("ImageId")!, ecommerceCatalogDomainProductAggregateProductImageMappingBase);

            var tableMappings4 = new List<TableMapping>();
            productImage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var product_imagesTable = new Table("product_images", null, relationalModel);
            var idColumn4 = new Column("id", "bigint", product_imagesTable);
            product_imagesTable.Columns.Add("id", idColumn4);
            idColumn4.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var product_idColumn1 = new Column("product_id", "uuid", product_imagesTable);
            product_imagesTable.Columns.Add("product_id", product_idColumn1);
            var image_idColumn = new Column("image_id", "uuid", product_imagesTable);
            product_imagesTable.Columns.Add("image_id", image_idColumn);
            var pk_product_images = new UniqueConstraint("pk_product_images", product_imagesTable, new[] { idColumn4, product_idColumn1 });
            product_imagesTable.PrimaryKey = pk_product_images;
            var pk_product_imagesUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductImage",
                new[] { "Id", "ProductId" });
            pk_product_images.MappedKeys.Add(pk_product_imagesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_imagesUc).Add(pk_product_images);
            product_imagesTable.UniqueConstraints.Add("pk_product_images", pk_product_images);
            var ix_product_images_product_id = new TableIndex(
            "ix_product_images_product_id", product_imagesTable, new[] { product_idColumn1 }, false);
            var ix_product_images_product_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductImage",
                new[] { "ProductId" });
            ix_product_images_product_id.MappedIndexes.Add(ix_product_images_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_images_product_idIx).Add(ix_product_images_product_id);
            product_imagesTable.Indexes.Add("ix_product_images_product_id", ix_product_images_product_id);
            relationalModel.Tables.Add(("product_images", null), product_imagesTable);
            var product_imagesTableMapping = new TableMapping(productImage, product_imagesTable, true);
            product_imagesTable.AddTypeMapping(product_imagesTableMapping, false);
            tableMappings4.Add(product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, productImage.FindProperty("Id")!, product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn1, productImage.FindProperty("ProductId")!, product_imagesTableMapping);
            RelationalModel.CreateColumnMapping(image_idColumn, productImage.FindProperty("ImageId")!, product_imagesTableMapping);

            var productRelated = FindEntityType("Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            productRelated.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var ecommerceCatalogDomainProductAggregateProductRelatedTableBase = new TableBase("Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated", null, relationalModel);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainProductAggregateProductRelatedTableBase);
            ecommerceCatalogDomainProductAggregateProductRelatedTableBase.Columns.Add("id", idColumnBase5);
            var product_idColumnBase1 = new ColumnBase<ColumnMappingBase>("product_id", "uuid", ecommerceCatalogDomainProductAggregateProductRelatedTableBase);
            ecommerceCatalogDomainProductAggregateProductRelatedTableBase.Columns.Add("product_id", product_idColumnBase1);
            var related_product_idColumnBase = new ColumnBase<ColumnMappingBase>("related_product_id", "uuid", ecommerceCatalogDomainProductAggregateProductRelatedTableBase);
            ecommerceCatalogDomainProductAggregateProductRelatedTableBase.Columns.Add("related_product_id", related_product_idColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated", ecommerceCatalogDomainProductAggregateProductRelatedTableBase);
            var ecommerceCatalogDomainProductAggregateProductRelatedMappingBase = new TableMappingBase<ColumnMappingBase>(productRelated, ecommerceCatalogDomainProductAggregateProductRelatedTableBase, true);
            ecommerceCatalogDomainProductAggregateProductRelatedTableBase.AddTypeMapping(ecommerceCatalogDomainProductAggregateProductRelatedMappingBase, false);
            defaultTableMappings5.Add(ecommerceCatalogDomainProductAggregateProductRelatedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, productRelated.FindProperty("Id")!, ecommerceCatalogDomainProductAggregateProductRelatedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase1, productRelated.FindProperty("ProductId")!, ecommerceCatalogDomainProductAggregateProductRelatedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)related_product_idColumnBase, productRelated.FindProperty("RelatedProductId")!, ecommerceCatalogDomainProductAggregateProductRelatedMappingBase);

            var tableMappings5 = new List<TableMapping>();
            productRelated.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var product_relatedsTable = new Table("product_relateds", null, relationalModel);
            var idColumn5 = new Column("id", "bigint", product_relatedsTable);
            product_relatedsTable.Columns.Add("id", idColumn5);
            idColumn5.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var product_idColumn2 = new Column("product_id", "uuid", product_relatedsTable);
            product_relatedsTable.Columns.Add("product_id", product_idColumn2);
            var related_product_idColumn = new Column("related_product_id", "uuid", product_relatedsTable);
            product_relatedsTable.Columns.Add("related_product_id", related_product_idColumn);
            var pk_product_relateds = new UniqueConstraint("pk_product_relateds", product_relatedsTable, new[] { idColumn5 });
            product_relatedsTable.PrimaryKey = pk_product_relateds;
            var pk_product_relatedsUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated",
                new[] { "Id" });
            pk_product_relateds.MappedKeys.Add(pk_product_relatedsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_relatedsUc).Add(pk_product_relateds);
            product_relatedsTable.UniqueConstraints.Add("pk_product_relateds", pk_product_relateds);
            var ix_product_relateds_product_id = new TableIndex(
            "ix_product_relateds_product_id", product_relatedsTable, new[] { product_idColumn2 }, false);
            var ix_product_relateds_product_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated",
                new[] { "ProductId" });
            ix_product_relateds_product_id.MappedIndexes.Add(ix_product_relateds_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_relateds_product_idIx).Add(ix_product_relateds_product_id);
            product_relatedsTable.Indexes.Add("ix_product_relateds_product_id", ix_product_relateds_product_id);
            var ix_product_relateds_related_product_id = new TableIndex(
            "ix_product_relateds_related_product_id", product_relatedsTable, new[] { related_product_idColumn }, false);
            var ix_product_relateds_related_product_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated",
                new[] { "RelatedProductId" });
            ix_product_relateds_related_product_id.MappedIndexes.Add(ix_product_relateds_related_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_relateds_related_product_idIx).Add(ix_product_relateds_related_product_id);
            product_relatedsTable.Indexes.Add("ix_product_relateds_related_product_id", ix_product_relateds_related_product_id);
            relationalModel.Tables.Add(("product_relateds", null), product_relatedsTable);
            var product_relatedsTableMapping = new TableMapping(productRelated, product_relatedsTable, true);
            product_relatedsTable.AddTypeMapping(product_relatedsTableMapping, false);
            tableMappings5.Add(product_relatedsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, productRelated.FindProperty("Id")!, product_relatedsTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn2, productRelated.FindProperty("ProductId")!, product_relatedsTableMapping);
            RelationalModel.CreateColumnMapping(related_product_idColumn, productRelated.FindProperty("RelatedProductId")!, product_relatedsTableMapping);

            var productAttribute = FindEntityType("Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttribute")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            productAttribute.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase = new TableBase("Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttribute", null, relationalModel);
            var attribute_group_idColumnBase = new ColumnBase<ColumnMappingBase>("attribute_group_id", "bigint", ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase.Columns.Add("attribute_group_id", attribute_group_idColumnBase);
            var created_atColumnBase2 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase.Columns.Add("created_at", created_atColumnBase2);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase.Columns.Add("id", idColumnBase6);
            var last_modified_atColumnBase2 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase2);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase.Columns.Add("name", nameColumnBase2);
            var versionColumnBase2 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase.Columns.Add("version", versionColumnBase2);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttribute", ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase);
            var ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase = new TableMappingBase<ColumnMappingBase>(productAttribute, ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase, true);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeTableBase.AddTypeMapping(ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase, false);
            defaultTableMappings6.Add(ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, productAttribute.FindProperty("Id")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attribute_group_idColumnBase, productAttribute.FindProperty("AttributeGroupId")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase2, productAttribute.FindProperty("CreatedAt")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase2, productAttribute.FindProperty("LastModifiedAt")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, productAttribute.FindProperty("Name")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase2, productAttribute.FindProperty("Version")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeMappingBase);

            var tableMappings6 = new List<TableMapping>();
            productAttribute.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var product_attributesTable = new Table("product_attributes", null, relationalModel);
            var idColumn6 = new Column("id", "bigint", product_attributesTable);
            product_attributesTable.Columns.Add("id", idColumn6);
            idColumn6.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var attribute_group_idColumn = new Column("attribute_group_id", "bigint", product_attributesTable)
            {
                IsNullable = true
            };
            product_attributesTable.Columns.Add("attribute_group_id", attribute_group_idColumn);
            var created_atColumn2 = new Column("created_at", "timestamp with time zone", product_attributesTable);
            product_attributesTable.Columns.Add("created_at", created_atColumn2);
            var last_modified_atColumn2 = new Column("last_modified_at", "timestamp with time zone", product_attributesTable)
            {
                IsNullable = true
            };
            product_attributesTable.Columns.Add("last_modified_at", last_modified_atColumn2);
            var nameColumn2 = new Column("name", "character varying(255)", product_attributesTable);
            product_attributesTable.Columns.Add("name", nameColumn2);
            var versionColumn2 = new Column("version", "uuid", product_attributesTable);
            product_attributesTable.Columns.Add("version", versionColumn2);
            var pk_product_attributes = new UniqueConstraint("pk_product_attributes", product_attributesTable, new[] { idColumn6 });
            product_attributesTable.PrimaryKey = pk_product_attributes;
            var pk_product_attributesUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttribute",
                new[] { "Id" });
            pk_product_attributes.MappedKeys.Add(pk_product_attributesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_attributesUc).Add(pk_product_attributes);
            product_attributesTable.UniqueConstraints.Add("pk_product_attributes", pk_product_attributes);
            var ix_product_attributes_attribute_group_id = new TableIndex(
            "ix_product_attributes_attribute_group_id", product_attributesTable, new[] { attribute_group_idColumn }, false);
            var ix_product_attributes_attribute_group_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttribute",
                new[] { "AttributeGroupId" });
            ix_product_attributes_attribute_group_id.MappedIndexes.Add(ix_product_attributes_attribute_group_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_attributes_attribute_group_idIx).Add(ix_product_attributes_attribute_group_id);
            product_attributesTable.Indexes.Add("ix_product_attributes_attribute_group_id", ix_product_attributes_attribute_group_id);
            relationalModel.Tables.Add(("product_attributes", null), product_attributesTable);
            var product_attributesTableMapping = new TableMapping(productAttribute, product_attributesTable, true);
            product_attributesTable.AddTypeMapping(product_attributesTableMapping, false);
            tableMappings6.Add(product_attributesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, productAttribute.FindProperty("Id")!, product_attributesTableMapping);
            RelationalModel.CreateColumnMapping(attribute_group_idColumn, productAttribute.FindProperty("AttributeGroupId")!, product_attributesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn2, productAttribute.FindProperty("CreatedAt")!, product_attributesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn2, productAttribute.FindProperty("LastModifiedAt")!, product_attributesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, productAttribute.FindProperty("Name")!, product_attributesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn2, productAttribute.FindProperty("Version")!, product_attributesTableMapping);

            var productAttributeCombination = FindEntityType("Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            productAttributeCombination.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase = new TableBase("Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination", null, relationalModel);
            var attribute_idColumnBase = new ColumnBase<ColumnMappingBase>("attribute_id", "bigint", ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase.Columns.Add("attribute_id", attribute_idColumnBase);
            var display_orderColumnBase1 = new ColumnBase<ColumnMappingBase>("display_order", "integer", ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase.Columns.Add("display_order", display_orderColumnBase1);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase.Columns.Add("id", idColumnBase7);
            var product_idColumnBase2 = new ColumnBase<ColumnMappingBase>("product_id", "uuid", ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase.Columns.Add("product_id", product_idColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "character varying(1000)", ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination", ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase);
            var ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase = new TableMappingBase<ColumnMappingBase>(productAttributeCombination, ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase, true);
            ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationTableBase.AddTypeMapping(ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase, false);
            defaultTableMappings7.Add(ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, productAttributeCombination.FindProperty("Id")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attribute_idColumnBase, productAttributeCombination.FindProperty("AttributeId")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)display_orderColumnBase1, productAttributeCombination.FindProperty("DisplayOrder")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase2, productAttributeCombination.FindProperty("ProductId")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, productAttributeCombination.FindProperty("Value")!, ecommerceCatalogDomainProductAttributeAggregateProductAttributeCombinationMappingBase);

            var tableMappings7 = new List<TableMapping>();
            productAttributeCombination.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var product_attribute_combinationsTable = new Table("product_attribute_combinations", null, relationalModel);
            var idColumn7 = new Column("id", "bigint", product_attribute_combinationsTable);
            product_attribute_combinationsTable.Columns.Add("id", idColumn7);
            idColumn7.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var attribute_idColumn = new Column("attribute_id", "bigint", product_attribute_combinationsTable);
            product_attribute_combinationsTable.Columns.Add("attribute_id", attribute_idColumn);
            var display_orderColumn2 = new Column("display_order", "integer", product_attribute_combinationsTable);
            product_attribute_combinationsTable.Columns.Add("display_order", display_orderColumn2);
            var product_idColumn3 = new Column("product_id", "uuid", product_attribute_combinationsTable);
            product_attribute_combinationsTable.Columns.Add("product_id", product_idColumn3);
            var valueColumn = new Column("value", "character varying(1000)", product_attribute_combinationsTable);
            product_attribute_combinationsTable.Columns.Add("value", valueColumn);
            var pk_product_attribute_combinations = new UniqueConstraint("pk_product_attribute_combinations", product_attribute_combinationsTable, new[] { idColumn7 });
            product_attribute_combinationsTable.PrimaryKey = pk_product_attribute_combinations;
            var pk_product_attribute_combinationsUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination",
                new[] { "Id" });
            pk_product_attribute_combinations.MappedKeys.Add(pk_product_attribute_combinationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_attribute_combinationsUc).Add(pk_product_attribute_combinations);
            product_attribute_combinationsTable.UniqueConstraints.Add("pk_product_attribute_combinations", pk_product_attribute_combinations);
            var ix_product_attribute_combinations_attribute_id = new TableIndex(
            "ix_product_attribute_combinations_attribute_id", product_attribute_combinationsTable, new[] { attribute_idColumn }, false);
            var ix_product_attribute_combinations_attribute_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination",
                new[] { "AttributeId" });
            ix_product_attribute_combinations_attribute_id.MappedIndexes.Add(ix_product_attribute_combinations_attribute_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_attribute_combinations_attribute_idIx).Add(ix_product_attribute_combinations_attribute_id);
            product_attribute_combinationsTable.Indexes.Add("ix_product_attribute_combinations_attribute_id", ix_product_attribute_combinations_attribute_id);
            var ix_product_attribute_combinations_product_id = new TableIndex(
            "ix_product_attribute_combinations_product_id", product_attribute_combinationsTable, new[] { product_idColumn3 }, false);
            var ix_product_attribute_combinations_product_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination",
                new[] { "ProductId" });
            ix_product_attribute_combinations_product_id.MappedIndexes.Add(ix_product_attribute_combinations_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_attribute_combinations_product_idIx).Add(ix_product_attribute_combinations_product_id);
            product_attribute_combinationsTable.Indexes.Add("ix_product_attribute_combinations_product_id", ix_product_attribute_combinations_product_id);
            relationalModel.Tables.Add(("product_attribute_combinations", null), product_attribute_combinationsTable);
            var product_attribute_combinationsTableMapping = new TableMapping(productAttributeCombination, product_attribute_combinationsTable, true);
            product_attribute_combinationsTable.AddTypeMapping(product_attribute_combinationsTableMapping, false);
            tableMappings7.Add(product_attribute_combinationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, productAttributeCombination.FindProperty("Id")!, product_attribute_combinationsTableMapping);
            RelationalModel.CreateColumnMapping(attribute_idColumn, productAttributeCombination.FindProperty("AttributeId")!, product_attribute_combinationsTableMapping);
            RelationalModel.CreateColumnMapping(display_orderColumn2, productAttributeCombination.FindProperty("DisplayOrder")!, product_attribute_combinationsTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn3, productAttributeCombination.FindProperty("ProductId")!, product_attribute_combinationsTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, productAttributeCombination.FindProperty("Value")!, product_attribute_combinationsTableMapping);

            var productAttributeGroup = FindEntityType("Ecommerce.Catalog.Domain.ProductAttributeGroupAggregate.ProductAttributeGroup")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            productAttributeGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase = new TableBase("Ecommerce.Catalog.Domain.ProductAttributeGroupAggregate.ProductAttributeGroup", null, relationalModel);
            var created_atColumnBase3 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase);
            ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase.Columns.Add("created_at", created_atColumnBase3);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase);
            ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase.Columns.Add("id", idColumnBase8);
            var last_modified_atColumnBase3 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase3);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase);
            ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase.Columns.Add("name", nameColumnBase3);
            var versionColumnBase3 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase);
            ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase.Columns.Add("version", versionColumnBase3);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.ProductAttributeGroupAggregate.ProductAttributeGroup", ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase);
            var ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase = new TableMappingBase<ColumnMappingBase>(productAttributeGroup, ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase, true);
            ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupTableBase.AddTypeMapping(ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase, false);
            defaultTableMappings8.Add(ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, productAttributeGroup.FindProperty("Id")!, ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase3, productAttributeGroup.FindProperty("CreatedAt")!, ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase3, productAttributeGroup.FindProperty("LastModifiedAt")!, ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, productAttributeGroup.FindProperty("Name")!, ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase3, productAttributeGroup.FindProperty("Version")!, ecommerceCatalogDomainProductAttributeGroupAggregateProductAttributeGroupMappingBase);

            var tableMappings8 = new List<TableMapping>();
            productAttributeGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var product_attribute_groupsTable = new Table("product_attribute_groups", null, relationalModel);
            var idColumn8 = new Column("id", "bigint", product_attribute_groupsTable);
            product_attribute_groupsTable.Columns.Add("id", idColumn8);
            idColumn8.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var created_atColumn3 = new Column("created_at", "timestamp with time zone", product_attribute_groupsTable);
            product_attribute_groupsTable.Columns.Add("created_at", created_atColumn3);
            var last_modified_atColumn3 = new Column("last_modified_at", "timestamp with time zone", product_attribute_groupsTable)
            {
                IsNullable = true
            };
            product_attribute_groupsTable.Columns.Add("last_modified_at", last_modified_atColumn3);
            var nameColumn3 = new Column("name", "character varying(255)", product_attribute_groupsTable);
            product_attribute_groupsTable.Columns.Add("name", nameColumn3);
            var versionColumn3 = new Column("version", "uuid", product_attribute_groupsTable);
            product_attribute_groupsTable.Columns.Add("version", versionColumn3);
            var pk_product_attribute_groups = new UniqueConstraint("pk_product_attribute_groups", product_attribute_groupsTable, new[] { idColumn8 });
            product_attribute_groupsTable.PrimaryKey = pk_product_attribute_groups;
            var pk_product_attribute_groupsUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.ProductAttributeGroupAggregate.ProductAttributeGroup",
                new[] { "Id" });
            pk_product_attribute_groups.MappedKeys.Add(pk_product_attribute_groupsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_attribute_groupsUc).Add(pk_product_attribute_groups);
            product_attribute_groupsTable.UniqueConstraints.Add("pk_product_attribute_groups", pk_product_attribute_groups);
            var ix_product_attribute_groups_name = new TableIndex(
            "ix_product_attribute_groups_name", product_attribute_groupsTable, new[] { nameColumn3 }, true);
            var ix_product_attribute_groups_nameIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.ProductAttributeGroupAggregate.ProductAttributeGroup",
                new[] { "Name" });
            ix_product_attribute_groups_name.MappedIndexes.Add(ix_product_attribute_groups_nameIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_attribute_groups_nameIx).Add(ix_product_attribute_groups_name);
            product_attribute_groupsTable.Indexes.Add("ix_product_attribute_groups_name", ix_product_attribute_groups_name);
            relationalModel.Tables.Add(("product_attribute_groups", null), product_attribute_groupsTable);
            var product_attribute_groupsTableMapping = new TableMapping(productAttributeGroup, product_attribute_groupsTable, true);
            product_attribute_groupsTable.AddTypeMapping(product_attribute_groupsTableMapping, false);
            tableMappings8.Add(product_attribute_groupsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, productAttributeGroup.FindProperty("Id")!, product_attribute_groupsTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn3, productAttributeGroup.FindProperty("CreatedAt")!, product_attribute_groupsTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn3, productAttributeGroup.FindProperty("LastModifiedAt")!, product_attribute_groupsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, productAttributeGroup.FindProperty("Name")!, product_attribute_groupsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn3, productAttributeGroup.FindProperty("Version")!, product_attribute_groupsTableMapping);

            var productVariant = FindEntityType("Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            productVariant.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var ecommerceCatalogDomainVariantAggregateProductVariantTableBase = new TableBase("Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant", null, relationalModel);
            var display_orderColumnBase2 = new ColumnBase<ColumnMappingBase>("display_order", "integer", ecommerceCatalogDomainVariantAggregateProductVariantTableBase);
            ecommerceCatalogDomainVariantAggregateProductVariantTableBase.Columns.Add("display_order", display_orderColumnBase2);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainVariantAggregateProductVariantTableBase);
            ecommerceCatalogDomainVariantAggregateProductVariantTableBase.Columns.Add("id", idColumnBase9);
            var product_idColumnBase3 = new ColumnBase<ColumnMappingBase>("product_id", "uuid", ecommerceCatalogDomainVariantAggregateProductVariantTableBase);
            ecommerceCatalogDomainVariantAggregateProductVariantTableBase.Columns.Add("product_id", product_idColumnBase3);
            var skuColumnBase = new ColumnBase<ColumnMappingBase>("sku", "character varying(50)", ecommerceCatalogDomainVariantAggregateProductVariantTableBase);
            ecommerceCatalogDomainVariantAggregateProductVariantTableBase.Columns.Add("sku", skuColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant", ecommerceCatalogDomainVariantAggregateProductVariantTableBase);
            var ecommerceCatalogDomainVariantAggregateProductVariantMappingBase = new TableMappingBase<ColumnMappingBase>(productVariant, ecommerceCatalogDomainVariantAggregateProductVariantTableBase, true);
            ecommerceCatalogDomainVariantAggregateProductVariantTableBase.AddTypeMapping(ecommerceCatalogDomainVariantAggregateProductVariantMappingBase, false);
            defaultTableMappings9.Add(ecommerceCatalogDomainVariantAggregateProductVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, productVariant.FindProperty("Id")!, ecommerceCatalogDomainVariantAggregateProductVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)display_orderColumnBase2, productVariant.FindProperty("DisplayOrder")!, ecommerceCatalogDomainVariantAggregateProductVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase3, productVariant.FindProperty("ProductId")!, ecommerceCatalogDomainVariantAggregateProductVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)skuColumnBase, productVariant.FindProperty("Sku")!, ecommerceCatalogDomainVariantAggregateProductVariantMappingBase);

            var tableMappings9 = new List<TableMapping>();
            productVariant.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var product_variantsTableMapping0 = new TableMapping(productVariant, product_variantsTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            product_variantsTable.AddTypeMapping(product_variantsTableMapping0, false);
            tableMappings9.Add(product_variantsTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn2, productVariant.FindProperty("Id")!, product_variantsTableMapping0);
            RelationalModel.CreateColumnMapping(display_orderColumn1, productVariant.FindProperty("DisplayOrder")!, product_variantsTableMapping0);
            RelationalModel.CreateColumnMapping(product_idColumn0, productVariant.FindProperty("ProductId")!, product_variantsTableMapping0);
            RelationalModel.CreateColumnMapping(skuColumn, productVariant.FindProperty("Sku")!, product_variantsTableMapping0);

            var productVariantCombination = FindEntityType("Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            productVariantCombination.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase = new TableBase("Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination", null, relationalModel);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase);
            ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase.Columns.Add("id", idColumnBase10);
            var product_variant_idColumnBase = new ColumnBase<ColumnMappingBase>("product_variant_id", "bigint", ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase);
            ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase.Columns.Add("product_variant_id", product_variant_idColumnBase);
            var variant_idColumnBase = new ColumnBase<ColumnMappingBase>("variant_id", "bigint", ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase);
            ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase.Columns.Add("variant_id", variant_idColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination", ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase);
            var ecommerceCatalogDomainVariantAggregateProductVariantCombinationMappingBase = new TableMappingBase<ColumnMappingBase>(productVariantCombination, ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase, true);
            ecommerceCatalogDomainVariantAggregateProductVariantCombinationTableBase.AddTypeMapping(ecommerceCatalogDomainVariantAggregateProductVariantCombinationMappingBase, false);
            defaultTableMappings10.Add(ecommerceCatalogDomainVariantAggregateProductVariantCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, productVariantCombination.FindProperty("Id")!, ecommerceCatalogDomainVariantAggregateProductVariantCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_variant_idColumnBase, productVariantCombination.FindProperty("ProductVariantId")!, ecommerceCatalogDomainVariantAggregateProductVariantCombinationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)variant_idColumnBase, productVariantCombination.FindProperty("VariantId")!, ecommerceCatalogDomainVariantAggregateProductVariantCombinationMappingBase);

            var tableMappings10 = new List<TableMapping>();
            productVariantCombination.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var product_variant_combinationTable = new Table("product_variant_combination", null, relationalModel);
            var idColumn9 = new Column("id", "bigint", product_variant_combinationTable);
            product_variant_combinationTable.Columns.Add("id", idColumn9);
            idColumn9.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var product_variant_idColumn = new Column("product_variant_id", "bigint", product_variant_combinationTable);
            product_variant_combinationTable.Columns.Add("product_variant_id", product_variant_idColumn);
            var variant_idColumn = new Column("variant_id", "bigint", product_variant_combinationTable);
            product_variant_combinationTable.Columns.Add("variant_id", variant_idColumn);
            var pk_product_variant_combination = new UniqueConstraint("pk_product_variant_combination", product_variant_combinationTable, new[] { idColumn9 });
            product_variant_combinationTable.PrimaryKey = pk_product_variant_combination;
            var pk_product_variant_combinationUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination",
                new[] { "Id" });
            pk_product_variant_combination.MappedKeys.Add(pk_product_variant_combinationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_product_variant_combinationUc).Add(pk_product_variant_combination);
            product_variant_combinationTable.UniqueConstraints.Add("pk_product_variant_combination", pk_product_variant_combination);
            var ix_product_variant_combination_product_variant_id = new TableIndex(
            "ix_product_variant_combination_product_variant_id", product_variant_combinationTable, new[] { product_variant_idColumn }, false);
            var ix_product_variant_combination_product_variant_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination",
                new[] { "ProductVariantId" });
            ix_product_variant_combination_product_variant_id.MappedIndexes.Add(ix_product_variant_combination_product_variant_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_variant_combination_product_variant_idIx).Add(ix_product_variant_combination_product_variant_id);
            product_variant_combinationTable.Indexes.Add("ix_product_variant_combination_product_variant_id", ix_product_variant_combination_product_variant_id);
            var ix_product_variant_combination_variant_id = new TableIndex(
            "ix_product_variant_combination_variant_id", product_variant_combinationTable, new[] { variant_idColumn }, false);
            var ix_product_variant_combination_variant_idIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination",
                new[] { "VariantId" });
            ix_product_variant_combination_variant_id.MappedIndexes.Add(ix_product_variant_combination_variant_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_product_variant_combination_variant_idIx).Add(ix_product_variant_combination_variant_id);
            product_variant_combinationTable.Indexes.Add("ix_product_variant_combination_variant_id", ix_product_variant_combination_variant_id);
            relationalModel.Tables.Add(("product_variant_combination", null), product_variant_combinationTable);
            var product_variant_combinationTableMapping = new TableMapping(productVariantCombination, product_variant_combinationTable, true);
            product_variant_combinationTable.AddTypeMapping(product_variant_combinationTableMapping, false);
            tableMappings10.Add(product_variant_combinationTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, productVariantCombination.FindProperty("Id")!, product_variant_combinationTableMapping);
            RelationalModel.CreateColumnMapping(product_variant_idColumn, productVariantCombination.FindProperty("ProductVariantId")!, product_variant_combinationTableMapping);
            RelationalModel.CreateColumnMapping(variant_idColumn, productVariantCombination.FindProperty("VariantId")!, product_variant_combinationTableMapping);

            var variant = FindEntityType("Ecommerce.Catalog.Domain.VariantAggregate.Variant")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            variant.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var ecommerceCatalogDomainVariantAggregateVariantTableBase = new TableBase("Ecommerce.Catalog.Domain.VariantAggregate.Variant", null, relationalModel);
            var created_atColumnBase4 = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceCatalogDomainVariantAggregateVariantTableBase);
            ecommerceCatalogDomainVariantAggregateVariantTableBase.Columns.Add("created_at", created_atColumnBase4);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("id", "bigint", ecommerceCatalogDomainVariantAggregateVariantTableBase);
            ecommerceCatalogDomainVariantAggregateVariantTableBase.Columns.Add("id", idColumnBase11);
            var is_deletedColumnBase2 = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", ecommerceCatalogDomainVariantAggregateVariantTableBase);
            ecommerceCatalogDomainVariantAggregateVariantTableBase.Columns.Add("is_deleted", is_deletedColumnBase2);
            var last_modified_atColumnBase4 = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceCatalogDomainVariantAggregateVariantTableBase)
            {
                IsNullable = true
            };
            ecommerceCatalogDomainVariantAggregateVariantTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase4);
            var nameColumnBase4 = new ColumnBase<ColumnMappingBase>("name", "character varying(255)", ecommerceCatalogDomainVariantAggregateVariantTableBase);
            ecommerceCatalogDomainVariantAggregateVariantTableBase.Columns.Add("name", nameColumnBase4);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "integer", ecommerceCatalogDomainVariantAggregateVariantTableBase);
            ecommerceCatalogDomainVariantAggregateVariantTableBase.Columns.Add("type", typeColumnBase);
            var versionColumnBase4 = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceCatalogDomainVariantAggregateVariantTableBase);
            ecommerceCatalogDomainVariantAggregateVariantTableBase.Columns.Add("version", versionColumnBase4);
            relationalModel.DefaultTables.Add("Ecommerce.Catalog.Domain.VariantAggregate.Variant", ecommerceCatalogDomainVariantAggregateVariantTableBase);
            var ecommerceCatalogDomainVariantAggregateVariantMappingBase = new TableMappingBase<ColumnMappingBase>(variant, ecommerceCatalogDomainVariantAggregateVariantTableBase, true);
            ecommerceCatalogDomainVariantAggregateVariantTableBase.AddTypeMapping(ecommerceCatalogDomainVariantAggregateVariantMappingBase, false);
            defaultTableMappings11.Add(ecommerceCatalogDomainVariantAggregateVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, variant.FindProperty("Id")!, ecommerceCatalogDomainVariantAggregateVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase4, variant.FindProperty("CreatedAt")!, ecommerceCatalogDomainVariantAggregateVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase2, variant.FindProperty("IsDeleted")!, ecommerceCatalogDomainVariantAggregateVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase4, variant.FindProperty("LastModifiedAt")!, ecommerceCatalogDomainVariantAggregateVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase4, variant.FindProperty("Name")!, ecommerceCatalogDomainVariantAggregateVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, variant.FindProperty("Type")!, ecommerceCatalogDomainVariantAggregateVariantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase4, variant.FindProperty("Version")!, ecommerceCatalogDomainVariantAggregateVariantMappingBase);

            var tableMappings11 = new List<TableMapping>();
            variant.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var variantsTable = new Table("variants", null, relationalModel);
            var idColumn10 = new Column("id", "bigint", variantsTable);
            variantsTable.Columns.Add("id", idColumn10);
            idColumn10.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var created_atColumn4 = new Column("created_at", "timestamp with time zone", variantsTable);
            variantsTable.Columns.Add("created_at", created_atColumn4);
            var is_deletedColumn2 = new Column("is_deleted", "boolean", variantsTable);
            variantsTable.Columns.Add("is_deleted", is_deletedColumn2);
            var last_modified_atColumn4 = new Column("last_modified_at", "timestamp with time zone", variantsTable)
            {
                IsNullable = true
            };
            variantsTable.Columns.Add("last_modified_at", last_modified_atColumn4);
            var nameColumn4 = new Column("name", "character varying(255)", variantsTable);
            variantsTable.Columns.Add("name", nameColumn4);
            var typeColumn = new Column("type", "integer", variantsTable);
            variantsTable.Columns.Add("type", typeColumn);
            var versionColumn4 = new Column("version", "uuid", variantsTable);
            variantsTable.Columns.Add("version", versionColumn4);
            var pk_variants = new UniqueConstraint("pk_variants", variantsTable, new[] { idColumn10 });
            variantsTable.PrimaryKey = pk_variants;
            var pk_variantsUc = RelationalModel.GetKey(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.Variant",
                new[] { "Id" });
            pk_variants.MappedKeys.Add(pk_variantsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_variantsUc).Add(pk_variants);
            variantsTable.UniqueConstraints.Add("pk_variants", pk_variants);
            var ix_variants_name_type = new TableIndex(
            "ix_variants_name_type", variantsTable, new[] { nameColumn4, typeColumn }, true);
            var ix_variants_name_typeIx = RelationalModel.GetIndex(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.Variant",
                new[] { "Name", "Type" });
            ix_variants_name_type.MappedIndexes.Add(ix_variants_name_typeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_variants_name_typeIx).Add(ix_variants_name_type);
            variantsTable.Indexes.Add("ix_variants_name_type", ix_variants_name_type);
            relationalModel.Tables.Add(("variants", null), variantsTable);
            var variantsTableMapping = new TableMapping(variant, variantsTable, true);
            variantsTable.AddTypeMapping(variantsTableMapping, false);
            tableMappings11.Add(variantsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, variant.FindProperty("Id")!, variantsTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn4, variant.FindProperty("CreatedAt")!, variantsTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn2, variant.FindProperty("IsDeleted")!, variantsTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn4, variant.FindProperty("LastModifiedAt")!, variantsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn4, variant.FindProperty("Name")!, variantsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, variant.FindProperty("Type")!, variantsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn4, variant.FindProperty("Version")!, variantsTableMapping);

            var inboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.InboxState")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            inboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var massTransitEntityFrameworkCoreIntegrationInboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.InboxState", null, relationalModel);
            var consumedColumnBase = new ColumnBase<ColumnMappingBase>("consumed", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumed", consumedColumnBase);
            var consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumer_id", consumer_idColumnBase);
            var deliveredColumnBase = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("delivered", deliveredColumnBase);
            var expiration_timeColumnBase = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("expiration_time", expiration_timeColumnBase);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("id", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("id", idColumnBase12);
            var last_sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase);
            var lock_idColumnBase = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase);
            var message_idColumnBase = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("message_id", message_idColumnBase);
            var receive_countColumnBase = new ColumnBase<ColumnMappingBase>("receive_count", "integer", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("receive_count", receive_countColumnBase);
            var receivedColumnBase = new ColumnBase<ColumnMappingBase>("received", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("received", receivedColumnBase);
            var row_versionColumnBase = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("row_version", row_versionColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.InboxState", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(inboxState, massTransitEntityFrameworkCoreIntegrationInboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase, false);
            defaultTableMappings12.Add(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, inboxState.FindProperty("Id")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumedColumnBase, inboxState.FindProperty("Consumed")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumer_idColumnBase, inboxState.FindProperty("ConsumerId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase, inboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase, inboxState.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase, inboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase, inboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase, inboxState.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receive_countColumnBase, inboxState.FindProperty("ReceiveCount")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receivedColumnBase, inboxState.FindProperty("Received")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase, inboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);

            var tableMappings12 = new List<TableMapping>();
            inboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var inbox_stateTable = new Table("inbox_state", null, relationalModel);
            var idColumn11 = new Column("id", "bigint", inbox_stateTable);
            inbox_stateTable.Columns.Add("id", idColumn11);
            idColumn11.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var consumedColumn = new Column("consumed", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("consumed", consumedColumn);
            var consumer_idColumn = new Column("consumer_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("consumer_id", consumer_idColumn);
            var deliveredColumn = new Column("delivered", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("delivered", deliveredColumn);
            var expiration_timeColumn = new Column("expiration_time", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("expiration_time", expiration_timeColumn);
            var last_sequence_numberColumn = new Column("last_sequence_number", "bigint", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn);
            var lock_idColumn = new Column("lock_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("lock_id", lock_idColumn);
            var message_idColumn = new Column("message_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("message_id", message_idColumn);
            var receive_countColumn = new Column("receive_count", "integer", inbox_stateTable);
            inbox_stateTable.Columns.Add("receive_count", receive_countColumn);
            var receivedColumn = new Column("received", "timestamp with time zone", inbox_stateTable);
            inbox_stateTable.Columns.Add("received", receivedColumn);
            var row_versionColumn = new Column("row_version", "bytea", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("row_version", row_versionColumn);
            var ak_inbox_state_message_id_consumer_id = new UniqueConstraint("ak_inbox_state_message_id_consumer_id", inbox_stateTable, new[] { message_idColumn, consumer_idColumn });
            var ak_inbox_state_message_id_consumer_idUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "MessageId", "ConsumerId" });
            ak_inbox_state_message_id_consumer_id.MappedKeys.Add(ak_inbox_state_message_id_consumer_idUc);
            RelationalModel.GetOrCreateUniqueConstraints(ak_inbox_state_message_id_consumer_idUc).Add(ak_inbox_state_message_id_consumer_id);
            inbox_stateTable.UniqueConstraints.Add("ak_inbox_state_message_id_consumer_id", ak_inbox_state_message_id_consumer_id);
            var pk_inbox_state = new UniqueConstraint("pk_inbox_state", inbox_stateTable, new[] { idColumn11 });
            inbox_stateTable.PrimaryKey = pk_inbox_state;
            var pk_inbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Id" });
            pk_inbox_state.MappedKeys.Add(pk_inbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_inbox_stateUc).Add(pk_inbox_state);
            inbox_stateTable.UniqueConstraints.Add("pk_inbox_state", pk_inbox_state);
            var ix_inbox_state_delivered = new TableIndex(
            "ix_inbox_state_delivered", inbox_stateTable, new[] { deliveredColumn }, false);
            var ix_inbox_state_deliveredIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Delivered" });
            ix_inbox_state_delivered.MappedIndexes.Add(ix_inbox_state_deliveredIx);
            RelationalModel.GetOrCreateTableIndexes(ix_inbox_state_deliveredIx).Add(ix_inbox_state_delivered);
            inbox_stateTable.Indexes.Add("ix_inbox_state_delivered", ix_inbox_state_delivered);
            relationalModel.Tables.Add(("inbox_state", null), inbox_stateTable);
            var inbox_stateTableMapping = new TableMapping(inboxState, inbox_stateTable, true);
            inbox_stateTable.AddTypeMapping(inbox_stateTableMapping, false);
            tableMappings12.Add(inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, inboxState.FindProperty("Id")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumedColumn, inboxState.FindProperty("Consumed")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumer_idColumn, inboxState.FindProperty("ConsumerId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn, inboxState.FindProperty("Delivered")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn, inboxState.FindProperty("ExpirationTime")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn, inboxState.FindProperty("LastSequenceNumber")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn, inboxState.FindProperty("LockId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn, inboxState.FindProperty("MessageId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receive_countColumn, inboxState.FindProperty("ReceiveCount")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receivedColumn, inboxState.FindProperty("Received")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn, inboxState.FindProperty("RowVersion")!, inbox_stateTableMapping);

            var outboxMessage = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxMessage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", null, relationalModel);
            var bodyColumnBase = new ColumnBase<ColumnMappingBase>("body", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("body", bodyColumnBase);
            var content_typeColumnBase = new ColumnBase<ColumnMappingBase>("content_type", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("content_type", content_typeColumnBase);
            var conversation_idColumnBase = new ColumnBase<ColumnMappingBase>("conversation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("conversation_id", conversation_idColumnBase);
            var correlation_idColumnBase = new ColumnBase<ColumnMappingBase>("correlation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("correlation_id", correlation_idColumnBase);
            var destination_addressColumnBase = new ColumnBase<ColumnMappingBase>("destination_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("destination_address", destination_addressColumnBase);
            var enqueue_timeColumnBase = new ColumnBase<ColumnMappingBase>("enqueue_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("enqueue_time", enqueue_timeColumnBase);
            var expiration_timeColumnBase0 = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("expiration_time", expiration_timeColumnBase0);
            var fault_addressColumnBase = new ColumnBase<ColumnMappingBase>("fault_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("fault_address", fault_addressColumnBase);
            var headersColumnBase = new ColumnBase<ColumnMappingBase>("headers", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("headers", headersColumnBase);
            var inbox_consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_consumer_id", inbox_consumer_idColumnBase);
            var inbox_message_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_message_id", inbox_message_idColumnBase);
            var initiator_idColumnBase = new ColumnBase<ColumnMappingBase>("initiator_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("initiator_id", initiator_idColumnBase);
            var message_idColumnBase0 = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_id", message_idColumnBase0);
            var message_typeColumnBase = new ColumnBase<ColumnMappingBase>("message_type", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_type", message_typeColumnBase);
            var outbox_idColumnBase = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("outbox_id", outbox_idColumnBase);
            var propertiesColumnBase = new ColumnBase<ColumnMappingBase>("properties", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("properties", propertiesColumnBase);
            var request_idColumnBase = new ColumnBase<ColumnMappingBase>("request_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("request_id", request_idColumnBase);
            var response_addressColumnBase = new ColumnBase<ColumnMappingBase>("response_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("response_address", response_addressColumnBase);
            var sent_timeColumnBase = new ColumnBase<ColumnMappingBase>("sent_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sent_time", sent_timeColumnBase);
            var sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sequence_number", sequence_numberColumnBase);
            var source_addressColumnBase = new ColumnBase<ColumnMappingBase>("source_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("source_address", source_addressColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase = new TableMappingBase<ColumnMappingBase>(outboxMessage, massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase, false);
            defaultTableMappings13.Add(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sequence_numberColumnBase, outboxMessage.FindProperty("SequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase, outboxMessage.FindProperty("Body")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)content_typeColumnBase, outboxMessage.FindProperty("ContentType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)conversation_idColumnBase, outboxMessage.FindProperty("ConversationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)correlation_idColumnBase, outboxMessage.FindProperty("CorrelationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_addressColumnBase, outboxMessage.FindProperty("DestinationAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enqueue_timeColumnBase, outboxMessage.FindProperty("EnqueueTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase0, outboxMessage.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fault_addressColumnBase, outboxMessage.FindProperty("FaultAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)headersColumnBase, outboxMessage.FindProperty("Headers")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_consumer_idColumnBase, outboxMessage.FindProperty("InboxConsumerId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_message_idColumnBase, outboxMessage.FindProperty("InboxMessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)initiator_idColumnBase, outboxMessage.FindProperty("InitiatorId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase0, outboxMessage.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_typeColumnBase, outboxMessage.FindProperty("MessageType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase, outboxMessage.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase, outboxMessage.FindProperty("Properties")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)request_idColumnBase, outboxMessage.FindProperty("RequestId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)response_addressColumnBase, outboxMessage.FindProperty("ResponseAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sent_timeColumnBase, outboxMessage.FindProperty("SentTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)source_addressColumnBase, outboxMessage.FindProperty("SourceAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);

            var tableMappings13 = new List<TableMapping>();
            outboxMessage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var outbox_messageTable = new Table("outbox_message", null, relationalModel);
            var sequence_numberColumn = new Column("sequence_number", "bigint", outbox_messageTable);
            outbox_messageTable.Columns.Add("sequence_number", sequence_numberColumn);
            sequence_numberColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn = new Column("body", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("body", bodyColumn);
            var content_typeColumn = new Column("content_type", "character varying(256)", outbox_messageTable);
            outbox_messageTable.Columns.Add("content_type", content_typeColumn);
            var conversation_idColumn = new Column("conversation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("conversation_id", conversation_idColumn);
            var correlation_idColumn = new Column("correlation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("correlation_id", correlation_idColumn);
            var destination_addressColumn = new Column("destination_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("destination_address", destination_addressColumn);
            var enqueue_timeColumn = new Column("enqueue_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("enqueue_time", enqueue_timeColumn);
            var expiration_timeColumn0 = new Column("expiration_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("expiration_time", expiration_timeColumn0);
            var fault_addressColumn = new Column("fault_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("fault_address", fault_addressColumn);
            var headersColumn = new Column("headers", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("headers", headersColumn);
            var inbox_consumer_idColumn = new Column("inbox_consumer_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_consumer_id", inbox_consumer_idColumn);
            var inbox_message_idColumn = new Column("inbox_message_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_message_id", inbox_message_idColumn);
            var initiator_idColumn = new Column("initiator_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("initiator_id", initiator_idColumn);
            var message_idColumn0 = new Column("message_id", "uuid", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_id", message_idColumn0);
            var message_typeColumn = new Column("message_type", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_type", message_typeColumn);
            var outbox_idColumn = new Column("outbox_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("outbox_id", outbox_idColumn);
            var propertiesColumn = new Column("properties", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("properties", propertiesColumn);
            var request_idColumn = new Column("request_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("request_id", request_idColumn);
            var response_addressColumn = new Column("response_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("response_address", response_addressColumn);
            var sent_timeColumn = new Column("sent_time", "timestamp with time zone", outbox_messageTable);
            outbox_messageTable.Columns.Add("sent_time", sent_timeColumn);
            var source_addressColumn = new Column("source_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("source_address", source_addressColumn);
            var pk_outbox_message = new UniqueConstraint("pk_outbox_message", outbox_messageTable, new[] { sequence_numberColumn });
            outbox_messageTable.PrimaryKey = pk_outbox_message;
            var pk_outbox_messageUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "SequenceNumber" });
            pk_outbox_message.MappedKeys.Add(pk_outbox_messageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_messageUc).Add(pk_outbox_message);
            outbox_messageTable.UniqueConstraints.Add("pk_outbox_message", pk_outbox_message);
            var ix_outbox_message_enqueue_time = new TableIndex(
            "ix_outbox_message_enqueue_time", outbox_messageTable, new[] { enqueue_timeColumn }, false);
            var ix_outbox_message_enqueue_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "EnqueueTime" });
            ix_outbox_message_enqueue_time.MappedIndexes.Add(ix_outbox_message_enqueue_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_enqueue_timeIx).Add(ix_outbox_message_enqueue_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_enqueue_time", ix_outbox_message_enqueue_time);
            var ix_outbox_message_expiration_time = new TableIndex(
            "ix_outbox_message_expiration_time", outbox_messageTable, new[] { expiration_timeColumn0 }, false);
            var ix_outbox_message_expiration_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "ExpirationTime" });
            ix_outbox_message_expiration_time.MappedIndexes.Add(ix_outbox_message_expiration_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_expiration_timeIx).Add(ix_outbox_message_expiration_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_expiration_time", ix_outbox_message_expiration_time);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_ = new TableIndex(
            "ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", outbox_messageTable, new[] { inbox_message_idColumn, inbox_consumer_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "InboxMessageId", "InboxConsumerId", "SequenceNumber" });
            ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_.MappedIndexes.Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix).Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            outbox_messageTable.Indexes.Add("ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            var ix_outbox_message_outbox_id_sequence_number = new TableIndex(
            "ix_outbox_message_outbox_id_sequence_number", outbox_messageTable, new[] { outbox_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_outbox_id_sequence_numberIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "OutboxId", "SequenceNumber" });
            ix_outbox_message_outbox_id_sequence_number.MappedIndexes.Add(ix_outbox_message_outbox_id_sequence_numberIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_outbox_id_sequence_numberIx).Add(ix_outbox_message_outbox_id_sequence_number);
            outbox_messageTable.Indexes.Add("ix_outbox_message_outbox_id_sequence_number", ix_outbox_message_outbox_id_sequence_number);
            relationalModel.Tables.Add(("outbox_message", null), outbox_messageTable);
            var outbox_messageTableMapping = new TableMapping(outboxMessage, outbox_messageTable, true);
            outbox_messageTable.AddTypeMapping(outbox_messageTableMapping, false);
            tableMappings13.Add(outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sequence_numberColumn, outboxMessage.FindProperty("SequenceNumber")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn, outboxMessage.FindProperty("Body")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(content_typeColumn, outboxMessage.FindProperty("ContentType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(conversation_idColumn, outboxMessage.FindProperty("ConversationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(correlation_idColumn, outboxMessage.FindProperty("CorrelationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(destination_addressColumn, outboxMessage.FindProperty("DestinationAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(enqueue_timeColumn, outboxMessage.FindProperty("EnqueueTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn0, outboxMessage.FindProperty("ExpirationTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(fault_addressColumn, outboxMessage.FindProperty("FaultAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(headersColumn, outboxMessage.FindProperty("Headers")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_consumer_idColumn, outboxMessage.FindProperty("InboxConsumerId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_message_idColumn, outboxMessage.FindProperty("InboxMessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(initiator_idColumn, outboxMessage.FindProperty("InitiatorId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn0, outboxMessage.FindProperty("MessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_typeColumn, outboxMessage.FindProperty("MessageType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn, outboxMessage.FindProperty("OutboxId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn, outboxMessage.FindProperty("Properties")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(request_idColumn, outboxMessage.FindProperty("RequestId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(response_addressColumn, outboxMessage.FindProperty("ResponseAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sent_timeColumn, outboxMessage.FindProperty("SentTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(source_addressColumn, outboxMessage.FindProperty("SourceAddress")!, outbox_messageTableMapping);

            var outboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxState")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null, relationalModel);
            var createdColumnBase = new ColumnBase<ColumnMappingBase>("created", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("created", createdColumnBase);
            var deliveredColumnBase0 = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("delivered", deliveredColumnBase0);
            var last_sequence_numberColumnBase0 = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase0);
            var lock_idColumnBase0 = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase0);
            var outbox_idColumnBase0 = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("outbox_id", outbox_idColumnBase0);
            var row_versionColumnBase0 = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("row_version", row_versionColumnBase0);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxState", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(outboxState, massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase, false);
            defaultTableMappings14.Add(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase0, outboxState.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdColumnBase, outboxState.FindProperty("Created")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase0, outboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase0, outboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase0, outboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase0, outboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);

            var tableMappings14 = new List<TableMapping>();
            outboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var outbox_stateTable = new Table("outbox_state", null, relationalModel);
            var outbox_idColumn0 = new Column("outbox_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("outbox_id", outbox_idColumn0);
            var createdColumn = new Column("created", "timestamp with time zone", outbox_stateTable);
            outbox_stateTable.Columns.Add("created", createdColumn);
            var deliveredColumn0 = new Column("delivered", "timestamp with time zone", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("delivered", deliveredColumn0);
            var last_sequence_numberColumn0 = new Column("last_sequence_number", "bigint", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn0);
            var lock_idColumn0 = new Column("lock_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("lock_id", lock_idColumn0);
            var row_versionColumn0 = new Column("row_version", "bytea", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("row_version", row_versionColumn0);
            var pk_outbox_state = new UniqueConstraint("pk_outbox_state", outbox_stateTable, new[] { outbox_idColumn0 });
            outbox_stateTable.PrimaryKey = pk_outbox_state;
            var pk_outbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "OutboxId" });
            pk_outbox_state.MappedKeys.Add(pk_outbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_stateUc).Add(pk_outbox_state);
            outbox_stateTable.UniqueConstraints.Add("pk_outbox_state", pk_outbox_state);
            var ix_outbox_state_created = new TableIndex(
            "ix_outbox_state_created", outbox_stateTable, new[] { createdColumn }, false);
            var ix_outbox_state_createdIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "Created" });
            ix_outbox_state_created.MappedIndexes.Add(ix_outbox_state_createdIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_state_createdIx).Add(ix_outbox_state_created);
            outbox_stateTable.Indexes.Add("ix_outbox_state_created", ix_outbox_state_created);
            relationalModel.Tables.Add(("outbox_state", null), outbox_stateTable);
            var outbox_stateTableMapping = new TableMapping(outboxState, outbox_stateTable, true);
            outbox_stateTable.AddTypeMapping(outbox_stateTableMapping, false);
            tableMappings14.Add(outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn0, outboxState.FindProperty("OutboxId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(createdColumn, outboxState.FindProperty("Created")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn0, outboxState.FindProperty("Delivered")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn0, outboxState.FindProperty("LastSequenceNumber")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn0, outboxState.FindProperty("LockId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn0, outboxState.FindProperty("RowVersion")!, outbox_stateTableMapping);
            var fk_categories_categories_parent_id = new ForeignKeyConstraint(
                "fk_categories_categories_parent_id", categoriesTable, categoriesTable,
                new[] { parent_idColumn },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.Restrict);
            var fk_categories_categories_parent_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.Category",
                new[] { "ParentId" },
                "Ecommerce.Catalog.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            fk_categories_categories_parent_id.MappedForeignKeys.Add(fk_categories_categories_parent_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_categories_categories_parent_idFk).Add(fk_categories_categories_parent_id);
            categoriesTable.ForeignKeyConstraints.Add(fk_categories_categories_parent_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_categories_categories_parent_id);
            var fk_product_attribute_combinations_product_attributes_attribute = new ForeignKeyConstraint(
                "fk_product_attribute_combinations_product_attributes_attribute", product_attribute_combinationsTable, product_attributesTable,
                new[] { attribute_idColumn },
                product_attributesTable.FindUniqueConstraint("pk_product_attributes")!, ReferentialAction.Cascade);
            var fk_product_attribute_combinations_product_attributes_attributeFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination",
                new[] { "AttributeId" },
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttribute",
                new[] { "Id" });
            fk_product_attribute_combinations_product_attributes_attribute.MappedForeignKeys.Add(fk_product_attribute_combinations_product_attributes_attributeFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_attribute_combinations_product_attributes_attributeFk).Add(fk_product_attribute_combinations_product_attributes_attribute);
            product_attribute_combinationsTable.ForeignKeyConstraints.Add(fk_product_attribute_combinations_product_attributes_attribute);
            product_attributesTable.ReferencingForeignKeyConstraints.Add(fk_product_attribute_combinations_product_attributes_attribute);
            var fk_product_attribute_combinations_products_product_id = new ForeignKeyConstraint(
                "fk_product_attribute_combinations_products_product_id", product_attribute_combinationsTable, productsTable,
                new[] { product_idColumn3 },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Cascade);
            var fk_product_attribute_combinations_products_product_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttributeCombination",
                new[] { "ProductId" },
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_product_attribute_combinations_products_product_id.MappedForeignKeys.Add(fk_product_attribute_combinations_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_attribute_combinations_products_product_idFk).Add(fk_product_attribute_combinations_products_product_id);
            product_attribute_combinationsTable.ForeignKeyConstraints.Add(fk_product_attribute_combinations_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_product_attribute_combinations_products_product_id);
            var fk_product_attributes_product_attribute_groups_attribute_group = new ForeignKeyConstraint(
                "fk_product_attributes_product_attribute_groups_attribute_group", product_attributesTable, product_attribute_groupsTable,
                new[] { attribute_group_idColumn },
                product_attribute_groupsTable.FindUniqueConstraint("pk_product_attribute_groups")!, ReferentialAction.SetNull);
            var fk_product_attributes_product_attribute_groups_attribute_groupFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAttributeAggregate.ProductAttribute",
                new[] { "AttributeGroupId" },
                "Ecommerce.Catalog.Domain.ProductAttributeGroupAggregate.ProductAttributeGroup",
                new[] { "Id" });
            fk_product_attributes_product_attribute_groups_attribute_group.MappedForeignKeys.Add(fk_product_attributes_product_attribute_groups_attribute_groupFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_attributes_product_attribute_groups_attribute_groupFk).Add(fk_product_attributes_product_attribute_groups_attribute_group);
            product_attributesTable.ForeignKeyConstraints.Add(fk_product_attributes_product_attribute_groups_attribute_group);
            product_attribute_groupsTable.ReferencingForeignKeyConstraints.Add(fk_product_attributes_product_attribute_groups_attribute_group);
            var fk_product_categories_categories_category_id = new ForeignKeyConstraint(
                "fk_product_categories_categories_category_id", product_categoriesTable, categoriesTable,
                new[] { category_idColumn },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.Restrict);
            var fk_product_categories_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory",
                new[] { "CategoryId" },
                "Ecommerce.Catalog.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            fk_product_categories_categories_category_id.MappedForeignKeys.Add(fk_product_categories_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_categories_categories_category_idFk).Add(fk_product_categories_categories_category_id);
            product_categoriesTable.ForeignKeyConstraints.Add(fk_product_categories_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_product_categories_categories_category_id);
            var fk_product_categories_products_product_id = new ForeignKeyConstraint(
                "fk_product_categories_products_product_id", product_categoriesTable, productsTable,
                new[] { product_idColumn },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Cascade);
            var fk_product_categories_products_product_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.CategoryAggregate.ProductCategory",
                new[] { "ProductId" },
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_product_categories_products_product_id.MappedForeignKeys.Add(fk_product_categories_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_categories_products_product_idFk).Add(fk_product_categories_products_product_id);
            product_categoriesTable.ForeignKeyConstraints.Add(fk_product_categories_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_product_categories_products_product_id);
            var fk_product_images_products_product_id = new ForeignKeyConstraint(
                "fk_product_images_products_product_id", product_imagesTable, productsTable,
                new[] { product_idColumn1 },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Cascade);
            var fk_product_images_products_product_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductImage",
                new[] { "ProductId" },
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_product_images_products_product_id.MappedForeignKeys.Add(fk_product_images_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_images_products_product_idFk).Add(fk_product_images_products_product_id);
            product_imagesTable.ForeignKeyConstraints.Add(fk_product_images_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_product_images_products_product_id);
            var fk_product_relateds_products_product_id = new ForeignKeyConstraint(
                "fk_product_relateds_products_product_id", product_relatedsTable, productsTable,
                new[] { product_idColumn2 },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Cascade);
            var fk_product_relateds_products_product_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated",
                new[] { "ProductId" },
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_product_relateds_products_product_id.MappedForeignKeys.Add(fk_product_relateds_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_relateds_products_product_idFk).Add(fk_product_relateds_products_product_id);
            product_relatedsTable.ForeignKeyConstraints.Add(fk_product_relateds_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_product_relateds_products_product_id);
            var fk_product_relateds_products_related_product_id = new ForeignKeyConstraint(
                "fk_product_relateds_products_related_product_id", product_relatedsTable, productsTable,
                new[] { related_product_idColumn },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Cascade);
            var fk_product_relateds_products_related_product_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.ProductRelated",
                new[] { "RelatedProductId" },
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_product_relateds_products_related_product_id.MappedForeignKeys.Add(fk_product_relateds_products_related_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_relateds_products_related_product_idFk).Add(fk_product_relateds_products_related_product_id);
            product_relatedsTable.ForeignKeyConstraints.Add(fk_product_relateds_products_related_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_product_relateds_products_related_product_id);
            var fk_product_variant_combination_product_variants_product_varian = new ForeignKeyConstraint(
                "fk_product_variant_combination_product_variants_product_varian", product_variant_combinationTable, product_variantsTable,
                new[] { product_variant_idColumn },
                product_variantsTable.FindUniqueConstraint("pk_product_variants")!, ReferentialAction.Cascade);
            var fk_product_variant_combination_product_variants_product_varianFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination",
                new[] { "ProductVariantId" },
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant",
                new[] { "Id" });
            fk_product_variant_combination_product_variants_product_varian.MappedForeignKeys.Add(fk_product_variant_combination_product_variants_product_varianFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_variant_combination_product_variants_product_varianFk).Add(fk_product_variant_combination_product_variants_product_varian);
            product_variant_combinationTable.ForeignKeyConstraints.Add(fk_product_variant_combination_product_variants_product_varian);
            product_variantsTable.ReferencingForeignKeyConstraints.Add(fk_product_variant_combination_product_variants_product_varian);
            var fk_product_variant_combination_variants_variant_id = new ForeignKeyConstraint(
                "fk_product_variant_combination_variants_variant_id", product_variant_combinationTable, variantsTable,
                new[] { variant_idColumn },
                variantsTable.FindUniqueConstraint("pk_variants")!, ReferentialAction.Cascade);
            var fk_product_variant_combination_variants_variant_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariantCombination",
                new[] { "VariantId" },
                "Ecommerce.Catalog.Domain.VariantAggregate.Variant",
                new[] { "Id" });
            fk_product_variant_combination_variants_variant_id.MappedForeignKeys.Add(fk_product_variant_combination_variants_variant_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_variant_combination_variants_variant_idFk).Add(fk_product_variant_combination_variants_variant_id);
            product_variant_combinationTable.ForeignKeyConstraints.Add(fk_product_variant_combination_variants_variant_id);
            variantsTable.ReferencingForeignKeyConstraints.Add(fk_product_variant_combination_variants_variant_id);
            var fk_product_variants_products_product_id = new ForeignKeyConstraint(
                "fk_product_variants_products_product_id", product_variantsTable, productsTable,
                new[] { product_idColumn0 },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Cascade);
            var fk_product_variants_products_product_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.VariantAggregate.ProductVariant",
                new[] { "ProductId" },
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "Id" });
            fk_product_variants_products_product_id.MappedForeignKeys.Add(fk_product_variants_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_product_variants_products_product_idFk).Add(fk_product_variants_products_product_id);
            product_variantsTable.ForeignKeyConstraints.Add(fk_product_variants_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_product_variants_products_product_id);
            var fk_products_brands_brand_id = new ForeignKeyConstraint(
                "fk_products_brands_brand_id", productsTable, brandsTable,
                new[] { brand_idColumn },
                brandsTable.FindUniqueConstraint("pk_brands")!, ReferentialAction.SetNull);
            var fk_products_brands_brand_idFk = RelationalModel.GetForeignKey(this,
                "Ecommerce.Catalog.Domain.ProductAggregate.Product",
                new[] { "BrandId" },
                "Ecommerce.Catalog.Domain.BrandAggregate.Brand",
                new[] { "Id" });
            fk_products_brands_brand_id.MappedForeignKeys.Add(fk_products_brands_brand_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_products_brands_brand_idFk).Add(fk_products_brands_brand_id);
            productsTable.ForeignKeyConstraints.Add(fk_products_brands_brand_id);
            brandsTable.ReferencingForeignKeyConstraints.Add(fk_products_brands_brand_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
