// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ecommerce.Media.Infrastructure.Data.CompiledModels
{
    public partial class MediaContextModel
    {
        partial void Initialize()
        {
            var image = ImageEntityType.Create(this);
            var inboxState = InboxStateEntityType.Create(this);
            var outboxMessage = OutboxMessageEntityType.Create(this);
            var outboxState = OutboxStateEntityType.Create(this);

            ImageEntityType.CreateAnnotations(image);
            InboxStateEntityType.CreateAnnotations(inboxState);
            OutboxMessageEntityType.CreateAnnotations(outboxMessage);
            OutboxStateEntityType.CreateAnnotations(outboxState);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var image = FindEntityType("Ecommerce.Media.Domain.Image")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            image.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var ecommerceMediaDomainImageTableBase = new TableBase("Ecommerce.Media.Domain.Image", null, relationalModel);
            var captionColumnBase = new ColumnBase<ColumnMappingBase>("caption", "character varying(1000)", ecommerceMediaDomainImageTableBase);
            ecommerceMediaDomainImageTableBase.Columns.Add("caption", captionColumnBase);
            var created_atColumnBase = new ColumnBase<ColumnMappingBase>("created_at", "timestamp with time zone", ecommerceMediaDomainImageTableBase);
            ecommerceMediaDomainImageTableBase.Columns.Add("created_at", created_atColumnBase);
            var file_nameColumnBase = new ColumnBase<ColumnMappingBase>("file_name", "character varying(50)", ecommerceMediaDomainImageTableBase);
            ecommerceMediaDomainImageTableBase.Columns.Add("file_name", file_nameColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", ecommerceMediaDomainImageTableBase);
            ecommerceMediaDomainImageTableBase.Columns.Add("id", idColumnBase);
            var last_modified_atColumnBase = new ColumnBase<ColumnMappingBase>("last_modified_at", "timestamp with time zone", ecommerceMediaDomainImageTableBase)
            {
                IsNullable = true
            };
            ecommerceMediaDomainImageTableBase.Columns.Add("last_modified_at", last_modified_atColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "integer", ecommerceMediaDomainImageTableBase);
            ecommerceMediaDomainImageTableBase.Columns.Add("type", typeColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", ecommerceMediaDomainImageTableBase);
            ecommerceMediaDomainImageTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Media.Domain.Image", ecommerceMediaDomainImageTableBase);
            var ecommerceMediaDomainImageMappingBase = new TableMappingBase<ColumnMappingBase>(image, ecommerceMediaDomainImageTableBase, true);
            ecommerceMediaDomainImageTableBase.AddTypeMapping(ecommerceMediaDomainImageMappingBase, false);
            defaultTableMappings.Add(ecommerceMediaDomainImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, image.FindProperty("Id")!, ecommerceMediaDomainImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)captionColumnBase, image.FindProperty("Caption")!, ecommerceMediaDomainImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_atColumnBase, image.FindProperty("CreatedAt")!, ecommerceMediaDomainImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)file_nameColumnBase, image.FindProperty("FileName")!, ecommerceMediaDomainImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_modified_atColumnBase, image.FindProperty("LastModifiedAt")!, ecommerceMediaDomainImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, image.FindProperty("Type")!, ecommerceMediaDomainImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, image.FindProperty("Version")!, ecommerceMediaDomainImageMappingBase);

            var tableMappings = new List<TableMapping>();
            image.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var imagesTable = new Table("images", null, relationalModel);
            var idColumn = new Column("id", "uuid", imagesTable);
            imagesTable.Columns.Add("id", idColumn);
            var captionColumn = new Column("caption", "character varying(1000)", imagesTable);
            imagesTable.Columns.Add("caption", captionColumn);
            var created_atColumn = new Column("created_at", "timestamp with time zone", imagesTable);
            imagesTable.Columns.Add("created_at", created_atColumn);
            var file_nameColumn = new Column("file_name", "character varying(50)", imagesTable);
            imagesTable.Columns.Add("file_name", file_nameColumn);
            var last_modified_atColumn = new Column("last_modified_at", "timestamp with time zone", imagesTable)
            {
                IsNullable = true
            };
            imagesTable.Columns.Add("last_modified_at", last_modified_atColumn);
            var typeColumn = new Column("type", "integer", imagesTable);
            imagesTable.Columns.Add("type", typeColumn);
            var versionColumn = new Column("version", "uuid", imagesTable);
            imagesTable.Columns.Add("version", versionColumn);
            var pk_images = new UniqueConstraint("pk_images", imagesTable, new[] { idColumn });
            imagesTable.PrimaryKey = pk_images;
            var pk_imagesUc = RelationalModel.GetKey(this,
                "Ecommerce.Media.Domain.Image",
                new[] { "Id" });
            pk_images.MappedKeys.Add(pk_imagesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_imagesUc).Add(pk_images);
            imagesTable.UniqueConstraints.Add("pk_images", pk_images);
            relationalModel.Tables.Add(("images", null), imagesTable);
            var imagesTableMapping = new TableMapping(image, imagesTable, true);
            imagesTable.AddTypeMapping(imagesTableMapping, false);
            tableMappings.Add(imagesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, image.FindProperty("Id")!, imagesTableMapping);
            RelationalModel.CreateColumnMapping(captionColumn, image.FindProperty("Caption")!, imagesTableMapping);
            RelationalModel.CreateColumnMapping(created_atColumn, image.FindProperty("CreatedAt")!, imagesTableMapping);
            RelationalModel.CreateColumnMapping(file_nameColumn, image.FindProperty("FileName")!, imagesTableMapping);
            RelationalModel.CreateColumnMapping(last_modified_atColumn, image.FindProperty("LastModifiedAt")!, imagesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, image.FindProperty("Type")!, imagesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, image.FindProperty("Version")!, imagesTableMapping);

            var inboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.InboxState")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            inboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var massTransitEntityFrameworkCoreIntegrationInboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.InboxState", null, relationalModel);
            var consumedColumnBase = new ColumnBase<ColumnMappingBase>("consumed", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumed", consumedColumnBase);
            var consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("consumer_id", consumer_idColumnBase);
            var deliveredColumnBase = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("delivered", deliveredColumnBase);
            var expiration_timeColumnBase = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("expiration_time", expiration_timeColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("id", idColumnBase0);
            var last_sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase);
            var lock_idColumnBase = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase);
            var message_idColumnBase = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("message_id", message_idColumnBase);
            var receive_countColumnBase = new ColumnBase<ColumnMappingBase>("receive_count", "integer", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("receive_count", receive_countColumnBase);
            var receivedColumnBase = new ColumnBase<ColumnMappingBase>("received", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("received", receivedColumnBase);
            var row_versionColumnBase = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.Columns.Add("row_version", row_versionColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.InboxState", massTransitEntityFrameworkCoreIntegrationInboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(inboxState, massTransitEntityFrameworkCoreIntegrationInboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationInboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase, false);
            defaultTableMappings0.Add(massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, inboxState.FindProperty("Id")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumedColumnBase, inboxState.FindProperty("Consumed")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumer_idColumnBase, inboxState.FindProperty("ConsumerId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase, inboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase, inboxState.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase, inboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase, inboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase, inboxState.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receive_countColumnBase, inboxState.FindProperty("ReceiveCount")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receivedColumnBase, inboxState.FindProperty("Received")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase, inboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationInboxStateMappingBase);

            var tableMappings0 = new List<TableMapping>();
            inboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var inbox_stateTable = new Table("inbox_state", null, relationalModel);
            var idColumn0 = new Column("id", "bigint", inbox_stateTable);
            inbox_stateTable.Columns.Add("id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var consumedColumn = new Column("consumed", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("consumed", consumedColumn);
            var consumer_idColumn = new Column("consumer_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("consumer_id", consumer_idColumn);
            var deliveredColumn = new Column("delivered", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("delivered", deliveredColumn);
            var expiration_timeColumn = new Column("expiration_time", "timestamp with time zone", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("expiration_time", expiration_timeColumn);
            var last_sequence_numberColumn = new Column("last_sequence_number", "bigint", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn);
            var lock_idColumn = new Column("lock_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("lock_id", lock_idColumn);
            var message_idColumn = new Column("message_id", "uuid", inbox_stateTable);
            inbox_stateTable.Columns.Add("message_id", message_idColumn);
            var receive_countColumn = new Column("receive_count", "integer", inbox_stateTable);
            inbox_stateTable.Columns.Add("receive_count", receive_countColumn);
            var receivedColumn = new Column("received", "timestamp with time zone", inbox_stateTable);
            inbox_stateTable.Columns.Add("received", receivedColumn);
            var row_versionColumn = new Column("row_version", "bytea", inbox_stateTable)
            {
                IsNullable = true
            };
            inbox_stateTable.Columns.Add("row_version", row_versionColumn);
            var ak_inbox_state_message_id_consumer_id = new UniqueConstraint("ak_inbox_state_message_id_consumer_id", inbox_stateTable, new[] { message_idColumn, consumer_idColumn });
            var ak_inbox_state_message_id_consumer_idUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "MessageId", "ConsumerId" });
            ak_inbox_state_message_id_consumer_id.MappedKeys.Add(ak_inbox_state_message_id_consumer_idUc);
            RelationalModel.GetOrCreateUniqueConstraints(ak_inbox_state_message_id_consumer_idUc).Add(ak_inbox_state_message_id_consumer_id);
            inbox_stateTable.UniqueConstraints.Add("ak_inbox_state_message_id_consumer_id", ak_inbox_state_message_id_consumer_id);
            var pk_inbox_state = new UniqueConstraint("pk_inbox_state", inbox_stateTable, new[] { idColumn0 });
            inbox_stateTable.PrimaryKey = pk_inbox_state;
            var pk_inbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Id" });
            pk_inbox_state.MappedKeys.Add(pk_inbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_inbox_stateUc).Add(pk_inbox_state);
            inbox_stateTable.UniqueConstraints.Add("pk_inbox_state", pk_inbox_state);
            var ix_inbox_state_delivered = new TableIndex(
            "ix_inbox_state_delivered", inbox_stateTable, new[] { deliveredColumn }, false);
            var ix_inbox_state_deliveredIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.InboxState",
                new[] { "Delivered" });
            ix_inbox_state_delivered.MappedIndexes.Add(ix_inbox_state_deliveredIx);
            RelationalModel.GetOrCreateTableIndexes(ix_inbox_state_deliveredIx).Add(ix_inbox_state_delivered);
            inbox_stateTable.Indexes.Add("ix_inbox_state_delivered", ix_inbox_state_delivered);
            relationalModel.Tables.Add(("inbox_state", null), inbox_stateTable);
            var inbox_stateTableMapping = new TableMapping(inboxState, inbox_stateTable, true);
            inbox_stateTable.AddTypeMapping(inbox_stateTableMapping, false);
            tableMappings0.Add(inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, inboxState.FindProperty("Id")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumedColumn, inboxState.FindProperty("Consumed")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(consumer_idColumn, inboxState.FindProperty("ConsumerId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn, inboxState.FindProperty("Delivered")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn, inboxState.FindProperty("ExpirationTime")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn, inboxState.FindProperty("LastSequenceNumber")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn, inboxState.FindProperty("LockId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn, inboxState.FindProperty("MessageId")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receive_countColumn, inboxState.FindProperty("ReceiveCount")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(receivedColumn, inboxState.FindProperty("Received")!, inbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn, inboxState.FindProperty("RowVersion")!, inbox_stateTableMapping);

            var outboxMessage = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxMessage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", null, relationalModel);
            var bodyColumnBase = new ColumnBase<ColumnMappingBase>("body", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("body", bodyColumnBase);
            var content_typeColumnBase = new ColumnBase<ColumnMappingBase>("content_type", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("content_type", content_typeColumnBase);
            var conversation_idColumnBase = new ColumnBase<ColumnMappingBase>("conversation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("conversation_id", conversation_idColumnBase);
            var correlation_idColumnBase = new ColumnBase<ColumnMappingBase>("correlation_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("correlation_id", correlation_idColumnBase);
            var destination_addressColumnBase = new ColumnBase<ColumnMappingBase>("destination_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("destination_address", destination_addressColumnBase);
            var enqueue_timeColumnBase = new ColumnBase<ColumnMappingBase>("enqueue_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("enqueue_time", enqueue_timeColumnBase);
            var expiration_timeColumnBase0 = new ColumnBase<ColumnMappingBase>("expiration_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("expiration_time", expiration_timeColumnBase0);
            var fault_addressColumnBase = new ColumnBase<ColumnMappingBase>("fault_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("fault_address", fault_addressColumnBase);
            var headersColumnBase = new ColumnBase<ColumnMappingBase>("headers", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("headers", headersColumnBase);
            var inbox_consumer_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_consumer_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_consumer_id", inbox_consumer_idColumnBase);
            var inbox_message_idColumnBase = new ColumnBase<ColumnMappingBase>("inbox_message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("inbox_message_id", inbox_message_idColumnBase);
            var initiator_idColumnBase = new ColumnBase<ColumnMappingBase>("initiator_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("initiator_id", initiator_idColumnBase);
            var message_idColumnBase0 = new ColumnBase<ColumnMappingBase>("message_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_id", message_idColumnBase0);
            var message_typeColumnBase = new ColumnBase<ColumnMappingBase>("message_type", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("message_type", message_typeColumnBase);
            var outbox_idColumnBase = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("outbox_id", outbox_idColumnBase);
            var propertiesColumnBase = new ColumnBase<ColumnMappingBase>("properties", "text", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("properties", propertiesColumnBase);
            var request_idColumnBase = new ColumnBase<ColumnMappingBase>("request_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("request_id", request_idColumnBase);
            var response_addressColumnBase = new ColumnBase<ColumnMappingBase>("response_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("response_address", response_addressColumnBase);
            var sent_timeColumnBase = new ColumnBase<ColumnMappingBase>("sent_time", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sent_time", sent_timeColumnBase);
            var sequence_numberColumnBase = new ColumnBase<ColumnMappingBase>("sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("sequence_number", sequence_numberColumnBase);
            var source_addressColumnBase = new ColumnBase<ColumnMappingBase>("source_address", "character varying(256)", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.Columns.Add("source_address", source_addressColumnBase);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase = new TableMappingBase<ColumnMappingBase>(outboxMessage, massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxMessageTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase, false);
            defaultTableMappings1.Add(massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sequence_numberColumnBase, outboxMessage.FindProperty("SequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase, outboxMessage.FindProperty("Body")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)content_typeColumnBase, outboxMessage.FindProperty("ContentType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)conversation_idColumnBase, outboxMessage.FindProperty("ConversationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)correlation_idColumnBase, outboxMessage.FindProperty("CorrelationId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_addressColumnBase, outboxMessage.FindProperty("DestinationAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enqueue_timeColumnBase, outboxMessage.FindProperty("EnqueueTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_timeColumnBase0, outboxMessage.FindProperty("ExpirationTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fault_addressColumnBase, outboxMessage.FindProperty("FaultAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)headersColumnBase, outboxMessage.FindProperty("Headers")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_consumer_idColumnBase, outboxMessage.FindProperty("InboxConsumerId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inbox_message_idColumnBase, outboxMessage.FindProperty("InboxMessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)initiator_idColumnBase, outboxMessage.FindProperty("InitiatorId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_idColumnBase0, outboxMessage.FindProperty("MessageId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)message_typeColumnBase, outboxMessage.FindProperty("MessageType")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase, outboxMessage.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase, outboxMessage.FindProperty("Properties")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)request_idColumnBase, outboxMessage.FindProperty("RequestId")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)response_addressColumnBase, outboxMessage.FindProperty("ResponseAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sent_timeColumnBase, outboxMessage.FindProperty("SentTime")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)source_addressColumnBase, outboxMessage.FindProperty("SourceAddress")!, massTransitEntityFrameworkCoreIntegrationOutboxMessageMappingBase);

            var tableMappings1 = new List<TableMapping>();
            outboxMessage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var outbox_messageTable = new Table("outbox_message", null, relationalModel);
            var sequence_numberColumn = new Column("sequence_number", "bigint", outbox_messageTable);
            outbox_messageTable.Columns.Add("sequence_number", sequence_numberColumn);
            sequence_numberColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn = new Column("body", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("body", bodyColumn);
            var content_typeColumn = new Column("content_type", "character varying(256)", outbox_messageTable);
            outbox_messageTable.Columns.Add("content_type", content_typeColumn);
            var conversation_idColumn = new Column("conversation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("conversation_id", conversation_idColumn);
            var correlation_idColumn = new Column("correlation_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("correlation_id", correlation_idColumn);
            var destination_addressColumn = new Column("destination_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("destination_address", destination_addressColumn);
            var enqueue_timeColumn = new Column("enqueue_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("enqueue_time", enqueue_timeColumn);
            var expiration_timeColumn0 = new Column("expiration_time", "timestamp with time zone", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("expiration_time", expiration_timeColumn0);
            var fault_addressColumn = new Column("fault_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("fault_address", fault_addressColumn);
            var headersColumn = new Column("headers", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("headers", headersColumn);
            var inbox_consumer_idColumn = new Column("inbox_consumer_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_consumer_id", inbox_consumer_idColumn);
            var inbox_message_idColumn = new Column("inbox_message_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("inbox_message_id", inbox_message_idColumn);
            var initiator_idColumn = new Column("initiator_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("initiator_id", initiator_idColumn);
            var message_idColumn0 = new Column("message_id", "uuid", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_id", message_idColumn0);
            var message_typeColumn = new Column("message_type", "text", outbox_messageTable);
            outbox_messageTable.Columns.Add("message_type", message_typeColumn);
            var outbox_idColumn = new Column("outbox_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("outbox_id", outbox_idColumn);
            var propertiesColumn = new Column("properties", "text", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("properties", propertiesColumn);
            var request_idColumn = new Column("request_id", "uuid", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("request_id", request_idColumn);
            var response_addressColumn = new Column("response_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("response_address", response_addressColumn);
            var sent_timeColumn = new Column("sent_time", "timestamp with time zone", outbox_messageTable);
            outbox_messageTable.Columns.Add("sent_time", sent_timeColumn);
            var source_addressColumn = new Column("source_address", "character varying(256)", outbox_messageTable)
            {
                IsNullable = true
            };
            outbox_messageTable.Columns.Add("source_address", source_addressColumn);
            var pk_outbox_message = new UniqueConstraint("pk_outbox_message", outbox_messageTable, new[] { sequence_numberColumn });
            outbox_messageTable.PrimaryKey = pk_outbox_message;
            var pk_outbox_messageUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "SequenceNumber" });
            pk_outbox_message.MappedKeys.Add(pk_outbox_messageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_messageUc).Add(pk_outbox_message);
            outbox_messageTable.UniqueConstraints.Add("pk_outbox_message", pk_outbox_message);
            var ix_outbox_message_enqueue_time = new TableIndex(
            "ix_outbox_message_enqueue_time", outbox_messageTable, new[] { enqueue_timeColumn }, false);
            var ix_outbox_message_enqueue_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "EnqueueTime" });
            ix_outbox_message_enqueue_time.MappedIndexes.Add(ix_outbox_message_enqueue_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_enqueue_timeIx).Add(ix_outbox_message_enqueue_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_enqueue_time", ix_outbox_message_enqueue_time);
            var ix_outbox_message_expiration_time = new TableIndex(
            "ix_outbox_message_expiration_time", outbox_messageTable, new[] { expiration_timeColumn0 }, false);
            var ix_outbox_message_expiration_timeIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "ExpirationTime" });
            ix_outbox_message_expiration_time.MappedIndexes.Add(ix_outbox_message_expiration_timeIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_expiration_timeIx).Add(ix_outbox_message_expiration_time);
            outbox_messageTable.Indexes.Add("ix_outbox_message_expiration_time", ix_outbox_message_expiration_time);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_ = new TableIndex(
            "ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", outbox_messageTable, new[] { inbox_message_idColumn, inbox_consumer_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "InboxMessageId", "InboxConsumerId", "SequenceNumber" });
            ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_.MappedIndexes.Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_Ix).Add(ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            outbox_messageTable.Indexes.Add("ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_", ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_);
            var ix_outbox_message_outbox_id_sequence_number = new TableIndex(
            "ix_outbox_message_outbox_id_sequence_number", outbox_messageTable, new[] { outbox_idColumn, sequence_numberColumn }, true);
            var ix_outbox_message_outbox_id_sequence_numberIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxMessage",
                new[] { "OutboxId", "SequenceNumber" });
            ix_outbox_message_outbox_id_sequence_number.MappedIndexes.Add(ix_outbox_message_outbox_id_sequence_numberIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_message_outbox_id_sequence_numberIx).Add(ix_outbox_message_outbox_id_sequence_number);
            outbox_messageTable.Indexes.Add("ix_outbox_message_outbox_id_sequence_number", ix_outbox_message_outbox_id_sequence_number);
            relationalModel.Tables.Add(("outbox_message", null), outbox_messageTable);
            var outbox_messageTableMapping = new TableMapping(outboxMessage, outbox_messageTable, true);
            outbox_messageTable.AddTypeMapping(outbox_messageTableMapping, false);
            tableMappings1.Add(outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sequence_numberColumn, outboxMessage.FindProperty("SequenceNumber")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn, outboxMessage.FindProperty("Body")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(content_typeColumn, outboxMessage.FindProperty("ContentType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(conversation_idColumn, outboxMessage.FindProperty("ConversationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(correlation_idColumn, outboxMessage.FindProperty("CorrelationId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(destination_addressColumn, outboxMessage.FindProperty("DestinationAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(enqueue_timeColumn, outboxMessage.FindProperty("EnqueueTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(expiration_timeColumn0, outboxMessage.FindProperty("ExpirationTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(fault_addressColumn, outboxMessage.FindProperty("FaultAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(headersColumn, outboxMessage.FindProperty("Headers")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_consumer_idColumn, outboxMessage.FindProperty("InboxConsumerId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(inbox_message_idColumn, outboxMessage.FindProperty("InboxMessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(initiator_idColumn, outboxMessage.FindProperty("InitiatorId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_idColumn0, outboxMessage.FindProperty("MessageId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(message_typeColumn, outboxMessage.FindProperty("MessageType")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn, outboxMessage.FindProperty("OutboxId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn, outboxMessage.FindProperty("Properties")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(request_idColumn, outboxMessage.FindProperty("RequestId")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(response_addressColumn, outboxMessage.FindProperty("ResponseAddress")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(sent_timeColumn, outboxMessage.FindProperty("SentTime")!, outbox_messageTableMapping);
            RelationalModel.CreateColumnMapping(source_addressColumn, outboxMessage.FindProperty("SourceAddress")!, outbox_messageTableMapping);

            var outboxState = FindEntityType("MassTransit.EntityFrameworkCoreIntegration.OutboxState")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            outboxState.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase = new TableBase("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null, relationalModel);
            var createdColumnBase = new ColumnBase<ColumnMappingBase>("created", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("created", createdColumnBase);
            var deliveredColumnBase0 = new ColumnBase<ColumnMappingBase>("delivered", "timestamp with time zone", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("delivered", deliveredColumnBase0);
            var last_sequence_numberColumnBase0 = new ColumnBase<ColumnMappingBase>("last_sequence_number", "bigint", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("last_sequence_number", last_sequence_numberColumnBase0);
            var lock_idColumnBase0 = new ColumnBase<ColumnMappingBase>("lock_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("lock_id", lock_idColumnBase0);
            var outbox_idColumnBase0 = new ColumnBase<ColumnMappingBase>("outbox_id", "uuid", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("outbox_id", outbox_idColumnBase0);
            var row_versionColumnBase0 = new ColumnBase<ColumnMappingBase>("row_version", "bytea", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase)
            {
                IsNullable = true
            };
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.Columns.Add("row_version", row_versionColumnBase0);
            relationalModel.DefaultTables.Add("MassTransit.EntityFrameworkCoreIntegration.OutboxState", massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase);
            var massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase = new TableMappingBase<ColumnMappingBase>(outboxState, massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase, true);
            massTransitEntityFrameworkCoreIntegrationOutboxStateTableBase.AddTypeMapping(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase, false);
            defaultTableMappings2.Add(massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)outbox_idColumnBase0, outboxState.FindProperty("OutboxId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdColumnBase, outboxState.FindProperty("Created")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveredColumnBase0, outboxState.FindProperty("Delivered")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_sequence_numberColumnBase0, outboxState.FindProperty("LastSequenceNumber")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lock_idColumnBase0, outboxState.FindProperty("LockId")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)row_versionColumnBase0, outboxState.FindProperty("RowVersion")!, massTransitEntityFrameworkCoreIntegrationOutboxStateMappingBase);

            var tableMappings2 = new List<TableMapping>();
            outboxState.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var outbox_stateTable = new Table("outbox_state", null, relationalModel);
            var outbox_idColumn0 = new Column("outbox_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("outbox_id", outbox_idColumn0);
            var createdColumn = new Column("created", "timestamp with time zone", outbox_stateTable);
            outbox_stateTable.Columns.Add("created", createdColumn);
            var deliveredColumn0 = new Column("delivered", "timestamp with time zone", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("delivered", deliveredColumn0);
            var last_sequence_numberColumn0 = new Column("last_sequence_number", "bigint", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("last_sequence_number", last_sequence_numberColumn0);
            var lock_idColumn0 = new Column("lock_id", "uuid", outbox_stateTable);
            outbox_stateTable.Columns.Add("lock_id", lock_idColumn0);
            var row_versionColumn0 = new Column("row_version", "bytea", outbox_stateTable)
            {
                IsNullable = true
            };
            outbox_stateTable.Columns.Add("row_version", row_versionColumn0);
            var pk_outbox_state = new UniqueConstraint("pk_outbox_state", outbox_stateTable, new[] { outbox_idColumn0 });
            outbox_stateTable.PrimaryKey = pk_outbox_state;
            var pk_outbox_stateUc = RelationalModel.GetKey(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "OutboxId" });
            pk_outbox_state.MappedKeys.Add(pk_outbox_stateUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_outbox_stateUc).Add(pk_outbox_state);
            outbox_stateTable.UniqueConstraints.Add("pk_outbox_state", pk_outbox_state);
            var ix_outbox_state_created = new TableIndex(
            "ix_outbox_state_created", outbox_stateTable, new[] { createdColumn }, false);
            var ix_outbox_state_createdIx = RelationalModel.GetIndex(this,
                "MassTransit.EntityFrameworkCoreIntegration.OutboxState",
                new[] { "Created" });
            ix_outbox_state_created.MappedIndexes.Add(ix_outbox_state_createdIx);
            RelationalModel.GetOrCreateTableIndexes(ix_outbox_state_createdIx).Add(ix_outbox_state_created);
            outbox_stateTable.Indexes.Add("ix_outbox_state_created", ix_outbox_state_created);
            relationalModel.Tables.Add(("outbox_state", null), outbox_stateTable);
            var outbox_stateTableMapping = new TableMapping(outboxState, outbox_stateTable, true);
            outbox_stateTable.AddTypeMapping(outbox_stateTableMapping, false);
            tableMappings2.Add(outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(outbox_idColumn0, outboxState.FindProperty("OutboxId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(createdColumn, outboxState.FindProperty("Created")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(deliveredColumn0, outboxState.FindProperty("Delivered")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(last_sequence_numberColumn0, outboxState.FindProperty("LastSequenceNumber")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(lock_idColumn0, outboxState.FindProperty("LockId")!, outbox_stateTableMapping);
            RelationalModel.CreateColumnMapping(row_versionColumn0, outboxState.FindProperty("RowVersion")!, outbox_stateTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
