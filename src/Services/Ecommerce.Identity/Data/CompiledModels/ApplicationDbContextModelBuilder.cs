// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ecommerce.Identity.Data.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var applicationUser = ApplicationUserEntityType.Create(this);
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);

            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, applicationUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, applicationUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, applicationUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, applicationUser);

            ApplicationUserEntityType.CreateAnnotations(applicationUser);
            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var applicationUser = FindEntityType("Ecommerce.Identity.Models.ApplicationUser")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            applicationUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var ecommerceIdentityModelsApplicationUserTableBase = new TableBase("Ecommerce.Identity.Models.ApplicationUser", null, relationalModel);
            var access_failed_countColumnBase = new ColumnBase<ColumnMappingBase>("access_failed_count", "integer", ecommerceIdentityModelsApplicationUserTableBase);
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("access_failed_count", access_failed_countColumnBase);
            var concurrency_stampColumnBase = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("email", "character varying(256)", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("email", emailColumnBase);
            var email_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("email_confirmed", "boolean", ecommerceIdentityModelsApplicationUserTableBase);
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("email_confirmed", email_confirmedColumnBase);
            var first_nameColumnBase = new ColumnBase<ColumnMappingBase>("first_name", "text", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("first_name", first_nameColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "text", ecommerceIdentityModelsApplicationUserTableBase);
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("id", idColumnBase);
            var last_nameColumnBase = new ColumnBase<ColumnMappingBase>("last_name", "text", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("last_name", last_nameColumnBase);
            var lockout_enabledColumnBase = new ColumnBase<ColumnMappingBase>("lockout_enabled", "boolean", ecommerceIdentityModelsApplicationUserTableBase);
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("lockout_enabled", lockout_enabledColumnBase);
            var lockout_endColumnBase = new ColumnBase<ColumnMappingBase>("lockout_end", "timestamp with time zone", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("lockout_end", lockout_endColumnBase);
            var normalized_emailColumnBase = new ColumnBase<ColumnMappingBase>("normalized_email", "character varying(256)", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("normalized_email", normalized_emailColumnBase);
            var normalized_user_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_user_name", "character varying(256)", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("normalized_user_name", normalized_user_nameColumnBase);
            var password_hashColumnBase = new ColumnBase<ColumnMappingBase>("password_hash", "text", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("password_hash", password_hashColumnBase);
            var phone_numberColumnBase = new ColumnBase<ColumnMappingBase>("phone_number", "text", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("phone_number", phone_numberColumnBase);
            var phone_number_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("phone_number_confirmed", "boolean", ecommerceIdentityModelsApplicationUserTableBase);
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("phone_number_confirmed", phone_number_confirmedColumnBase);
            var security_stampColumnBase = new ColumnBase<ColumnMappingBase>("security_stamp", "text", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("security_stamp", security_stampColumnBase);
            var two_factor_enabledColumnBase = new ColumnBase<ColumnMappingBase>("two_factor_enabled", "boolean", ecommerceIdentityModelsApplicationUserTableBase);
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("two_factor_enabled", two_factor_enabledColumnBase);
            var user_nameColumnBase = new ColumnBase<ColumnMappingBase>("user_name", "character varying(256)", ecommerceIdentityModelsApplicationUserTableBase)
            {
                IsNullable = true
            };
            ecommerceIdentityModelsApplicationUserTableBase.Columns.Add("user_name", user_nameColumnBase);
            relationalModel.DefaultTables.Add("Ecommerce.Identity.Models.ApplicationUser", ecommerceIdentityModelsApplicationUserTableBase);
            var ecommerceIdentityModelsApplicationUserMappingBase = new TableMappingBase<ColumnMappingBase>(applicationUser, ecommerceIdentityModelsApplicationUserTableBase, true);
            ecommerceIdentityModelsApplicationUserTableBase.AddTypeMapping(ecommerceIdentityModelsApplicationUserMappingBase, false);
            defaultTableMappings.Add(ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, applicationUser.FindProperty("Id")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)access_failed_countColumnBase, applicationUser.FindProperty("AccessFailedCount")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase, applicationUser.FindProperty("ConcurrencyStamp")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, applicationUser.FindProperty("Email")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)email_confirmedColumnBase, applicationUser.FindProperty("EmailConfirmed")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)first_nameColumnBase, applicationUser.FindProperty("FirstName")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_nameColumnBase, applicationUser.FindProperty("LastName")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_enabledColumnBase, applicationUser.FindProperty("LockoutEnabled")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_endColumnBase, applicationUser.FindProperty("LockoutEnd")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_emailColumnBase, applicationUser.FindProperty("NormalizedEmail")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_user_nameColumnBase, applicationUser.FindProperty("NormalizedUserName")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)password_hashColumnBase, applicationUser.FindProperty("PasswordHash")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_numberColumnBase, applicationUser.FindProperty("PhoneNumber")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_number_confirmedColumnBase, applicationUser.FindProperty("PhoneNumberConfirmed")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)security_stampColumnBase, applicationUser.FindProperty("SecurityStamp")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)two_factor_enabledColumnBase, applicationUser.FindProperty("TwoFactorEnabled")!, ecommerceIdentityModelsApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_nameColumnBase, applicationUser.FindProperty("UserName")!, ecommerceIdentityModelsApplicationUserMappingBase);

            var tableMappings = new List<TableMapping>();
            applicationUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn = new Column("id", "text", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("id", idColumn);
            var access_failed_countColumn = new Column("access_failed_count", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("access_failed_count", access_failed_countColumn);
            var concurrency_stampColumn = new Column("concurrency_stamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("concurrency_stamp", concurrency_stampColumn);
            var emailColumn = new Column("email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("email", emailColumn);
            var email_confirmedColumn = new Column("email_confirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("email_confirmed", email_confirmedColumn);
            var first_nameColumn = new Column("first_name", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("first_name", first_nameColumn);
            var last_nameColumn = new Column("last_name", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("last_name", last_nameColumn);
            var lockout_enabledColumn = new Column("lockout_enabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("lockout_enabled", lockout_enabledColumn);
            var lockout_endColumn = new Column("lockout_end", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("lockout_end", lockout_endColumn);
            var normalized_emailColumn = new Column("normalized_email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("normalized_email", normalized_emailColumn);
            var normalized_user_nameColumn = new Column("normalized_user_name", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("normalized_user_name", normalized_user_nameColumn);
            var password_hashColumn = new Column("password_hash", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("password_hash", password_hashColumn);
            var phone_numberColumn = new Column("phone_number", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("phone_number", phone_numberColumn);
            var phone_number_confirmedColumn = new Column("phone_number_confirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("phone_number_confirmed", phone_number_confirmedColumn);
            var security_stampColumn = new Column("security_stamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("security_stamp", security_stampColumn);
            var two_factor_enabledColumn = new Column("two_factor_enabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("two_factor_enabled", two_factor_enabledColumn);
            var user_nameColumn = new Column("user_name", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("user_name", user_nameColumn);
            var pk_asp_net_users = new UniqueConstraint("pk_asp_net_users", aspNetUsersTable, new[] { idColumn });
            aspNetUsersTable.PrimaryKey = pk_asp_net_users;
            var pk_asp_net_usersUc = RelationalModel.GetKey(this,
                "Ecommerce.Identity.Models.ApplicationUser",
                new[] { "Id" });
            pk_asp_net_users.MappedKeys.Add(pk_asp_net_usersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_usersUc).Add(pk_asp_net_users);
            aspNetUsersTable.UniqueConstraints.Add("pk_asp_net_users", pk_asp_net_users);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalized_emailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "Ecommerce.Identity.Models.ApplicationUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalized_user_nameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "Ecommerce.Identity.Models.ApplicationUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(applicationUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, applicationUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(access_failed_countColumn, applicationUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn, applicationUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, applicationUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(email_confirmedColumn, applicationUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(first_nameColumn, applicationUser.FindProperty("FirstName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(last_nameColumn, applicationUser.FindProperty("LastName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_enabledColumn, applicationUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_endColumn, applicationUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_emailColumn, applicationUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_user_nameColumn, applicationUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(password_hashColumn, applicationUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phone_numberColumn, applicationUser.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phone_number_confirmedColumn, applicationUser.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(security_stampColumn, applicationUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(two_factor_enabledColumn, applicationUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(user_nameColumn, applicationUser.FindProperty("UserName")!, aspNetUsersTableMapping);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrency_stampColumnBase0 = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "text", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("id", idColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("name", nameColumnBase);
            var normalized_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_name", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("normalized_name", normalized_nameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings0.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase0, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_nameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings0 = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn0 = new Column("id", "text", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("id", idColumn0);
            var concurrency_stampColumn0 = new Column("concurrency_stamp", "text", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("concurrency_stamp", concurrency_stampColumn0);
            var nameColumn = new Column("name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("name", nameColumn);
            var normalized_nameColumn = new Column("normalized_name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("normalized_name", normalized_nameColumn);
            var pk_asp_net_roles = new UniqueConstraint("pk_asp_net_roles", aspNetRolesTable, new[] { idColumn0 });
            aspNetRolesTable.PrimaryKey = pk_asp_net_roles;
            var pk_asp_net_rolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pk_asp_net_roles.MappedKeys.Add(pk_asp_net_rolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_rolesUc).Add(pk_asp_net_roles);
            aspNetRolesTable.UniqueConstraints.Add("pk_asp_net_roles", pk_asp_net_roles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalized_nameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings0.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn0, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalized_nameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claim_typeColumnBase = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("claim_type", claim_typeColumnBase);
            var claim_valueColumnBase = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("claim_value", claim_valueColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("id", idColumnBase1);
            var role_idColumnBase = new ColumnBase<ColumnMappingBase>("role_id", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("role_id", role_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings1.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings1 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn1 = new Column("id", "integer", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn = new Column("claim_type", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("claim_type", claim_typeColumn);
            var claim_valueColumn = new Column("claim_value", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("claim_value", claim_valueColumn);
            var role_idColumn = new Column("role_id", "text", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("role_id", role_idColumn);
            var pk_asp_net_role_claims = new UniqueConstraint("pk_asp_net_role_claims", aspNetRoleClaimsTable, new[] { idColumn1 });
            aspNetRoleClaimsTable.PrimaryKey = pk_asp_net_role_claims;
            var pk_asp_net_role_claimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pk_asp_net_role_claims.MappedKeys.Add(pk_asp_net_role_claimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_role_claimsUc).Add(pk_asp_net_role_claims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("pk_asp_net_role_claims", pk_asp_net_role_claims);
            var ix_asp_net_role_claims_role_id = new TableIndex(
            "ix_asp_net_role_claims_role_id", aspNetRoleClaimsTable, new[] { role_idColumn }, false);
            var ix_asp_net_role_claims_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            ix_asp_net_role_claims_role_id.MappedIndexes.Add(ix_asp_net_role_claims_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_role_claims_role_idIx).Add(ix_asp_net_role_claims_role_id);
            aspNetRoleClaimsTable.Indexes.Add("ix_asp_net_role_claims_role_id", ix_asp_net_role_claims_role_id);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings1.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claim_typeColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("claim_type", claim_typeColumnBase0);
            var claim_valueColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("claim_value", claim_valueColumnBase0);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("id", idColumnBase2);
            var user_idColumnBase = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("user_id", user_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings2.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings2 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn2 = new Column("id", "integer", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn0 = new Column("claim_type", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("claim_type", claim_typeColumn0);
            var claim_valueColumn0 = new Column("claim_value", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("claim_value", claim_valueColumn0);
            var user_idColumn = new Column("user_id", "text", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("user_id", user_idColumn);
            var pk_asp_net_user_claims = new UniqueConstraint("pk_asp_net_user_claims", aspNetUserClaimsTable, new[] { idColumn2 });
            aspNetUserClaimsTable.PrimaryKey = pk_asp_net_user_claims;
            var pk_asp_net_user_claimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pk_asp_net_user_claims.MappedKeys.Add(pk_asp_net_user_claimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_claimsUc).Add(pk_asp_net_user_claims);
            aspNetUserClaimsTable.UniqueConstraints.Add("pk_asp_net_user_claims", pk_asp_net_user_claims);
            var ix_asp_net_user_claims_user_id = new TableIndex(
            "ix_asp_net_user_claims_user_id", aspNetUserClaimsTable, new[] { user_idColumn }, false);
            var ix_asp_net_user_claims_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            ix_asp_net_user_claims_user_id.MappedIndexes.Add(ix_asp_net_user_claims_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_claims_user_idIx).Add(ix_asp_net_user_claims_user_id);
            aspNetUserClaimsTable.Indexes.Add("ix_asp_net_user_claims_user_id", ix_asp_net_user_claims_user_id);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings2.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var login_providerColumnBase = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("login_provider", login_providerColumnBase);
            var provider_display_nameColumnBase = new ColumnBase<ColumnMappingBase>("provider_display_name", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("provider_display_name", provider_display_nameColumnBase);
            var provider_keyColumnBase = new ColumnBase<ColumnMappingBase>("provider_key", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("provider_key", provider_keyColumnBase);
            var user_idColumnBase0 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("user_id", user_idColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings3.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_keyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_display_nameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings3 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var login_providerColumn = new Column("login_provider", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("login_provider", login_providerColumn);
            var provider_keyColumn = new Column("provider_key", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("provider_key", provider_keyColumn);
            var provider_display_nameColumn = new Column("provider_display_name", "text", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("provider_display_name", provider_display_nameColumn);
            var user_idColumn0 = new Column("user_id", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("user_id", user_idColumn0);
            var pk_asp_net_user_logins = new UniqueConstraint("pk_asp_net_user_logins", aspNetUserLoginsTable, new[] { login_providerColumn, provider_keyColumn });
            aspNetUserLoginsTable.PrimaryKey = pk_asp_net_user_logins;
            var pk_asp_net_user_loginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pk_asp_net_user_logins.MappedKeys.Add(pk_asp_net_user_loginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_loginsUc).Add(pk_asp_net_user_logins);
            aspNetUserLoginsTable.UniqueConstraints.Add("pk_asp_net_user_logins", pk_asp_net_user_logins);
            var ix_asp_net_user_logins_user_id = new TableIndex(
            "ix_asp_net_user_logins_user_id", aspNetUserLoginsTable, new[] { user_idColumn0 }, false);
            var ix_asp_net_user_logins_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            ix_asp_net_user_logins_user_id.MappedIndexes.Add(ix_asp_net_user_logins_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_logins_user_idIx).Add(ix_asp_net_user_logins_user_id);
            aspNetUserLoginsTable.Indexes.Add("ix_asp_net_user_logins_user_id", ix_asp_net_user_logins_user_id);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings3.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_keyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_display_nameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var role_idColumnBase0 = new ColumnBase<ColumnMappingBase>("role_id", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("role_id", role_idColumnBase0);
            var user_idColumnBase1 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("user_id", user_idColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings4.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings4 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var user_idColumn1 = new Column("user_id", "text", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("user_id", user_idColumn1);
            var role_idColumn0 = new Column("role_id", "text", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("role_id", role_idColumn0);
            var pk_asp_net_user_roles = new UniqueConstraint("pk_asp_net_user_roles", aspNetUserRolesTable, new[] { user_idColumn1, role_idColumn0 });
            aspNetUserRolesTable.PrimaryKey = pk_asp_net_user_roles;
            var pk_asp_net_user_rolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pk_asp_net_user_roles.MappedKeys.Add(pk_asp_net_user_rolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_rolesUc).Add(pk_asp_net_user_roles);
            aspNetUserRolesTable.UniqueConstraints.Add("pk_asp_net_user_roles", pk_asp_net_user_roles);
            var ix_asp_net_user_roles_role_id = new TableIndex(
            "ix_asp_net_user_roles_role_id", aspNetUserRolesTable, new[] { role_idColumn0 }, false);
            var ix_asp_net_user_roles_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            ix_asp_net_user_roles_role_id.MappedIndexes.Add(ix_asp_net_user_roles_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_roles_role_idIx).Add(ix_asp_net_user_roles_role_id);
            aspNetUserRolesTable.Indexes.Add("ix_asp_net_user_roles_role_id", ix_asp_net_user_roles_role_id);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings4.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var login_providerColumnBase0 = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("login_provider", login_providerColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("name", nameColumnBase0);
            var user_idColumnBase2 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("user_id", user_idColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings5.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings5 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var user_idColumn2 = new Column("user_id", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("user_id", user_idColumn2);
            var login_providerColumn0 = new Column("login_provider", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("login_provider", login_providerColumn0);
            var nameColumn0 = new Column("name", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("name", nameColumn0);
            var valueColumn = new Column("value", "text", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("value", valueColumn);
            var pk_asp_net_user_tokens = new UniqueConstraint("pk_asp_net_user_tokens", aspNetUserTokensTable, new[] { user_idColumn2, login_providerColumn0, nameColumn0 });
            aspNetUserTokensTable.PrimaryKey = pk_asp_net_user_tokens;
            var pk_asp_net_user_tokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pk_asp_net_user_tokens.MappedKeys.Add(pk_asp_net_user_tokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_tokensUc).Add(pk_asp_net_user_tokens);
            aspNetUserTokensTable.UniqueConstraints.Add("pk_asp_net_user_tokens", pk_asp_net_user_tokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings5.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);
            var fk_asp_net_role_claims_asp_net_roles_role_id = new ForeignKeyConstraint(
                "fk_asp_net_role_claims_asp_net_roles_role_id", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { role_idColumn },
                aspNetRolesTable.FindUniqueConstraint("pk_asp_net_roles")!, ReferentialAction.Cascade);
            var fk_asp_net_role_claims_asp_net_roles_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fk_asp_net_role_claims_asp_net_roles_role_id.MappedForeignKeys.Add(fk_asp_net_role_claims_asp_net_roles_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_role_claims_asp_net_roles_role_idFk).Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            var fk_asp_net_user_claims_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_claims_asp_net_users_user_id", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { user_idColumn },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_claims_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "Ecommerce.Identity.Models.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_claims_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_claims_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_claims_asp_net_users_user_idFk).Add(fk_asp_net_user_claims_asp_net_users_user_id);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fk_asp_net_user_claims_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_claims_asp_net_users_user_id);
            var fk_asp_net_user_logins_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_logins_asp_net_users_user_id", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { user_idColumn0 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_logins_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "Ecommerce.Identity.Models.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_logins_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_logins_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_logins_asp_net_users_user_idFk).Add(fk_asp_net_user_logins_asp_net_users_user_id);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fk_asp_net_user_logins_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_logins_asp_net_users_user_id);
            var fk_asp_net_user_roles_asp_net_roles_role_id = new ForeignKeyConstraint(
                "fk_asp_net_user_roles_asp_net_roles_role_id", aspNetUserRolesTable, aspNetRolesTable,
                new[] { role_idColumn0 },
                aspNetRolesTable.FindUniqueConstraint("pk_asp_net_roles")!, ReferentialAction.Cascade);
            var fk_asp_net_user_roles_asp_net_roles_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fk_asp_net_user_roles_asp_net_roles_role_id.MappedForeignKeys.Add(fk_asp_net_user_roles_asp_net_roles_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_roles_asp_net_roles_role_idFk).Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            var fk_asp_net_user_roles_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_roles_asp_net_users_user_id", aspNetUserRolesTable, aspNetUsersTable,
                new[] { user_idColumn1 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_roles_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "Ecommerce.Identity.Models.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_roles_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_roles_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_roles_asp_net_users_user_idFk).Add(fk_asp_net_user_roles_asp_net_users_user_id);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_users_user_id);
            var fk_asp_net_user_tokens_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_tokens_asp_net_users_user_id", aspNetUserTokensTable, aspNetUsersTable,
                new[] { user_idColumn2 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_tokens_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "Ecommerce.Identity.Models.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_tokens_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_tokens_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_tokens_asp_net_users_user_idFk).Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
